<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamicPDF.Generator</name>
    </assembly>
    <members>
        <member name="T:ceTe.DynamicPDF.Forms.ButtonField">
            <summary>
            Base class representing a button field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormField">
            <summary>
            Represents a PDF form field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Resource">
            <summary>
            Base class from which all resources are derived.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Resource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Resource"/> class using the next UID.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Resource.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <b>Resource</b> class.
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Resource.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Abstract. Draws the resource to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the resource's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Resource.NewUid">
            <summary>
            Generates a new unique ID for a resource.
            </summary>
            <returns>The generated unique ID.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Resource.Uid">
            <summary>
            Gets the unique ID of the resource.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Resource.RequiredPdfObjects">
            <summary>
            Abstract. Gets the number of PDF objects required by the resource.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="P:ceTe.DynamicPDF.Forms.FormField.Form"/> class.
            </summary>
            <param name="name">Name of the form field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="P:ceTe.DynamicPDF.Forms.FormField.Form"/> class.
            </summary>
            <param name="name">Name of the form field.</param>
            <param name="flags">The flags for the form field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormField.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the form field to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the form field's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the form field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.IsAnnotation">
            <summary>
            Gets or sets a value indicating if the form field is an annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.HasValue">
            <summary>
            Gets a value indicating if the form field has a value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Value">
            <summary>
            Gets or sets the value of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.InheritsName">
            <summary>
            Gets a value indicating if the form field inherits its name.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.InheritsValue">
            <summary>
            Gets a value indicating if the form field inherits its value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.IsReadOnly">
            <summary>
            Gets or sets a value indicating if the form field is read only.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.ChildFields">
            <summary>
            Gets a collection of child form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Flags">
            <summary>
            Gets a collection of child form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.HasChildFields">
            <summary>
            Gets a value indicating if there are child form fields.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.FullName">
            <summary>
            Gets the full name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Name">
            <summary>
            Gets or sets the name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.AlternateName">
            <summary>
            Gets or sets the alternate name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.MappingName">
            <summary>
            Gets or sets the mapping name of the form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Parent">
            <summary>
            Gets the parent form field.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormField.Form">
            <summary>
            Gets the form containing this form field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ButtonField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.ButtonField"/> class.
            </summary>
            <param name="name">Name of the button field.</param>
            <param name="flags">The flags for the button field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ButtonField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the form field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.CheckBoxField">
            <summary>
            Base class representing a check box field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.CheckBoxField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.CheckBoxField"/> class.
            </summary>
            <param name="name">Name of the check box field.</param>
            <param name="flags">The flags for the check box field.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.CheckBoxField.HasValue">
            <summary>
            Overridden. Specifies if the form field has a value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.ChoiceField">
            <summary>
            Base class representing a choice field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ChoiceField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.ChoiceField"/> class.
            </summary>
            <param name="name">Name of the choice field.</param>
            <param name="flags">The flags for the choice field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ChoiceField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the choice field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.ComboBoxField">
            <summary>
            Base class representing a combo box field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ComboBoxField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.ComboBoxField"/> class.
            </summary>
            <param name="name">Name of the combo box field.</param>
            <param name="flags">The flags for the combo box field.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.ComboBoxField.HasValue">
            <summary>
            Overridden. Specifies if the form field has a value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.Form">
            <summary>
            Base class representing an PDF form.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.Form"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the form to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the form's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.GetTextFields">
            <summary>
            Returns a collection of text form fields.
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.Forms.TextFieldList"/> object containing the visible form fields.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.RequireLicense(System.Int32)">
            <summary>
            Sets the required license level for the form.
            </summary>
            <param name="requiredLicenseLevel">The license level required.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.Form.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the form's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.Fields">
            <summary>
            Gets a collection of fields for the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.IsReadOnly">
            <summary>
            Gets or sets a value indicating if the form is read only.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.CalculationOrder">
            <summary>
            Gets the form's calculation order.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.DefaultAlign">
            <summary>
            Gets or sets the default alignment for the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.SignatureFlags">
            <summary>
            Gets or sets the signature flags for the form.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.NeedsAppearances">
            <summary>
            Gets or sets a value indicating if the form needs appearance streams.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.Form.RequiredLicenseLevel">
            <summary>
            Gets a value indicating the required license level for the form.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormCalculationOrder">
            <summary>
            Represents a PDF forms calculation order.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormCalculationOrder.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormCalculationOrder.Add(ceTe.DynamicPDF.Forms.FormField)">
            <summary>
            Adds a form field to the calculation order.
            </summary>
            <param name="formField"><see cref="T:ceTe.DynamicPDF.Forms.FormField"/> object to add.</param>
            <returns>The index of the added form field.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormCalculationOrder.Count">
            <summary>
            Gets the number of fields in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormCalculationOrder.Item(System.Int32)">
            <summary>
            Gets a text form field by index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormFieldAlign">
            <summary>
            Specifies alignment of form fields.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldAlign.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldAlign.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldAlign.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormFieldFlags">
            <summary>
            Specifies form field flags.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.ReadOnly">
            <summary>
            Read only field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Required">
            <summary>
            Required field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.NoExport">
            <summary>
            No export set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Multiline">
            <summary>
            Multiline field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Password">
            <summary>
            Password field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.NoToggleToOff">
            <summary>
            No toggle to off set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Radio">
            <summary>
            Radio field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Pushbutton">
            <summary>
            Push button field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Combo">
            <summary>
            Combo field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Edit">
            <summary>
            Edit field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Sort">
            <summary>
            Sort set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.FileSelect">
            <summary>
            File select field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.MultiSelect">
            <summary>
            Multi select field.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.DoNotSpellCheck">
            <summary>
            Do not spell check set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.DoNotScroll">
            <summary>
            Do not scroll set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.Comb">
            <summary>
            Combs set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.RadiosInUnison">
            <summary>
            Radios in unison set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.CommitOnSelChange">
            <summary>
            Commit on select change set.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.FormFieldFlags.RichText">
            <summary>
            Rich text field.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.FormFieldList">
            <summary>
            Represents a collection of form fields.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormFieldList.Add(ceTe.DynamicPDF.Forms.FormField)">
            <summary>
            Adds a form field to the collection.
            </summary>
            <param name="formField"><see cref="T:ceTe.DynamicPDF.Forms.FormField"/> object to add.</param>
            <returns>The index of the added form field.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormFieldList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.FormFieldList.DrawKidReferences(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the child references to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the form field list's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormFieldList.Count">
            <summary>
            Gets the number of fields in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormFieldList.Owner">
            <summary>
            Get the <see cref="T:ceTe.DynamicPDF.Forms.FormField"/> that owns the form field list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormFieldList.Item(System.String)">
            <summary>
            Gets a form field by the given name.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.FormFieldList.Item(System.Int32)">
            <summary>
            Gets a form field by index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.ListBoxField">
            <summary>
            Base class representing a list box field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ListBoxField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.ListBoxField"/> class.
            </summary>
            <param name="name">Name of the list box field.</param>
            <param name="flags">The flags for the list box field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.ListBoxField.SetValues(System.String[])">
            <summary>
            Abstract. Sets the values of the list box field.
            </summary>
            <param name="values">Array of string values to set.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.ListBoxField.HasValue">
            <summary>
            Overridden. Specifies if the form field has a value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.RadioButtonField">
            <summary>
            Base class representing a radio button field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.RadioButtonField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.RadioButtonField"/> class.
            </summary>
            <param name="name">Name of the radio button field.</param>
            <param name="flags">The flags for the radio button field.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.RadioButtonField.HasValue">
            <summary>
            Overridden. Specifies if the form field has a value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.SignatureField">
            <summary>
            Base class representing a signature field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.SignatureField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.SignatureField"/> class.
            </summary>
            <param name="name">Name of the signature field.</param>
            <param name="flags">The flags for the signature field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.SignatureField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the signature field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.SignatureFlags">
            <summary>
            Specifies signature field flags.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.SignatureFlags.None">
            <summary>
            None specified
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.SignatureFlags.SignatureExists">
            <summary>
            Signature field exists
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Forms.SignatureFlags.AppendOnly">
            <summary>
            Append only set
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.TextField">
            <summary>
            Base class representing a text field.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.TextField.#ctor(System.String,ceTe.DynamicPDF.Forms.FormFieldAlign,ceTe.DynamicPDF.Forms.FormFieldFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Forms.TextField"/> class.
            </summary>
            <param name="name">Name of the text field.</param>
            <param name="align">Alignment of the text field.</param>
            <param name="flags">The flags for the text field.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.TextField.DrawDictionary(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the text field's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextField.HasValue">
            <summary>
            Overridden. Specifies if the form field has a value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextField.MaximumLength">
            <summary>
            Gets the maximum length of the text in the text field
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Forms.TextFieldList">
            <summary>
            Represents a collection of text form fields.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Forms.TextFieldList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.Forms.FormFieldList"/></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextFieldList.Count">
            <summary>
            Gets the number of fields in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Forms.TextFieldList.Item(System.Int32)">
            <summary>
            Gets a text form field by index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.BitmapImageData">
            <summary>
            Represents the data of an image created using the <see cref="T:System.Drawing.Bitmap"/> class.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.ImageData">
            <summary>
            Represents the data of an image.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetImage(System.String)">
            <summary>
            Returns an <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/> of the correct type for the given physical file path.
            </summary>
            <param name="filePath">Physical file path of the image data.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetImage(System.IO.Stream)">
            <summary>
            Returns an <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/> of the correct type for the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image data.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetImage(System.Byte[])">
            <summary>
            Returns an <see cref="T:ceTe.DynamicPDF.Imaging.ImageData"/> of the correct type for the given byte array.
            </summary>
            <param name="data">Byte array containing the image data.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetPointWidth">
            <summary>
            Calculates the width of the image in points.
            </summary>
            <returns>The width of the image in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetPointHeight">
            <summary>
            Calculates the height of the image in points.
            </summary>
            <returns>The height of the image in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetPage(System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Page"/> object containing the image as a background.
            </summary>
            <param name="margins">The margins of the page.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Page"/> with the image as a background.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.GetPage">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Page"/> object containing the image as a background.
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.Page"/> with the image as a background.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageData.Draw(ceTe.DynamicPDF.IO.PageWriter,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Virtual. Draws the image data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> class to receive the image data's output.</param>
            <param name="pdfX">X PDF coordinate for the image when drawn.</param>
            <param name="pdfY">Y PDF Coordinate for the image when drawn.</param>
            <param name="width">Width of the image when drawn.</param>
            <param name="height">Height of the image when drawn.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.Width">
            <summary>
            Abstract. Gets the pixel width of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.Height">
            <summary>
            Abstract. Gets the pixel height of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.ScaleX">
            <summary>
            Abstract. Gets the X scale of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.ScaleY">
            <summary>
            Abstract. Gets the Y scale of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.HorizontalDpi">
            <summary>
            Abstract. Gets the horizontal dpi (also known as pixels per inch) of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.VerticalDpi">
            <summary>
            Abstract. Gets the vertical dpi (also known as pixels per inch) of the image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.ImageData.Interpolate">
            <summary>
            Gets or set a value indicating is image interpolation should be used by the PDF viewer when viewing the Image.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.BitmapImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.BitmapImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.BitmapImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.BitmapImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.BitmapImageData.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.BitmapImageData"/> class.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.BitmapImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the bitmap image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the bitmap image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the bitmap image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.Width">
            <summary>
            Overridden. Gets the width of the bitmap image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.Height">
            <summary>
            Overridden. Gets the height of the bitmap image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.ScaleX">
            <summary>
            Overridden. Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.BitmapImageData.ScaleY">
            <summary>
            Overridden. Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.GifImageData">
            <summary>
            Represents the data of a GIF image.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.GifImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.GifImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a GIF image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a GIF image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.GifImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the GIF image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the GIF image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the GIF image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.Width">
            <summary>
            Overridden. Gets the width of the GIF image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.Height">
            <summary>
            Overridden. Gets the height of the GIF image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.ScaleX">
            <summary>
            Overridden. Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.GifImageData.ScaleY">
            <summary>
            Overridden. Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.ImageParsingException">
            <summary>
            The exception that is thrown for an image parsing error.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.GeneratorException">
            <summary>
            The exception that is thrown for a DynamicPDF Generator error.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.GeneratorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.GeneratorException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.ImageParsingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.ImageParsingException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData">
            <summary>
            Represents the data of a JPEG2000 image.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a JPEG2000 image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a JPEG2000 image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the JPEG2000 image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the JPEG2000 image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the JPEG2000 image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.Width">
            <summary>
            Overridden. Gets the width of the JPEG2000 image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.Height">
            <summary>
            Overridden. Gets the height of the JPEG2000 image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.ScaleX">
            <summary>
            Overridden. Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.Jpeg2000ImageData.ScaleY">
            <summary>
            Overridden. Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.JpegImageData">
            <summary>
            Represents the data of a JPEG image.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.JpegImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.JpegImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a JPEG image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a JPEG image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.JpegImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the JPEG image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the JPEG image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the JPEG image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.Width">
            <summary>
            Overridden. Gets the width of the JPEG image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.Height">
            <summary>
            Overridden. Gets the height of the JPEG image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.ScaleX">
            <summary>
            Overridden. Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.JpegImageData.ScaleY">
            <summary>
            Overridden. Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.PngImageData">
            <summary>
            Represents the data of a PNG image.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.PngImageData"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.PngImageData"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a PNG image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a PNG image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.PngImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the PNG image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the PNG image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the PNG image data.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.Width">
            <summary>
            Overridden. Gets the pixel width of the PNG image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.Height">
            <summary>
            Overridden. Gets the pixel height of the PNG image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.ScaleX">
            <summary>
            Overridden. Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.PngImageData.ScaleY">
            <summary>
            Overridden. Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.TiffFile">
            <summary>
            Represents a TIFF image file.
            </summary>
            <remarks>See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETImagesTiffImages.htm">Tiff Images</a> section for more details on TiffFile.</remarks>
            <example>This example shows how to create a PDF out of a Tiff image.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Imaging
            
            Module MyModule
            		
            	Sub Main()
            		' Create a TiffFile object from the TIFF image
            		Dim myTiffFile As TiffFile = New TiffFile("C:\MyMultipageTiff.tif")
            		
            		' Create a document object from the file
            		Dim MyDocument As Document = myTiffFile.GetDocument()
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Imaging;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a TiffFile object from the TIFF image
            		TiffFile tiffFile = new TiffFile( @"C:\MyMultipageTiff.tif" );
            		
            		// Create a document object from the file
            		Document document = tiffFile.GetDocument();
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.TiffFile"/> class.
            </summary>
            <param name="filePath">The physical file path of the TIFF.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.TiffFile"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the TIFF file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Imaging.TiffFile"/> class.
            </summary>
            <param name="data">Byte array containing the TIFF file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.Close">
            <summary>
            Closes the stream associated with this object.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.GetDocument">
            <summary>
            Creates a <see cref="T:ceTe.DynamicPDF.Document"/> object that contains the images of the tiff file. 
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.Document"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.IsValid(System.String)">
            <summary>
            Returns a value indicating if the provides file extension is valid for a TIFF image.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffFile.IsValid(System.Byte[])">
            <summary>
            Returns a value indicating if the provides file header is valid for a TIFF image.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffFile.Images">
            <summary>
            Returns a collection of images in the TIFF file.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffFile.FirstImage">
            <summary>
            Returns the first image in the TIFF file.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.TiffImageData">
            <summary>
            Represents the data of a TIFF image contained in a TIFF image file.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffImageData.Draw(ceTe.DynamicPDF.IO.PageWriter,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Overridden. Draws the TIFF image data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> class to receive the TIFF image data's output.</param>
            <param name="pdfX">X PDF coordinate for the TIFF image when drawn.</param>
            <param name="pdfY">Y PDF Coordinate for the TIFF image when drawn.</param>
            <param name="width">Width of the TIFF image when drawn.</param>
            <param name="height">Height of the TIFF image when drawn.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffImageData.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the TIFF image data to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the TIFF image data's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the TIFF image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.Width">
            <summary>
            Overridden. Gets the width of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.Height">
            <summary>
            Overridden. Gets the height of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.ScaleX">
            <summary>
            Overridden. Gets the X scale of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageData.ScaleY">
            <summary>
            Overridden. Gets the Y scale of the image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Imaging.TiffImageDataList">
            <summary>
            Represents a collection of TIFF images.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Imaging.TiffImageDataList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.Imaging.TiffImageDataList"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:ceTe.DynamicPDF.Imaging.TiffImageDataList"/></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageDataList.Count">
            <summary>
            Gets the number of images in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Imaging.TiffImageDataList.Item(System.Int32)">
            <summary>
            Gets the TIFF image data at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.Arc4">
            <summary>
            Represents an ARC4 encryption class. For internal use only.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.DocumentResourceList">
            <summary>
            Represents a collection of resources for a document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentResourceList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Returns a PDF object reference for the given resource.
            </summary>
            <param name="resource"><see cref="T:ceTe.DynamicPDF.Resource"/> object to add.</param>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <returns>A string value of the PDF object reference.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentResourceList.Add(ceTe.DynamicPDF.Resource)">
            <summary>
            Adds a resource to the document.
            </summary>
            <param name="resource">The resource to add.</param>
            <returns>The PDF object number of the added resource.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.DocumentWriter">
            <summary>
            Represents a writer class for a document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Delimit">
            <summary>
            Delimits the output stream if required.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.GetPageObject(System.Int32)">
            <summary>
            Returns the PDF object number for the given page.
            </summary>
            <param name="pageNumber">Page number in the document.</param>
            <returns>The PDF object number for the given page.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteBeginObject">
            <summary>
            Begins a PDF object and send it to the output stream.
            </summary>
            <returns>The PDF object number of the new object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.GetNextObject">
            <summary>
            Returns the next PDF object number that will be used.
            </summary>
            <returns>The next PDF object number.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteEndObject">
            <summary>
            Ends a PDF object and send it to the output stream.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteInteger(System.Int32)">
            <summary>
            Writes an integer to the output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.Single)">
            <summary>
            Writes a float to the output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.Byte)">
            <summary>
            Writes a byte to the output stream.
            </summary>
            <param name="Byte">The byte to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.String)">
            <summary>
            Writes text to the output stream.
            </summary>
            <param name="text">The text to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteText(System.String)">
            <summary>
            Writes a PDF text object to the output stream.
            </summary>
            <param name="text">The text of the text object to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteUnicodeText(System.String,System.String,System.String)">
            <summary>
            Writes a PDF text object to the output stream.
            </summary>
            <param name="textBefore">The text to appear before the PDF text object.</param>
            <param name="text">The text of the text object to write.</param>
            <param name="textAfter">The text to appear after the PDF text object.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteUnicodeText(System.String)">
            <summary>
            Writes a PDF text object to the output stream.
            </summary>
            <param name="text">The text of the text object to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteText(System.Byte[])">
            <summary>
            Writes a PDF text object to the output stream.
            </summary>
            <param name="text">The text of the text object to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteText(System.String,System.String,System.String)">
            <summary>
            Writes a PDF text object to the output stream.
            </summary>
            <param name="textBefore">The text to appear before the PDF text object.</param>
            <param name="text">The text of the text object to write.</param>
            <param name="textAfter">The text to appear after the PDF text object.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteText(System.String,System.Byte[],System.String)">
            <summary>
            Writes a PDF text object to the output stream.
            </summary>
            <param name="textBefore">The text to appear before the PDF text object.</param>
            <param name="text">The text of the text object to write.</param>
            <param name="textAfter">The text to appear after the PDF text object.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the output stream.
            </summary>
            <param name="data">Byte array to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes a portion of a byte array to the output stream.
            </summary>
            <param name="data">Byte array to output.</param>
            <param name="length">Length of output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a portion of a byte array to the output stream.
            </summary>
            <param name="data">Byte array to output.</param>
            <param name="start">Start of output.</param>
            <param name="length">Length of output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteStream(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Writes a PDF stream object to the output stream.
            </summary>
            <param name="data">Byte array to output.</param>
            <param name="length">Length of output.</param>
            <param name="preserveData">Specifies if the data must be preserved for future use.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteStream(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes a PDF stream object to the output stream.
            </summary>
            <param name="data">Byte array to output.</param>
            <param name="start">Start of output.</param>
            <param name="length">Length of output.</param>
            <param name="preserveData">Specifies if the data must be preserved for future use.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteStreamWithCompression(System.Byte[],System.Int32)">
            <summary>
            Writes a PDF stream object to the output stream.
            </summary>
            <param name="data">Byte array to output.</param>
            <param name="length">Length of output.</param>
            <returns>Size of stream after compression.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteSpace">
            <summary>
            Writes a space to the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteNewLine">
            <summary>
            Writes a new line to the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.WriteColorValue(System.Single)">
            <summary>
            Writes a color value to the document.
            </summary>
            <param name="value">Color value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.GetCurrentObjNum">
            <summary>
            Gets the PDF object number of the currently open PDF object.
            </summary>
            <returns>Object number of current PDF object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.SetFontSubsetter(ceTe.DynamicPDF.Text.IFontSubsettable)">
            <summary>
            Sets the current font subsetter.
            </summary>
            <param name="subsettableFont">Subsettable font to use for setting the current font subsetter.</param>
            <returns>The current font subsetter.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.DocumentWriter.ClearFontSubsetter">
            <summary>
            Clears the current font subsetter.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.DelimiterRequired">
            <summary>
            Gets or sets a value indicating if the output needs to be delimited.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.Resources">
            <summary>
            Gets a collection of resources.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.Document">
            <summary>
            Gets the current document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.DrawingAssembly">
            <summary>
            Gets the current document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.Position">
            <summary>
            Gets or sets the position in the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.DocumentWriter.FontSubsetter">
            <summary>
            Gets the current font subsetter.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.Encrypter">
            <summary>
            Represents an Encrypter class used for encryption of the document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> class.
            </summary>
            <param name="owner">Encrypted owner password.</param>
            <param name="user">Encrypted user password.</param>
            <param name="key">Encryption key.</param>
            <param name="privileges">PDF value of privileges.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.Encrypt(System.Byte[],System.Int32)">
            <summary>
            Encrypts the data found in the data byte array. The data is encrypted in place and the array is modified.
            </summary>
            <param name="data">Data to encrypt.</param>
            <param name="objectNumber">Object number of the PDF object containing the data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts the data found in the data byte array. The data is encrypted in place and the array is modified.
            </summary>
            <param name="data">Data to encrypt.</param>
            <param name="dataLength">Length of the data to encrypt.</param>
            <param name="objectNumber">Object number of the PDF object containing the data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.EncryptToByte(System.Byte[],System.Int32)">
            <summary>
            Encrypts the data found in the data byte array to a new byte array.
            </summary>
            <param name="data">Data to encrypt.</param>
            <param name="objectNumber">Object number of the PDF object containing the data.</param>
            <returns>A byte array containing the encrypted data.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.Encrypter.EncryptToByte(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Encrypts the data found in the data byte array to a new byte array.
            </summary>
            <param name="data">Data to encrypt.</param>
            <param name="start">Start of the data to encrypt.</param>
            <param name="length">Length of the data to encrypt.</param>
            <param name="objectNumber">Object number of the PDF object containing the data.</param>
            <returns>A byte array containing the encrypted data.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.FontSubsetter">
            <summary>
            Represents an font subsetter.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.FontSubsetter.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> class.
            </summary>
            <param name="glyphCount"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.FontSubsetter.GlyphUsed(System.UInt16)">
            <summary>
            Sets the glyph as used.
            </summary>
            <param name="glyphIndex">Glyph to mark as used.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.FontSubsetter.GlyphsUsed">
            <summary>
            Gets an array of all glyphs.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.ImageBuffer">
            <summary>
            Represents a buffer for holding image data.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.ImageBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.ImageBuffer"/> class.
            </summary>
            <param name="initialSize">Initial size of the buffer.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageAnnotationList">
            <summary>
            Represents a collection of annotations for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageAnnotationList.Add(ceTe.DynamicPDF.Resource)">
            <summary>
            Adds an annotation to the collection.
            </summary>
            <param name="annotation">Annotation to add.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageColorSpaceList">
            <summary>
            Represents a collection of color spaces for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageColorSpaceList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the color space collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageColorSpaceList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageColorSpaceList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the color space's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageColorSpaceList.Count">
            <summary>
            Gets the number of color spaces in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageExtGStateList">
            <summary>
            Represents a collection of external graphics states for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageExtGStateList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the external graphics states collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageExtGStateList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageExtGStateList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the external graphics state's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageExtGStateList.Count">
            <summary>
            Gets the number of external graphics states in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageFontList">
            <summary>
            Represents a collection of fonts for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageFontList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the fonts collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageFontList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Font to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="font">Font to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageFontList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the font's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageFontList.Count">
            <summary>
            Gets the number of fonts in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PagePatternList">
            <summary>
            Represents a collection of patterns for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePatternList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the patterns collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePatternList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePatternList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the pattern's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PagePatternList.Count">
            <summary>
            Gets the number of patterns in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PagePropertiesList">
            <summary>
            Represents a collection of properties for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePropertiesList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the properties collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePropertiesList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PagePropertiesList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the properties' dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PagePropertiesList.Count">
            <summary>
            Gets the number of properties in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageResources">
            <summary>
            Represents a pages resources.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageResources.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the page resources to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageResources.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the page resources.
            </summary>
            <param name="startingNameNumber"></param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.Fonts">
            <summary>
            Gets a collection of fonts used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.XObjects">
            <summary>
            Gets a collection of XObjects used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.Shadings">
            <summary>
            Gets a collection of Shadings used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.ColorSpaces">
            <summary>
            Gets a collection of ColorSpaces used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.Patterns">
            <summary>
            Gets a collection of Patterns used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.Properties">
            <summary>
            Gets a collection of Properties used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageResources.ExtGStates">
            <summary>
            Gets a collection of ExtGStates used on the page.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageShadingList">
            <summary>
            Represents a collection of shadings for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageShadingList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the shadings collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageShadingList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageShadingList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the shading's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageShadingList.Count">
            <summary>
            Gets the number of shadings in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageWriter">
            <summary>
            Represents a writer class for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Do(ceTe.DynamicPDF.Resource)">
            <summary>
            Writes a PDF "Do" operator to the page.
            </summary>
            <param name="xObject">The XObject to reference.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_BT">
            <summary>
            Writes a PDF "BT" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_ET">
            <summary>
            Writes a PDF "ET" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_W">
            <summary>
            Writes a PDF "W" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Wx">
            <summary>
            Writes a PDF "W*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tc(System.Single)">
            <summary>
            Writes a PDF "Tc" operator to the page.
            </summary>
            <param name="characterSpacing">The character spacing to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tw(System.Single)">
            <summary>
            Writes a PDF "Tw" operator to the page.
            </summary>
            <param name="wordSpacing">The word spacing to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tz(System.Single)">
            <summary>
            Writes a PDF "Tz" operator to the page.
            </summary>
            <param name="horizontalScaling">The horizontal spacing to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_TL(System.Single)">
            <summary>
            Writes a PDF "TL" operator to the page.
            </summary>
            <param name="leading">The leading to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tf(ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Writes a PDF "Tf" operator to the page.
            </summary>
            <param name="font">The <see cref="T:ceTe.DynamicPDF.Font"/> to draw.</param>
            <param name="fontSize">The font size to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tr(ceTe.DynamicPDF.TextRenderingMode)">
            <summary>
            Writes a PDF "Tr" operator to the page.
            </summary>
            <param name="renderingMode">The text render mode to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Ts(System.Single)">
            <summary>
            Writes a PDF "Ts" operator to the page.
            </summary>
            <param name="textRise">The text rise to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_w_(System.Single)">
            <summary>
            Writes a PDF "w" operator to the page.
            </summary>
            <param name="lineWidth">The line width to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_J(ceTe.DynamicPDF.LineCap)">
            <summary>
            Writes a PDF "J" operator to the page.
            </summary>
            <param name="lineCap">The line cap style to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_j_(ceTe.DynamicPDF.LineJoin)">
            <summary>
            Writes a PDF "j" operator to the page.
            </summary>
            <param name="lineJoin">The line join style to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_M(System.Single)">
            <summary>
            Writes a PDF "M" operator to the page.
            </summary>
            <param name="miterLimit">The miter limit to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_d(ceTe.DynamicPDF.LineStyle)">
            <summary>
            Writes a PDF "d" operator to the page.
            </summary>
            <param name="lineStyle">The line style to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_gs(ceTe.DynamicPDF.Resource)">
            <summary>
            Writes a PDF "gs" operator to the page.
            </summary>
            <param name="extGState">The external graphics state <see cref="T:ceTe.DynamicPDF.Resource"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Td_(System.Single,System.Single)">
            <summary>
            Writes a PDF "Td" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_TD(System.Single,System.Single)">
            <summary>
            Writes a PDF "TD" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tm(System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "Tm" operator to the page.
            </summary>
            <param name="angle">The angle to draw.</param>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tm(System.Single,System.Single)">
            <summary>
            Writes a PDF "Tm" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tm(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "Tm" operator to the page.
            </summary>
            <param name="a">The A value to draw.</param>
            <param name="b">The B value to draw.</param>
            <param name="c">The C value to draw.</param>
            <param name="d">The D value to draw.</param>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tm(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "Tm" operator to the page.
            </summary>
            <param name="xX">The X X multiple to draw.</param>
            <param name="xY">The X Y multiple to draw.</param>
            <param name="yX">The Y X multiple to draw.</param>
            <param name="yY">The Y Y multiple to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tx">
            <summary>
            Writes a PDF "Tx" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tj_(System.Char[],System.Boolean)">
            <summary>
            Writes a PDF "Tj" operator to the page.
            </summary>
            <param name="text">The byte array of WINANSI text to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Tj_(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes a PDF "Tj" operator to the page.
            </summary>
            <param name="textArray">The byte array of WINANSI text to draw.</param>
            <param name="start">The start position of text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_SQuote(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes a PDF Single Quote ("'") operator to the page.
            </summary>
            <param name="textArray">The byte array of WINANSI text to draw.</param>
            <param name="start">The start position of text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_DQuote(System.Single,System.Single,System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes a PDF Double Quote (""") operator to the page.
            </summary>
            <param name="wordSpacing">Word spacing to draw.</param>
            <param name="characterSpacing">The character spacing to draw.</param>
            <param name="textArray">The byte array of WINANSI text to draw.</param>
            <param name="start">The start position of text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_TJ(System.Char[],System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Writes a PDF "TJ" operator to the page.
            </summary>
            <param name="textArray">The byte array of WINANSI text to draw.</param>
            <param name="start">Start position of text.</param>
            <param name="length">The number of characters to draw.</param>
            <param name="wordSpacing">Word spacing to use when drawn.</param>
            <param name="rightToLeft">Specifies if the text is to be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_G(ceTe.DynamicPDF.Grayscale)">
            <summary>
            Writes a PDF "G" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.Grayscale"/> color to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_g_(ceTe.DynamicPDF.Grayscale)">
            <summary>
            Writes a PDF "g" operator to the page.
            </summary>
            <param name="color">The <c ref="Grayscale"/> color to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_RG(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Writes a PDF "RG" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.RgbColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_rg_(ceTe.DynamicPDF.RgbColor)">
            <summary>
            Writes a PDF "rg" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.RgbColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_K(ceTe.DynamicPDF.CmykColor)">
            <summary>
            Writes a PDF "K" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.CmykColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_k_(ceTe.DynamicPDF.CmykColor)">
            <summary>
            Writes a PDF "k" operator to the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.CmykColor"/> to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_q_(System.Boolean)">
            <summary>
            Writes a PDF "q" operator to the page.
            </summary>
            <param name="storeState"><b>true</b> if the <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> should be stored for later retrieval by a "Q" operator.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Q(System.Boolean)">
            <summary>
            Writes a PDF "G" operator to the page.
            </summary>
            <param name="restoreState"><b>true</b> if the <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> should be restored from a previous "q" operator.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_q_">
            <summary>
            Writes a PDF "q" operator to the page. <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> is not stored.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Q">
            <summary>
            Writes a PDF "Q" operator to the page. <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> is not restored.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_cm(System.Single,System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="xOffset">The X offset to draw.</param>
            <param name="yOffset">The U offset to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_cm(System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="angle">The angle to draw.</param>
            <param name="xOffset">The X offset to draw.</param>
            <param name="yOffset">The Y offset to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_cm(System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="angle">The angle to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_cm(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="xX">The X X multiple to draw.</param>
            <param name="xY">The X Y multiple to draw.</param>
            <param name="yX">The Y X multiple to draw.</param>
            <param name="yY">The Y Y multiple to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_cm(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "cm" operator to the page.
            </summary>
            <param name="a">The A value to draw.</param>
            <param name="b">The B value to draw.</param>
            <param name="c">The C value to draw.</param>
            <param name="d">The D value to draw.</param>
            <param name="e">The E value to draw.</param>
            <param name="f">The F value to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_m_(System.Single,System.Single)">
            <summary>
            Writes a PDF "m" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_l_(System.Single,System.Single)">
            <summary>
            Writes a PDF "l" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The y coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_c(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "c" operator to the page.
            </summary>
            <param name="x1">The X1 coordinate to draw.</param>
            <param name="y1">The Y1 coordinate to draw.</param>
            <param name="x2">The X2 coordinate to draw.</param>
            <param name="y2">The Y2 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_v(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "v" operator to the page.
            </summary>
            <param name="x2">The X2 coordinate to draw.</param>
            <param name="y2">The Y2 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_y(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "y" operator to the page.
            </summary>
            <param name="x1">The X1 coordinate to draw.</param>
            <param name="y1">The Y1 coordinate to draw.</param>
            <param name="x3">The X3 coordinate to draw.</param>
            <param name="y3">The Y3 coordinate to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_h">
            <summary>
            Writes a PDF "h" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_re(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Writes a PDF "re" operator to the page.
            </summary>
            <param name="x">The X coordinate to draw.</param>
            <param name="y">The Y coordinate to draw.</param>
            <param name="width">The width to draw.</param>
            <param name="height">The height to draw.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.WriteApply(ceTe.DynamicPDF.Apply,System.Boolean)">
            <summary>
            Strokes and/or fills the path.
            </summary>
            <param name="apply">The <see cref="T:ceTe.DynamicPDF.Apply"/> type to use.</param>
            <param name="close"><b>true</b> if the path should be closed.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.WriteApply(ceTe.DynamicPDF.Apply)">
            <summary>
            Strokes and/or fills the path.
            </summary>
            <param name="apply">The <see cref="T:ceTe.DynamicPDF.Apply"/> type to use.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_S">
            <summary>
            Writes a PDF "S" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_s_">
            <summary>
            Writes a PDF "s" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_fx">
            <summary>
            Writes a PDF "f*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_f">
            <summary>
            Writes a PDF "f" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_B">
            <summary>
            Writes a PDF "B" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_b_">
            <summary>
            Writes a PDF "b" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_Bx">
            <summary>
            Writes a PDF "B*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_bx_">
            <summary>
            Writes a PDF "b*" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write_n">
            <summary>
            Writes a PDF "n" operator to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.RequireLicense(System.Int32)">
            <summary>
            Specifies that a license is required.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.RequireLicense">
            <summary>
            Specifies that a license is required.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetLineWidth(System.Single)">
            <summary>
            Sets the line width for the page.
            </summary>
            <param name="lineWidth">The width of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetCharacterSpacing(System.Single)">
            <summary>
            Sets the character spacing for text on the page.
            </summary>
            <param name="characterSpacing">The character spacing of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetHorizontalScaling(System.Single)">
            <summary>
            Sets the horizontal scaling for text on the page.
            </summary>
            <param name="horizontalScaling">The horizontal scaling of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetTextRenderingMode(ceTe.DynamicPDF.TextRenderingMode)">
            <summary>
            Sets text rendering mode for text on the page.
            </summary>
            <param name="textRenderingMode">The text rendering mode of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetTextRise(System.Single)">
            <summary>
            Sets text rise for text on the page.
            </summary>
            <param name="textRise">The text rise of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetWordSpacing(System.Single)">
            <summary>
            Sets the word spacing for text on the page.
            </summary>
            <param name="wordSpacing">The word spacing of text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetLineStyle(ceTe.DynamicPDF.LineStyle)">
            <summary>
            Sets the line style for the page.
            </summary>
            <param name="lineStyle">The line style to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetGraphicsMode">
            <summary>
            Sets the page to graphics mode.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetTextMode">
            <summary>
            Sets the page to text mode.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetTextDefaults">
            <summary>
            Sets the text properties render mode, character space, word space, horizontal scale, and text rise to the defaults.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetLeading(System.Single)">
            <summary>
            Sets the leading for text on the page.
            </summary>
            <param name="leading">The leading value to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetLineJoin(ceTe.DynamicPDF.LineJoin)">
            <summary>
            Sets the line join style for paths on the page.
            </summary>
            <param name="lineJoin">The line join style to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetLineCap(ceTe.DynamicPDF.LineCap)">
            <summary>
            Sets the line cap style for paths on the page.
            </summary>
            <param name="lineCap">The line cap style to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetMiterLimit(System.Single)">
            <summary>
            Sets the miterLimit for paths on the page.
            </summary>
            <param name="miterLimit">The miter limit to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetFont(ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Sets the font and font size for text on the page.
            </summary>
            <param name="font">The <see cref="T:ceTe.DynamicPDF.Font"/> to set.</param>
            <param name="fontSize">The font size to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.SetColor(ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply)">
            <summary>
            Sets the color for the page.
            </summary>
            <param name="color">The <see cref="T:ceTe.DynamicPDF.Color"/> to set.</param>
            <param name="apply">Specifies how color is applied.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write(System.String)">
            <summary>
            Writes text to the page.
            </summary>
            <param name="Text">The text to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write(System.Byte)">
            <summary>
            Writes a byte value to the page.
            </summary>
            <param name="value">The byte to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the page.
            </summary>
            <param name="data">The byte array to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write(System.Byte[],System.Int32)">
            <summary>
            Writes a portion of a byte array to the page.
            </summary>
            <param name="data">The byte array to output.</param>
            <param name="length">The length to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a portion of a byte array to the page.
            </summary>
            <param name="data">The byte array to output.</param>
            <param name="start">The start index of source.</param>
            <param name="length">The length to output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write(System.IO.Stream,System.Int32)">
            <summary>
            Writes the contents of a stream to the page.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write from.</param>
            <param name="length">The length to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.WriteSpace">
            <summary>
            Writes a space to the page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.WritePoint(System.Single,System.Single)">
            <summary>
            Writes a point to the page adjusted to PDF coordinates.
            </summary>
            <param name="pointX">X coordinate of point.</param>
            <param name="pointY">Y coordinate of point.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.WritePair(System.Single,System.Single)">
            <summary>
            Writes a pair of numbers to the page.
            </summary>
            <param name="value1">First number to write.</param>
            <param name="value2">Second number to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.WritePointX(System.Single)">
            <summary>
            Writes an X coordinate to the page adjusted to the PDF coordinate.
            </summary>
            <param name="pointX">X coordinate to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.WritePointY(System.Single)">
            <summary>
            Writes an X coordinate to the page adjusted to the PDF coordinate.
            </summary>
            <param name="pointY">Y coordinate to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.WriteColorValue(System.Byte)">
            <summary>
            Writes an color value to the page.
            </summary>
            <param name="value">The color value to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write(System.Single)">
            <summary>
            Writes a floating point number to the page.
            </summary>
            <param name="value">Number to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Write(System.Int32)">
            <summary>
            Writes an integer to the page.
            </summary>
            <param name="value">Number to write.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.GrowIf(System.Int32)">
            <summary>
            Grows the buffer is the given bytes will not fit in the buffer.
            </summary>
            <param name="neededBytes">Required bytes.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriter.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the page writer to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="P:ceTe.DynamicPDF.IO.PageWriter.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Symbol font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.Dimensions">
            <summary>
            Gets the dimensions of the current area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.SectionPageNumber">
            <summary>
            Gets the section page number being drawn the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.PageNumber">
            <summary>
            Gets the page number being drawn to the document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.Page">
            <summary>
            Gets the <b>Page</b> object the page writer belongs to.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.Document">
            <summary>
            Gets the <b>Document</b> object the page writer belongs to.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.DocumentWriter">
            <summary>
            Gets the <b>DocumentWriter</b> object the page writer is currently drawing to.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.Resources">
            <summary>
            Gets the resources used on the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageWriter.Annotations">
            <summary>
            Gets a list of annotations used on the page.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageWriterState">
            <summary>
            Represents the page writers state.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.CharacterSpacing">
            <summary>
            Represents character spacing.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.WordSpacing">
            <summary>
            Represents word spacing.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.HorizontalScaling">
            <summary>
            represents horizontal spacing.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.Leading">
            <summary>
            Represents line leading.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.Font">
            <summary>
            represents the Font.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.FontSize">
            <summary>
            Represents font size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.TextRenderingMode">
            <summary>
            Represents text render mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.TextRise">
            <summary>
            represents text rise.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.LineWidth">
            <summary>
            Represents line width.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.LineCap">
            <summary>
            Represents line cap style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.LineJoin">
            <summary>
            Represents line join style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.MiterLimit">
            <summary>
            Represents miter limit.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.LineStyle">
            <summary>
            Represents line style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.StrokeColor">
            <summary>
            Represents stroke color.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.IO.PageWriterState.FillColor">
            <summary>
            Represents fill color.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriterState.#ctor(ceTe.DynamicPDF.IO.PageWriterState)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> class.
            </summary>
            <param name="state">Page writer state to clone.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageWriterState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.IO.PageWriterState"/> class.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.IO.PageXObjectList">
            <summary>
            Represents a collection of XObjects for a page.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageXObjectList.SetStartingNameNumber(System.Int32)">
            <summary>
            Sets the starting name number for the XObjects collection.
            </summary>
            <param name="startingNameNumber">The starting name number.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageXObjectList.Add(ceTe.DynamicPDF.Resource,ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Writes the PDF name for the Resource to the page and adds it to the pages 
            resource list if it has not previously been added.
            </summary>
            <param name="resource">Resource to add to the page.</param>
            <param name="writer">The writer for the current page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.IO.PageXObjectList.DrawEntries(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the XObject's dictionary entries to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.IO.PageXObjectList.Count">
            <summary>
            Gets the number of XObjects in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Licensing.Manager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Licensing.Manager.AddLicense(System.String)">
            <summary>
            
            </summary>
            <param name="licenseKey"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Licensing.Manager.IsProductLicensed(System.Int32)">
            <summary>
            
            </summary>
            <param name="requiredLicense"></param>
            <returns></returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.BarCode">
            <summary>
            Base class from which bar code page elements are derived.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.RotatingPageElement">
            <summary>
            Base class from which rotating page elements are derived.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElement">
            <summary>
            Base class from which all page elements are derived.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElement"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElement"/> class.
            </summary>
            <param name="id">The id the page element is know by.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElement.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Abstract. Draws the page element to the given <b>PageWriter</b> class.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> class to receive the page elements output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElement.SetRequiredLicenseLevel(System.Int32)">
            <summary>
            Sets the license level required by the page element.
            </summary>
            <param name="level">Required license level.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElement.ID">
            <summary>
            Gets or sets the ID of the page element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElement.RequiredLicenseLevel">
            <summary>
            Gets the required license level of the page element.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.ICoordinate">
            <summary>
            Represents a contract requiring an X and Y coordinate.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Class</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/></term>
            <description>Represents an group of page elements with an area.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/></term>
            <description>Represents a bookmark.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/></term>
            <description>Represents a Codabar bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/></term>
            <description>Represents a Code 128 bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/></term>
            <description>Represents a Code 2 of 5 bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/></term>
            <description>Represents a Code 3 of 9 bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13"/></term>
            <description>Represents an EAN/JAN 13 bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/></term>
            <description>Represents an EAN/JAN 13, 2 digit supplement bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/></term>
            <description>Represents an EAN/JAN 13, 5 digit supplement bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8"/></term>
            <description>Represents an EAN/JAN 8 bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/></term>
            <description>Represents an EAN/JAN 8, 2 digit supplement bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/></term>
            <description>Represents an EAN/JAN 8, 5 digit supplement bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/></term>
            <description>Represents an area of HTML text.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Image"/></term>
            <description>Represents an image.</description>
            </item>
            <item>
            <term><a href="ceTeDynamicPDFMergerImportedPageArea.htm">ImportedPageArea</a></term>
            <description>Represents an imported pages area.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/></term>
            <description>Represents an interleaved 2 of 5 bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Label"/></term>
            <description>Represents a label.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Link"/></term>
            <description>Represents a link with a destination or action.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Note"/></term>
            <description>Represents a note annotation.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/></term>
            <description>Represents a page numbering label.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Path"/></term>
            <description>Represents a path with sub paths.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Postnet"/></term>
            <description>Represents a Postnet bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/></term>
            <description>Represents a rectangle.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Table"/></term>
            <description>Represents a table with rows, columns and cells.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/></term>
            <description>Represents an area of text.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.TransformationGroup"/></term>
            <description>Represents a group of page elements to transform.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA"/></term>
            <description>Represents a UPC Version A bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/></term>
            <description>Represents a UPC Version A, 2 digit supplement bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/></term>
            <description>Represents a UPC Version A, 5 digit supplement bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE"/></term>
            <description>Represents a UPC Version E bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/></term>
            <description>Represents a UPC Version E, 2 digit supplement bar code.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/></term>
            <description>Represents a UPC Version E, 5 digit supplement bar code.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ICoordinate.X">
            <summary>
            Gets or sets the X coordinate.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ICoordinate.Y">
            <summary>
            Gets or sets the Y coordinate.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RotatingPageElement.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.RotatingPageElement"/> class.
            </summary>
            <param name="x">The X coordinate of the rotating page element.</param>
            <param name="y">The Y coordinate of the rotating page element.</param>
            <param name="height">The height of the rotating page element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RotatingPageElement.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.RotatingPageElement"/> class.
            </summary>
            <param name="x">The X coordinate of the rotating page element.</param>
            <param name="y">The Y coordinate of the rotating page element.</param>
            <param name="height">The height of the rotating page element.</param>
            <param name="angle">The angle of the rotating page element.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RotatingPageElement.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the rotated page element to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RotatingPageElement.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the page element to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RotatingPageElement.Angle">
            <summary>
            Gets or sets the heights of the angle element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RotatingPageElement.X">
            <summary>
            Gets or sets the X coordinate of the page element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RotatingPageElement.Y">
            <summary>
            Gets or sets the Y coordinate of the page element.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RotatingPageElement.Height">
            <summary>
            Gets or sets the heights of the page element.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.BarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.GetRequiredWidth">
            <summary>
            Abstract. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Abstract. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the rotated page element to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.Value">
            <summary>
            Gets or sets the value of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimension">
            <summary>
            Gets or sets the XDimension of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimensionsPerInch">
            <summary>
            Gets or sets the XDimensionsPerInch of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimensionsPerCentiMeter">
            <summary>
            Gets or sets the XDimensionsPerCentiMeter of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimensionMils">
            <summary>
            Gets or sets the XDimensionMils of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.XDimensionMilliMeters">
            <summary>
            Gets or sets the XDimensionMilliMeters of the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.BarCode.Color">
            <summary>
            Gets or sets the Color of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.BarCodeException">
            <summary>
            The exception that is thrown for a bar coding error.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.BarCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.BarCodeException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Calculate">
            <summary>
            Specifies calculation type for bar codes.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Calculate.Yes">
            <summary>
            Always calculate.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Calculate.No">
            <summary>
            Never calculate.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.BarCoding.Calculate.Auto">
            <summary>
            Automatically detect when to calculate.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar">
            <summary>
            Represents a Codabar bar code.
            </summary>
            <remarks>This class can be used to place a Codabar bar code on a page.</remarks>
            <example>The following example will place a Codabar bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Codabar = New Codabar("A1234B", 50, 50, 48)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Codabar barCode = new Codabar("A1234B", 50, 0, 48);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode">
            <summary>
            Base class from which bar code page elements that display text are derived.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.ShowText">
            <summary>
            Gets or sets a value indicating if the value should be placed as text below the barcode.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.TextColor">
            <summary>
            Gets or set the color of the text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.Font">
            <summary>
            Gets or sets the font to use when displaying the text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.FontSize">
            <summary>
            Gets or sets the font size to use when displaying the text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.TextBarCode.TextAlign">
            <summary>
            Gets or sets the alignment of the text.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Codabar"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Codabar.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128">
            <summary>
            Represents a Code 128 bar code.
            </summary>
            <remarks>This class can be used to place a Code 128 bar code on a page.</remarks>
            <example>The following example will place a Code 128 bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Code128 = New Code128("Code 128 Bar Code.", _
            			50, 50, 48, 0.75F)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Code128 barCode = new Code128("Code 128 Bar Code.", 
            			50, 50, 48, 0.75F);		
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code128"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code128.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Code128.LookAhead">
            <summary>
            Gets or sets the number of characters to look ahead when determining the best mode.
            </summary>
            <remarks>This is used initially and when switching from Mode C.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Code128.ContinueToNextSymbol">
            <summary>
            Gets or sets if the barcode will be continued to another Code 128 barcode.
            </summary>
            <remarks>If <b>true</b> a FNC2 code will be the first (second if IsUCCEAN128 is <b>true</b>) character in the barcode.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Code128.IsUCCEAN128">
            <summary>
            Gets or sets if the barcode is a UCC / EAN Code 128 barcode.
            </summary>
            <remarks>If <b>true</b> a FNC1 code will be the first character in the barcode.</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25">
            <summary>
            Represents a Code 2 of 5 bar code.
            </summary>
            <remarks>This class can be used to place a Code 2 of 5 bar code on a page.</remarks>
            <example>The following example will place a Code 2 of 5 bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Code25 = New Code25("1234567890", 50, 50, 48)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Code25 barCode = new Code25("1234567890", 50, 100, 48);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code25.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39">
            <summary>
            Represents a Code 3 of 9 bar code.
            </summary>
            <remarks>This class can be used to place a Code 3 of 9 bar code on a page.</remarks>
            <example>The following example will place a Code 3 of 9 bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Code39 = New Code39("CODE 39", 50, 50, 48)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Code39 barCode = new Code39("CODE 39", 50, 150, 48);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Code39"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Code39.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13">
            <summary>
            Represents an EAN/JAN 13 bar code.
            </summary>
            <remarks>This class can be used to place an EAN/JAN 13 bar code on a page.</remarks>
            <example>The following example will place an EAN/JAN 13 bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Ean13 = New Ean13("123456789012", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Ean13 barCode = new Ean13("123456789012", 50, 300);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase">
            <summary>
            Base class from which UPC, EAN, and JAN bar code page elements are derived.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcBase.SetScale(System.Single)">
            <summary>
            Sets the scale of the bar code.
            </summary>
            <param name="scale">The scale to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2">
            <summary>
            Represents an EAN/JAN 13, 2 digit supplement bar code.
            </summary>
            <remarks>This class can be used to place an EAN/JAN 13, 2 digit supplement bar code on a page.</remarks>
            <example>The following example will place an EAN/JAN 13, 2 digit supplement bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Ean13Sup2 = New Ean13Sup2("12345678901212", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Ean13Sup2 barCode = new Ean13Sup2("12345678901212", 50, 400);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue">The supplemental value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup2.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5">
            <summary>
            Represents an EAN/JAN 13, 5 digit supplement bar code.
            </summary>
            <remarks>This class can be used to place an EAN/JAN 13, 5 digit supplement bar code on a page.</remarks>
            <example>The following example will place an EAN/JAN 13, 5 digit supplement bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Ean13Sup5 = New Ean13Sup5("12345678901212345", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Ean13Sup5 barCode = new Ean13Sup5("12345678901212345", 50, 500);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Ean13Sup5.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8">
            <summary>
            Represents an EAN/JAN 8 bar code.
            </summary>
            <remarks>This class can be used to place an EAN/JAN 8 bar code on a page.</remarks>
            <example>The following example will place an EAN/JAN 8 bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Ean8 = New Ean8("12345670", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Ean8 barCode = new Ean8("12345670", 50, 900);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2">
            <summary>
            Represents an EAN/JAN 8, 2 digit supplement bar code.
            </summary>
            <remarks>This class can be used to place an EAN/JAN 8, 2 digit supplement bar code on a page.</remarks>
            <example>The following example will place an EAN/JAN 8, 2 digit supplement bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Ean8Sup2 = New Ean8Sup2("1234567012", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Ean8Sup2 barCode = new Ean8Sup2("1234567012", 50, 1000);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup2.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5">
            <summary>
            Represents an EAN/JAN 8, 5 digit supplement bar code.
            </summary>
            <remarks>This class can be used to place an EAN/JAN 8, 5 digit supplement bar code on a page.</remarks>
            <example>The following example will place an EAN/JAN 8, 5 digit supplement bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Ean8Sup5 = New Ean8Sup5("1234567012345", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Ean8Sup5 barCode = new Ean8Sup5("1234567012345", 50, 1100);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Ean8Sup5.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25">
            <summary>
            Represents an interleaved 2 of 5 bar code.
            </summary>
            <remarks>This class can be used to place an interleaved 2 of 5 bar code on a page.</remarks>
            <example>The following example will place an interleaved 2 of 5 bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Interleaved25 = New Interleaved25("1234567890", 50, 50, 48)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Interleaved25 barCode = new Interleaved25("1234567890", 50, 200, 48);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="showText"><b>true</b> to display value of barcode as text. Otherwise, display barcode only.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="height">The height of the barcode.</param>
            <param name="xDimension">The XDimension of the barcode.</param>
            <param name="font">The font to use when displaying text.</param>
            <param name="fontSize">The font size to use when displaying text.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Interleaved25.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException">
            <summary>
            The exception that is thrown when an invalid bar code value exists.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.InvalidValueBarCodeException"/> class.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.Postnet">
            <summary>
            Represents a Postnet bar code.
            </summary>
            <remarks>This class can be used to place a Postnet bar code on a page.</remarks>
            <example>The following example will place a Postnet bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As Postnet = New Postnet("20815470412", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		Postnet barCode = new Postnet("20815470412", 50, 250);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Postnet.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.Postnet"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Postnet.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.Postnet.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.Postnet.AppendCheckDigit">
            <summary>
            Gets or sets a value specifying if the check digit should calculated.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA">
            <summary>
            Represents a UPC Version A bar code.
            </summary>
            <remarks>This class can be used to place a UPC Version A bar code on a page.</remarks>
            <example>The following example will place a UPC Version A bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As UpcVersionA = New UpcVersionA("12345678901", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		UpcVersionA barCode = new UpcVersionA("12345678901", 50, 600);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionA.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2">
            <summary>
            Represents a UPC Version A, 2 digit supplement bar code.
            </summary>
            <remarks>This class can be used to place a UPC Version A, 2 digit supplement bar code on a page.</remarks>
            <example>The following example will place a UPC Version A, 2 digit supplement bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As UpcVersionASup2 = New UpcVersionASup2("1234567890112", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		UpcVersionASup2 barCode = new UpcVersionASup2("1234567890112", 50, 700);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup2.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5">
            <summary>
            Represents a UPC Version A, 5 digit supplement bar code.
            </summary>
            <remarks>This class can be used to place a UPC Version A, 5 digit supplement bar code on a page.</remarks>
            <example>The following example will place a UPC Version A, 5 digit supplement bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As UpcVersionASup5 = New UpcVersionASup5("1234567890112345", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		UpcVersionASup5 barCode = new UpcVersionASup5("1234567890112345", 50, 800);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionASup5.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE">
            <summary>
            Represents a UPC Version E bar code.
            </summary>
            <remarks>This class can be used to place a UPC Version E bar code on a page.</remarks>
            <example>The following example will place a UPC Version E bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As UpcVersionE = New UpcVersionE("0123456", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		UpcVersionE barCode = new UpcVersionE("0123456", 50, 1200);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionE.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2">
            <summary>
            Represents a UPC Version E, 2 digit supplement bar code.
            </summary>
            <remarks>This class can be used to place a UPC Version E, 2 digit supplement bar code on a page.</remarks>
            <example>The following example will place a UPC Version E, 2 digit supplement bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As UpcVersionESup2 = New UpcVersionESup2("012345612", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		UpcVersionESup2 barCode = new UpcVersionESup2("012345612", 50, 1300);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup2.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5">
            <summary>
            Represents a UPC Version E, 5 digit supplement bar code.
            </summary>
            <remarks>This class can be used to place a UPC Version E, 5 digit supplement bar code on a page.</remarks>
            <example>The following example will place a UPC Version E, 5 digit supplement bar code on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements.BarCoding
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a bar code
            		Dim barCode As UpcVersionESup5 = New UpcVersionESup5("012345612345", 50, 50)
            
            		' Add the bar code to the page
            		MyPage.Elements.Add(barCode)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements.BarCoding;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a barcode
            		UpcVersionESup5 barCode = new UpcVersionESup5("012345612345", 50, 1400);
            
            		// Add the barcode to the page
            		page.Elements.Add( barCode );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/> class.
            </summary>
            <param name="value">The value (including supplemental value) of the barcode.</param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.#ctor(System.String,System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.#ctor(System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5"/> class.
            </summary>
            <param name="value">The value of the barcode.</param>
            <param name="supplementalValue"></param>
            <param name="x">The X coordinate of the barcode.</param>
            <param name="y">The Y coordinate of the barcode.</param>
            <param name="scale">The scale of the barcode.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.GetRequiredWidth">
            <summary>
            Overridden. Returns the width required to display the full bar code.
            </summary>
            <returns>A value representing the required width.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.DrawBarCode(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the barcode to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the page element's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BarCoding.UpcVersionESup5.SupplementalValue">
            <summary>
            Gets or sets the supplemental value of the barcode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.AreaGroup">
            <summary>
            Represents a group of page elements with an area.
            </summary>
            <remarks>This class can be used to collect many page elements together and add them to the page all at once. 
            Every page element that you add to the group will be added to the page when the group is added to the page.</remarks>
            <example>The following example will place a rectangle and several lines into a group object and then add that group to the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create an area group
            		Dim MyGroup As AreaGroup = New AreaGroup(200, 200)
            
            		' Add page elements to the group 
            		MyGroup.Add(New Rectangle(0, 0, 200, 200, 3))
            		MyGroup.Add(New Line(0, 100, 100, 0, 3))
            		MyGroup.Add(New Line(100, 0, 200, 100, 3))
            		MyGroup.Add(New Line(200, 100, 100, 200, 3))
            		MyGroup.Add(New Line(100, 200, 0, 100, 3))
            		
            		' Add the group to the page
            		MyPage.Elements.Add(MyGroup)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create an area group
            		AreaGroup group = new AreaGroup( 200, 200 );
            
            		// Add page elements to the group
            		group.Add( new Rectangle( 0, 0, 200, 200, 3 ) );
            		group.Add( new Line( 0, 100, 100, 0, 3 ) );
            		group.Add( new Line( 100, 0, 200, 100, 3 ) );
            		group.Add( new Line( 200, 100, 100, 200, 3 ) );
            		group.Add( new Line( 100, 200, 0, 100, 3 ) );
            	
            		// Add the group to the page
            		page.Elements.Add( group );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Group">
            <summary>
            Represents a group of page elements.
            </summary>
            <remarks>This class can be used to collect many page elements together and add them to the page all at once.  
            Every page element that you add to the group will be added to the page when the group is added to the page.</remarks>
            <example>The following example will place a rectangle and several lines into a group object and then add that group to the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a group
            		Dim MyGroup As Group = New Group
            
            		' Add page elements to the group 
            		MyGroup.Add(New Rectangle(0, 0, 200, 200, 3))
            		MyGroup.Add(New Line(0, 100, 100, 0, 3))
            		MyGroup.Add(New Line(100, 0, 200, 100, 3))
            		MyGroup.Add(New Line(200, 100, 100, 200, 3))
            		MyGroup.Add(New Line(100, 200, 0, 100, 3))
            
            		' Add the group to the page
            		MyPage.Elements.Add(MyGroup)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a group
            		Group group = new Group();
            
            		// Add page elements to the group
            		group.Add( new Rectangle( 0, 0, 200, 200, 3 ) );
            		group.Add( new Line( 0, 100, 100, 0, 3 ) );
            		group.Add( new Line( 100, 0, 200, 100, 3 ) );
            		group.Add( new Line( 200, 100, 100, 200, 3 ) );
            		group.Add( new Line( 100, 200, 0, 100, 3 ) );
            	
            		// Add the group to the page
            		page.Elements.Add( group );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.IPageElementContainer">
            <summary>
            Defines a container of page elements.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.IPageElementContainer.GetPageElementByID(System.String)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElement"/> with the given ID.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Group"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the group to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the group's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.Insert(System.Int32,ceTe.DynamicPDF.PageElement)">
            <summary>
            Inserts a page element to the group.
            </summary>
            <param name="index">The Zero-based index it which the page element should be inserted.</param>
            <param name="pageElement"><see cref="T:ceTe.DynamicPDF.PageElement"/> object to insert in the group.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.Add(ceTe.DynamicPDF.PageElement)">
            <summary>
            Adds a page element to the group.
            </summary>
            <param name="pageElement"><see cref="T:ceTe.DynamicPDF.PageElement"/> object to add to the group.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <b>Group</b>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <b>Group</b></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Group.GetPageElementByID(System.String)">
            <summary>
            Returns a page element with the given ID.
            </summary>
            <param name="id">ID of the page element to find.</param>
            <returns><b>PageElement</b> with the given ID.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Group.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElement"/> object with the given ID.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Group.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElement"/> object at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Group.Count">
            <summary>
            Gets the number of page elements in the group.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.IArea">
            <summary>
            Represents a contract defining an area.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Class</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/></term>
            <description>Represents an group of page elements with an area.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/></term>
            <description>Represents an area of HTML text.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Image"/></term>
            <description>Represents an image.</description>
            </item>
            <item>
            <term><a href="ceTeDynamicPDFMergerImportedPageArea.htm">ImportedPageArea</a></term>
            <description>Represents an imported pages area.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Label"/></term>
            <description>Represents a label.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Link"/></term>
            <description>Represents a link with a destination or action.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Note"/></term>
            <description>Represents a note annotation.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/></term>
            <description>Represents a page numbering label.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/></term>
            <description>Represents a rectangle.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Table"/></term>
            <description>Represents a table with rows, columns and cells.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/></term>
            <description>Represents an area of text.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.TransformationGroup"/></term>
            <description>Represents a group of page elements to transform.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IArea.Width">
            <summary>
            Gets or sets the width of the area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.IArea.Height">
            <summary>
            Gets or sets the height of the area.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.AreaGroup.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/> class.
            </summary>
            <param name="width">Width of the area group.</param>
            <param name="height">Height of the area group.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AreaGroup.X">
            <summary>
            Gets the X coordinate of the area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AreaGroup.Y">
            <summary>
            Gets the Y coordinate of the area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AreaGroup.Width">
            <summary>
            Gets or sets the width of the area group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.AreaGroup.Height">
            <summary>
            Gets or sets the height of the area group.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.BackgroundImage">
            <summary>
            Represents a background image.
            </summary>
            <remarks>This class can be used to place an image on the page that will be stretched to the dimensions of the page.
            If an image will be used more than once, please see the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETImagesImageReuse.htm">Image Reuse</a> topic.</remarks>
            <example>The following example will place an image on the page making it the background for that page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a background image
            		Dim MyBackgroundImage As BackgroundImage = New BackgroundImage("C:\MyImage.jpg")
            
            		' Place the image with in the page margins 
            		MyBackgroundImage.UseMargins = True
            
            		' Add the background image to the page
            		MyPage.Elements.Add(MyBackgroundImage)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a background image
            		BackgroundImage backgroundImage = new BackgroundImage( @"C:\MyImage.jpg" );
            
            		// Place the image with in the page margins
            		backgroundImage.UseMargins = true;
            	
            		// Add the background image to the page
            		page.Elements.Add( backgroundImage );	
            
            		//Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BackgroundImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BackgroundImage"/> class.
            </summary>
            <param name="filePath">The physical file path to the background image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BackgroundImage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BackgroundImage"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BackgroundImage.#ctor(ceTe.DynamicPDF.Imaging.ImageData)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.BackgroundImage"/> class.
            </summary>
            <param name="imageData"><see cref="P:ceTe.DynamicPDF.PageElements.BackgroundImage.ImageData"/> object containing the image data.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.BackgroundImage.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the background image to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the background image's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.ImageData">
            <summary>
            Get the background image's <see cref="P:ceTe.DynamicPDF.PageElements.BackgroundImage.ImageData"/> object.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.LeftPadding">
            <summary>
            Get or set the left padding of the background image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.RightPadding">
            <summary>
            Get or set the right padding of the background image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.TopPadding">
            <summary>
            Get or set the top padding of the background image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.BottomPadding">
            <summary>
            Get or set the bottom padding of the background image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.BackgroundImage.UseMargins">
            <summary>
            Get or set a value indicating if the pages margins should be used when calculating the placement of the background image.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Bookmark">
            <summary>
            Represents a bookmark.
            </summary>
            <remarks>This class can be used to place bookmarks on the PDF document.  These bookmarks will be displayed to the right of 
            the PDF document.  See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETOutlinesandBookmarks.htm">Outlines and Bookmarks</a> topic for more details on bookmarks.</remarks>
            <example>The following example will place three bookmarks on the PDF document.  Each bookmark has a different action.  
            The first bookmark links to a URL and when clicked on will open up that URL in the current window.  The second bookmark when 
            clicked will zoom the page to fit the width of that page.  The third bookmark when clicked will bring the specified X, Y 
            destination into focus.  If that destination location is already visible no action is taken.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		' Create three page objects
            		Dim MyPage1 As Page = New Page(PageSize.Letter)
            		Dim MyPage2 As Page = New Page(PageSize.Letter)
            		Dim MyPage3 As Page = New Page(PageSize.Letter)
            		
            		' Add a top level Outline
            		Dim MyParentOutline As Outline = MyDocument.Outlines.Add("Parent Outline")
            		
            		' Add a top level bookmark
            		MyPage1.Elements.Add(New Bookmark("Top level bookmark to page 1", 0, 0))
            		
            		' Add child bookmarks
            		MyPage1.Elements.Add(New Bookmark("Bookmark to page 1", 0, 0, MyParentOutline))
            		MyPage2.Elements.Add(New Bookmark("Bookmark to page 2", 0, 0, MyParentOutline))
            		MyPage3.Elements.Add(New Bookmark("Bookmark to page 3", 0, 0, MyParentOutline))
            		
            		' Add the three pages to the document
            		MyDocument.Pages.Add(MyPage1)
            		MyDocument.Pages.Add(MyPage2)
            		MyDocument.Pages.Add(MyPage3)
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Create three page objects
            		Page page1 = new Page( PageSize.Letter );
            		Page page2 = new Page( PageSize.Letter );
            		Page page3 = new Page( PageSize.Letter );
            		
            		// Add a top level Outline
            		Outline parentOutline = document.Outlines.Add( "Parent Outline" );
            		
            		// Add a top level bookmark
            		page1.Elements.Add( new Bookmark( "Top level bookmark to page 1", 0, 0 ) );
            		
            		// Add child bookmarks
            		page1.Elements.Add( new Bookmark( "Bookmark to page 1", 0, 0, parentOutline ) );
            		page2.Elements.Add( new Bookmark( "Bookmark to page 2", 0, 0, parentOutline ) );
            		page3.Elements.Add( new Bookmark( "Bookmark to page 3", 0, 0, parentOutline ) );
            		
            		// Add the three pages to the document
            		document.Pages.Add( page1 );
            		document.Pages.Add( page2 );
            		document.Pages.Add( page3 );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Bookmark.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/> class.
            </summary>
            <param name="text">Text of the bookmark.</param>
            <param name="x">X coordinate of the bookmark.</param>
            <param name="y">Y coordinate of the bookmark.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Bookmark.#ctor(System.String,System.Single,System.Single,ceTe.DynamicPDF.Outline)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/> class.
            </summary>
            <param name="text">Text of the bookmark.</param>
            <param name="x">X coordinate of the bookmark.</param>
            <param name="y">Y coordinate of the bookmark.</param>
            <param name="parentOutline"><see cref="T:ceTe.DynamicPDF.Outline"/> object that the bookmark will appear under.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Bookmark.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the bookmark to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the bookmark's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.Text">
            <summary>
            Gets or sets the text of the bookmark.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.X">
            <summary>
            Gets of sets the X coordinate of the bookmark.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.Y">
            <summary>
            Gets or sets the Y coordinate of the bookmark.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.Style">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextStyle"/> enumeration that represents the text style of the bookmark.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.ParentOutline">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Outline"/> object the bookmark will appear under.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Bookmark.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Bookmark.Color"/> object to use for the text of the bookmark.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Cell">
            <summary>
            Represents a cell in the Table
            </summary>
            <example>The following example will display a simple table on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a table 
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(90)
            		MyTable.Columns.Add(90)
            		MyTable.Columns.Add(90)
            
            		' Add rows to the table and add cells to the rows
            		Dim row1 As Row = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Color.Black, Color.Gray)
            		row1.Align = TextAlign.Center
            		row1.VAlign = VAlign.Center
            		row1.Cells.Add("Header 1")
            		row1.Cells.Add("Header 2")
            		row1.Cells.Add("Header 3")
            		row1.Cells.Add("Header 4")
            
            		Dim row2 As Row = MyTable.Rows.Add(30)
            		Dim cell1 As Cell = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell1.Align = TextAlign.Center
            		cell1.VAlign = VAlign.Center
            		row2.Cells.Add("Item 1")
            		row2.Cells.Add("Item 2")
            		row2.Cells.Add("Item 3")
            
            		Dim row3 As Row = MyTable.Rows.Add(30)
            		Dim cell2 As Cell = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell2.Align = TextAlign.Center
            		cell2.VAlign = VAlign.Center
            		row3.Cells.Add("Item 4")
            		row3.Cells.Add("Item 5")
            		row3.Cells.Add("Item 6")
            
            		Dim row4 As Row = MyTable.Rows.Add(30)
            		Dim cell3 As Cell = row4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell3.Align = TextAlign.Center
            		cell3.VAlign = VAlign.Center
            		row4.Cells.Add("Item 7")
            		row4.Cells.Add("Item 8")
            		row4.Cells.Add("Item 9")
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Create a table 
            		Table table = new Table(0, 0, 600, 600);
            		
            		//Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 90 );
            		table.Columns.Add( 90 );
            		table.Columns.Add( 90 );
            		
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            		    Color.Gray );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		row1.Cells.Add( "Header 4" );
            		
            		Row row2 = table.Rows.Add( 30 );
            		Cell cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            			Color.Black, Color.Gray, 1 );
            		cell1.Align = TextAlign.Center;
            		cell1.VAlign = VAlign.Center;
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
            		row2.Cells.Add( "Item 3" );
            				
            		Row row3 = table.Rows.Add( 30 );
            		Cell cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell2.Align = TextAlign.Center;
            		cell2.VAlign = VAlign.Center;
            		row3.Cells.Add( "Item 4" );
            		row3.Cells.Add( "Item 5" );
            		row3.Cells.Add( "Item 6" );
            				
            		Row row4 = table.Rows.Add( 30 );
            		Cell cell3 = row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell3.Align = TextAlign.Center;
            		cell3.VAlign = VAlign.Center;
            		row4.Cells.Add( "Item 7" );
            		row4.Cells.Add( "Item 8" );
            		row4.Cells.Add( "Item 9" );
            		
            		// Add the table to the page
            		page.Elements.Add( table );	
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            } 
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Text">
            <summary>
            Gets or sets the text to be displayed.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Element">
            <summary>
            Gets or sets the page element contained in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Row">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.Row"/> that the cell is contained in.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.ColumnIndex">
            <summary>
            Gets the index of the <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> in which the cell begins.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Width">
            <summary>
            Gets the width of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.Font"/> object to use for the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.FontSize">
            <summary>
            Gets or sets the font size to use for the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Leading">
            <summary>
            Gets or sets the leading for the text of the cell.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.AutoLeading">
            <summary>
            Gets or sets whether the leading of the cell should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indent for the paragraphs of the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration to use for the horizontal alignment of the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Cell.VAlign"/> enumeration to use for the vertical alignment of the text in the cell.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Underline">
            <summary>
            Gets or sets a value specifying whether the text in the cell will be underlined. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.RightToLeft">
            <summary>
            Gets or sets a value specifying whether the text in the cell will be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.ColumnSpan">
            <summary>
            Gets the number of columns that the cell spans.
            </summary>
            <remarks>This value can only be set in a constructor.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Cell.Height">
            <summary>
            Gets the height of the cell.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CellList">
            <summary>
            Represents a list of cells.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            
            		' Add rows to the table and add cells to the rows
            		Dim MyRow1 As Row = MyTable.Rows.Add(40, Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey)
            		MyRow1.Align = TextAlign.Center
            		MyRow1.VAlign = VAlign.Center
            		MyRow1.Cells.Add("Header 1")
            		MyRow1.Cells.Add("Header 2")
            		MyRow1.Cells.Add("Header 3")
            
            		Dim MyRow2 As Row = MyTable.Rows.Add(30)
            		MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 14, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow2.Cells.Add("Item 1")
            		MyRow2.Cells.Add("Item 2")
            
            		Dim MyRow3 As Row = MyTable.Rows.Add(30)
            		MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow3.Cells.Add("Item 3", 2)
            
            		Dim MyRow4 As Row = MyTable.Rows.Add(30)
            		MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow4.Cells.Add("Item 4", Font.CourierOblique, 14)
            		MyRow4.Cells.Add("Item 5")
            
            		Dim MyRow5 As Row = MyTable.Rows.Add(30)
            		MyRow5.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow5.Cells.Add("Item 6", Font.TimesBold, 16, 2)
            
            		Dim MyRow6 As Row = MyTable.Rows.Add(30)
            		MyRow6.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow6.Cells.Add("Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2)
            
            		Dim MyRow7 As Row = MyTable.Rows.Add(30)
            		MyRow7.Cells.Add("HtmlTextArea", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim htmlText As String = "&lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + _
            			"color='FF0000'&gt;color, &lt;/font&gt;&lt;b&gt;bold.&lt;/b&gt;"
            		MyRow7.Cells.Add(New HtmlTextArea(htmlText, 0, 0, 140, 30, _
            			FontFamily.Helvetica, 16, False))
            
            		Dim MyRow8 As Row = MyTable.Rows.Add(30)
            		MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
            		lineGroup.Add(New Line(25, 25, 125, 125, 5))
            		lineGroup.Add(New Line(25, 125, 125, 25, 5))
            		Dim MyCell As Cell = MyRow8.Cells.Add(lineGroup, 2)
            		MyCell.Align = TextAlign.Center
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            			 		
            		Table table = new Table(0, 0, 600, 600);
                    
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
                    
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
                    
            		Row row2 = table.Rows.Add( 30 );
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 14, Color.Black, 
            			Color.LightGrey, 1 );
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
                            
            		Row row3 = table.Rows.Add( 30 );
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row3.Cells.Add( "Item 3", 2 );
                            
            		Row row4 = table.Rows.Add( 30 );
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row4.Cells.Add( "Item 4", Font.CourierOblique, 14 );
            		row4.Cells.Add( "Item 5" );
                    
            		Row row5 = table.Rows.Add( 30 );
            		row5.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row5.Cells.Add( "Item 6", Font.TimesBold, 16, 2 );
            
            		Row row6 = table.Rows.Add( 30 );
            		row6.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row6.Cells.Add( "Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2 );
            
            		Row row7 = table.Rows.Add( 30 );
            		row7.Cells.Add( "HtmlTextArea", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		string htmlText = "&lt;font face='Times'&gt;font face, &lt;/font&gt;" + 
            			"&lt;font color='FF0000'&gt;color, &lt;/font&gt;&lt;b&gt;bold.&lt;/b&gt;";
            		row7.Cells.Add( new HtmlTextArea( htmlText, 0, 0, 140, 30, 
            		FontFamily.Helvetica, 16, false ) );
            
            		Row row8 = table.Rows.Add( 30 );
            		row8.Cells.Add( "Lines", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		AreaGroup lineGroup = new AreaGroup( 150, 150 );
            		lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            		lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            		Cell cell = row8.Cells.Add( lineGroup, 2 );
            		cell.Align = TextAlign.Center;
            
            		// Add the table to the page
            		page.Elements.Add( table );  
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="colSpan">Number of columns for the cell to span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            
            		' Add rows to the table and add cells to the rows
            		Dim MyRow1 As Row = MyTable.Rows.Add(40, Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey)
            		MyRow1.Align = TextAlign.Center
            		MyRow1.VAlign = VAlign.Center
            		MyRow1.Cells.Add("Header 1")
            		MyRow1.Cells.Add("Header 2")
            		MyRow1.Cells.Add("Header 3")
            
            		Dim MyRow2 As Row = MyTable.Rows.Add(30)
            		MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 14, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow2.Cells.Add("Item 1")
            		MyRow2.Cells.Add("Item 2")
            
            		Dim MyRow3 As Row = MyTable.Rows.Add(30)
            		MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow3.Cells.Add("Item 3", 2)
            
            		Dim MyRow4 As Row = MyTable.Rows.Add(30)
            		MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow4.Cells.Add("Item 4", Font.CourierOblique, 14)
            		MyRow4.Cells.Add("Item 5")
            
            		Dim MyRow5 As Row = MyTable.Rows.Add(30)
            		MyRow5.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow5.Cells.Add("Item 6", Font.TimesBold, 16, 2)
            
            		Dim MyRow6 As Row = MyTable.Rows.Add(30)
            		MyRow6.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow6.Cells.Add("Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2)
            
            		Dim MyRow7 As Row = MyTable.Rows.Add(30)
            		MyRow7.Cells.Add("HtmlTextArea", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim htmlText As String = "&lt;font face='Times'&gt;font face, &lt;/font&gt;" + _
            			"&lt;font color='FF0000'&gt;color, &lt;/font&gt;&lt;b&gt;bold.&lt;/b&gt;"
            		MyRow7.Cells.Add(New HtmlTextArea(htmlText, 0, 0, 140, 30, _
            			FontFamily.Helvetica, 16, False))
            
            		Dim MyRow8 As Row = MyTable.Rows.Add(30)
            		MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
            		lineGroup.Add(New Line(25, 25, 125, 125, 5))
            		lineGroup.Add(New Line(25, 125, 125, 25, 5))
            		Dim MyCell As Cell = MyRow8.Cells.Add(lineGroup, 2)
            		MyCell.Align = TextAlign.Center
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            			 		
            		Table table = new Table(0, 0, 600, 600);
                    
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
                    
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
                    
            		Row row2 = table.Rows.Add( 30 );
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 14, Color.Black, 
            			Color.LightGrey, 1 );
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
                            
            		Row row3 = table.Rows.Add( 30 );
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row3.Cells.Add( "Item 3", 2 );
                            
            		Row row4 = table.Rows.Add( 30 );
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row4.Cells.Add( "Item 4", Font.CourierOblique, 14 );
            		row4.Cells.Add( "Item 5" );
                    
            		Row row5 = table.Rows.Add( 30 );
            		row5.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row5.Cells.Add( "Item 6", Font.TimesBold, 16, 2 );
            
            		Row row6 = table.Rows.Add( 30 );
            		row6.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row6.Cells.Add( "Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2 );
            
            		Row row7 = table.Rows.Add( 30 );
            		row7.Cells.Add( "HtmlTextArea", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		string htmlText = "&lt;font face='Times'&gt;font face, &lt;/font&gt;" + 
            			"&lt;font color='FF0000'&gt;color, &lt;/font&gt;&lt;b&gt;bold.&lt;/b&gt;";
            		row7.Cells.Add( new HtmlTextArea( htmlText, 0, 0, 140, 30, 
            		FontFamily.Helvetica, 16, false ) );
            
            		Row row8 = table.Rows.Add( 30 );
            		row8.Cells.Add( "Lines", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		AreaGroup lineGroup = new AreaGroup( 150, 150 );
            		lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            		lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            		Cell cell = row8.Cells.Add( lineGroup, 2 );
            		cell.Align = TextAlign.Center;
            
            		// Add the table to the page
            		page.Elements.Add( table );  
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="font">Font for the text in the cell.</param>
            <param name="size">Font size for the text in the cell.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            
            		' Add rows to the table and add cells to the rows
            		Dim MyRow1 As Row = MyTable.Rows.Add(40, Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey)
            		MyRow1.Align = TextAlign.Center
            		MyRow1.VAlign = VAlign.Center
            		MyRow1.Cells.Add("Header 1")
            		MyRow1.Cells.Add("Header 2")
            		MyRow1.Cells.Add("Header 3")
            
            		Dim MyRow2 As Row = MyTable.Rows.Add(30)
            		MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 14, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow2.Cells.Add("Item 1")
            		MyRow2.Cells.Add("Item 2")
            
            		Dim MyRow3 As Row = MyTable.Rows.Add(30)
            		MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow3.Cells.Add("Item 3", 2)
            
            		Dim MyRow4 As Row = MyTable.Rows.Add(30)
            		MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow4.Cells.Add("Item 4", Font.CourierOblique, 14)
            		MyRow4.Cells.Add("Item 5")
            
            		Dim MyRow5 As Row = MyTable.Rows.Add(30)
            		MyRow5.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow5.Cells.Add("Item 6", Font.TimesBold, 16, 2)
            
            		Dim MyRow6 As Row = MyTable.Rows.Add(30)
            		MyRow6.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow6.Cells.Add("Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2)
            
            		Dim MyRow7 As Row = MyTable.Rows.Add(30)
            		MyRow7.Cells.Add("HtmlTextArea", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim htmlText As String = "<font face="Times">font face, </font>" + _
            			"<font color="FF0000">color, </font><b>bold.</b>"
            		MyRow7.Cells.Add(New HtmlTextArea(htmlText, 0, 0, 140, 30, _
            			FontFamily.Helvetica, 16, False))
            
            		Dim MyRow8 As Row = MyTable.Rows.Add(30)
            		MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
            		lineGroup.Add(New Line(25, 25, 125, 125, 5))
            		lineGroup.Add(New Line(25, 125, 125, 25, 5))
            		Dim MyCell As Cell = MyRow8.Cells.Add(lineGroup, 2)
            		MyCell.Align = TextAlign.Center
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            			 		
            		Table table = new Table(0, 0, 600, 600);
                    
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
                    
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
                    
            		Row row2 = table.Rows.Add( 30 );
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 14, Color.Black, 
            			Color.LightGrey, 1 );
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
                            
            		Row row3 = table.Rows.Add( 30 );
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row3.Cells.Add( "Item 3", 2 );
                            
            		Row row4 = table.Rows.Add( 30 );
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row4.Cells.Add( "Item 4", Font.CourierOblique, 14 );
            		row4.Cells.Add( "Item 5" );
                    
            		Row row5 = table.Rows.Add( 30 );
            		row5.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row5.Cells.Add( "Item 6", Font.TimesBold, 16, 2 );
            
            		Row row6 = table.Rows.Add( 30 );
            		row6.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row6.Cells.Add( "Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2 );
            
            		Row row7 = table.Rows.Add( 30 );
            		row7.Cells.Add( "HtmlTextArea", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		string htmlText = "&lt;font face='Times'&gt;font face, &lt;/font&gt;" + 
            			"&lt;font color='FF0000'&gt;color, &lt;/font&gt;&lt;b&gt;bold.&lt;/b&gt;";
            		row7.Cells.Add( new HtmlTextArea( htmlText, 0, 0, 140, 30, 
            		FontFamily.Helvetica, 16, false ) );
            
            		Row row8 = table.Rows.Add( 30 );
            		row8.Cells.Add( "Lines", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		AreaGroup lineGroup = new AreaGroup( 150, 150 );
            		lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            		lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            		Cell cell = row8.Cells.Add( lineGroup, 2 );
            		cell.Align = TextAlign.Center;
            
            		// Add the table to the page
            		page.Elements.Add( table );  
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,ceTe.DynamicPDF.Font,System.Single,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="font">Font for the text in the cell.</param>
            <param name="size">Font size for the text in the cell.</param>
            <param name="colSpan">Number of columns for the cell to span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            
            		' Add rows to the table and add cells to the rows
            		Dim MyRow1 As Row = MyTable.Rows.Add(40, Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey)
            		MyRow1.Align = TextAlign.Center
            		MyRow1.VAlign = VAlign.Center
            		MyRow1.Cells.Add("Header 1")
            		MyRow1.Cells.Add("Header 2")
            		MyRow1.Cells.Add("Header 3")
            
            		Dim MyRow2 As Row = MyTable.Rows.Add(30)
            		MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 14, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow2.Cells.Add("Item 1")
            		MyRow2.Cells.Add("Item 2")
            
            		Dim MyRow3 As Row = MyTable.Rows.Add(30)
            		MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow3.Cells.Add("Item 3", 2)
            
            		Dim MyRow4 As Row = MyTable.Rows.Add(30)
            		MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow4.Cells.Add("Item 4", Font.CourierOblique, 14)
            		MyRow4.Cells.Add("Item 5")
            
            		Dim MyRow5 As Row = MyTable.Rows.Add(30)
            		MyRow5.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow5.Cells.Add("Item 6", Font.TimesBold, 16, 2)
            
            		Dim MyRow6 As Row = MyTable.Rows.Add(30)
            		MyRow6.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow6.Cells.Add("Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2)
            
            		Dim MyRow7 As Row = MyTable.Rows.Add(30)
            		MyRow7.Cells.Add("HtmlTextArea", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim htmlText As String = "<font face="Times">font face, </font>" + _
            			"<font color="FF0000">color, </font><b>bold.</b>"
            		MyRow7.Cells.Add(New HtmlTextArea(htmlText, 0, 0, 140, 30, _
            			FontFamily.Helvetica, 16, False))
            
            		Dim MyRow8 As Row = MyTable.Rows.Add(30)
            		MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
            		lineGroup.Add(New Line(25, 25, 125, 125, 5))
            		lineGroup.Add(New Line(25, 125, 125, 25, 5))
            		Dim MyCell As Cell = MyRow8.Cells.Add(lineGroup, 2)
            		MyCell.Align = TextAlign.Center
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            			 		
            		Table table = new Table(0, 0, 600, 600);
                    
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
                    
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
                    
            		Row row2 = table.Rows.Add( 30 );
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 14, Color.Black, 
            			Color.LightGrey, 1 );
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
                            
            		Row row3 = table.Rows.Add( 30 );
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row3.Cells.Add( "Item 3", 2 );
                            
            		Row row4 = table.Rows.Add( 30 );
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row4.Cells.Add( "Item 4", Font.CourierOblique, 14 );
            		row4.Cells.Add( "Item 5" );
                    
            		Row row5 = table.Rows.Add( 30 );
            		row5.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row5.Cells.Add( "Item 6", Font.TimesBold, 16, 2 );
            
            		Row row6 = table.Rows.Add( 30 );
            		row6.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row6.Cells.Add( "Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2 );
            
            		Row row7 = table.Rows.Add( 30 );
            		row7.Cells.Add( "HtmlTextArea", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		string htmlText = "&lt;font face='Times'&gt;font face, &lt;/font&gt;" + 
            			"&lt;font color='FF0000'&gt;color, &lt;/font&gt;&lt;b&gt;bold.&lt;/b&gt;";
            		row7.Cells.Add( new HtmlTextArea( htmlText, 0, 0, 140, 30, 
            		FontFamily.Helvetica, 16, false ) );
            
            		Row row8 = table.Rows.Add( 30 );
            		row8.Cells.Add( "Lines", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		AreaGroup lineGroup = new AreaGroup( 150, 150 );
            		lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            		lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            		Cell cell = row8.Cells.Add( lineGroup, 2 );
            		cell.Align = TextAlign.Center;
            
            		// Add the table to the page
            		page.Elements.Add( table );  
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(System.String,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <param name="text">Text to be displayed in the cell.</param>
            <param name="font">Font for the text in the cell.</param>
            <param name="size">Font size for the text in the cell.</param>
            <param name="textColor">Color for the text in the cell.</param>
            <param name="backColor">Background color for the cell.</param>
            <param name="colSpan">Number of columns for the cell to span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any text to a cell in a table.</remarks>
            <example>The following example shows you how to build a simple table.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            
            		' Add rows to the table and add cells to the rows
            		Dim MyRow1 As Row = MyTable.Rows.Add(40, Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey)
            		MyRow1.Align = TextAlign.Center
            		MyRow1.VAlign = VAlign.Center
            		MyRow1.Cells.Add("Header 1")
            		MyRow1.Cells.Add("Header 2")
            		MyRow1.Cells.Add("Header 3")
            
            		Dim MyRow2 As Row = MyTable.Rows.Add(30)
            		MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 14, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow2.Cells.Add("Item 1")
            		MyRow2.Cells.Add("Item 2")
            
            		Dim MyRow3 As Row = MyTable.Rows.Add(30)
            		MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow3.Cells.Add("Item 3", 2)
            
            		Dim MyRow4 As Row = MyTable.Rows.Add(30)
            		MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow4.Cells.Add("Item 4", Font.CourierOblique, 14)
            		MyRow4.Cells.Add("Item 5")
            
            		Dim MyRow5 As Row = MyTable.Rows.Add(30)
            		MyRow5.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow5.Cells.Add("Item 6", Font.TimesBold, 16, 2)
            
            		Dim MyRow6 As Row = MyTable.Rows.Add(30)
            		MyRow6.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow6.Cells.Add("Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2)
            
            		Dim MyRow7 As Row = MyTable.Rows.Add(30)
            		MyRow7.Cells.Add("HtmlTextArea", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim htmlText As String = "<font face="Times">font face, </font>" + _
            			"<font color="FF0000">color, </font><b>bold.</b>"
            		MyRow7.Cells.Add(New HtmlTextArea(htmlText, 0, 0, 140, 30, _
            			FontFamily.Helvetica, 16, False))
            
            		Dim MyRow8 As Row = MyTable.Rows.Add(30)
            		MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
            		lineGroup.Add(New Line(25, 25, 125, 125, 5))
            		lineGroup.Add(New Line(25, 125, 125, 25, 5))
            		Dim MyCell As Cell = MyRow8.Cells.Add(lineGroup, 2)
            		MyCell.Align = TextAlign.Center
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            			 		
            		Table table = new Table(0, 0, 600, 600);
                    
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
                    
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
                    
            		Row row2 = table.Rows.Add( 30 );
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 14, Color.Black, 
            			Color.LightGrey, 1 );
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
                            
            		Row row3 = table.Rows.Add( 30 );
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row3.Cells.Add( "Item 3", 2 );
                            
            		Row row4 = table.Rows.Add( 30 );
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row4.Cells.Add( "Item 4", Font.CourierOblique, 14 );
            		row4.Cells.Add( "Item 5" );
                    
            		Row row5 = table.Rows.Add( 30 );
            		row5.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row5.Cells.Add( "Item 6", Font.TimesBold, 16, 2 );
            
            		Row row6 = table.Rows.Add( 30 );
            		row6.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row6.Cells.Add( "Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2 );
            
            		Row row7 = table.Rows.Add( 30 );
            		row7.Cells.Add( "HtmlTextArea", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		string htmlText = "&lt;font face='Times'&gt;font face, &lt;/font&gt;" + 
            			"&lt;font color='FF0000'&gt;color, &lt;/font&gt;&lt;b&gt;bold.&lt;/b&gt;";
            		row7.Cells.Add( new HtmlTextArea( htmlText, 0, 0, 140, 30, 
            		FontFamily.Helvetica, 16, false ) );
            
            		Row row8 = table.Rows.Add( 30 );
            		row8.Cells.Add( "Lines", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		AreaGroup lineGroup = new AreaGroup( 150, 150 );
            		lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            		lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            		Cell cell = row8.Cells.Add( lineGroup, 2 );
            		cell.Align = TextAlign.Center;
            
            		// Add the table to the page
            		page.Elements.Add( table );  
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(ceTe.DynamicPDF.PageElement)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/> with the specified page element.
            </summary>
            <param name="element">Page element to be displayed in the cell.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any page element to the table.  Note that a page element should only be added to the cell directly if that page element impliments <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/>.  If the page element does not impliment IArea then it is recommended you place your page element(s) in an <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/>.  This will assuree that the row will adjust to the height of the page element as needed.</remarks>
            <example>The following example shows you how to build a simple table where some cells contain page elements.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            
            		' Add rows to the table and add cells to the rows
            		Dim MyRow1 As Row = MyTable.Rows.Add(40, Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey)
            		MyRow1.Align = TextAlign.Center
            		MyRow1.VAlign = VAlign.Center
            		MyRow1.Cells.Add("Header 1")
            		MyRow1.Cells.Add("Header 2")
            		MyRow1.Cells.Add("Header 3")
            
            		Dim MyRow2 As Row = MyTable.Rows.Add(30)
            		MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 14, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow2.Cells.Add("Item 1")
            		MyRow2.Cells.Add("Item 2")
            
            		Dim MyRow3 As Row = MyTable.Rows.Add(30)
            		MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow3.Cells.Add("Item 3", 2)
            
            		Dim MyRow4 As Row = MyTable.Rows.Add(30)
            		MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow4.Cells.Add("Item 4", Font.CourierOblique, 14)
            		MyRow4.Cells.Add("Item 5")
            
            		Dim MyRow5 As Row = MyTable.Rows.Add(30)
            		MyRow5.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow5.Cells.Add("Item 6", Font.TimesBold, 16, 2)
            
            		Dim MyRow6 As Row = MyTable.Rows.Add(30)
            		MyRow6.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow6.Cells.Add("Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2)
            
            		Dim MyRow7 As Row = MyTable.Rows.Add(30)
            		MyRow7.Cells.Add("HtmlTextArea", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim htmlText As String = "<font face="Times">font face, </font>" + _
            			"<font color="FF0000">color, </font><b>bold.</b>"
            		MyRow7.Cells.Add(New HtmlTextArea(htmlText, 0, 0, 140, 30, _
            			FontFamily.Helvetica, 16, False))
            
            		Dim MyRow8 As Row = MyTable.Rows.Add(30)
            		MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
            		lineGroup.Add(New Line(25, 25, 125, 125, 5))
            		lineGroup.Add(New Line(25, 125, 125, 25, 5))
            		Dim MyCell As Cell = MyRow8.Cells.Add(lineGroup, 2)
            		MyCell.Align = TextAlign.Center
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            			 		
            		Table table = new Table(0, 0, 600, 600);
                    
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
                    
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
                    
            		Row row2 = table.Rows.Add( 30 );
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 14, Color.Black, 
            			Color.LightGrey, 1 );
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
                            
            		Row row3 = table.Rows.Add( 30 );
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row3.Cells.Add( "Item 3", 2 );
                            
            		Row row4 = table.Rows.Add( 30 );
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row4.Cells.Add( "Item 4", Font.CourierOblique, 14 );
            		row4.Cells.Add( "Item 5" );
                    
            		Row row5 = table.Rows.Add( 30 );
            		row5.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row5.Cells.Add( "Item 6", Font.TimesBold, 16, 2 );
            
            		Row row6 = table.Rows.Add( 30 );
            		row6.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row6.Cells.Add( "Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2 );
            
            		Row row7 = table.Rows.Add( 30 );
            		row7.Cells.Add( "HtmlTextArea", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		string htmlText = "&lt;font face='Times'&gt;font face, &lt;/font&gt;" + 
            			"&lt;font color='FF0000'&gt;color, &lt;/font&gt;&lt;b&gt;bold.&lt;/b&gt;";
            		row7.Cells.Add( new HtmlTextArea( htmlText, 0, 0, 140, 30, 
            		FontFamily.Helvetica, 16, false ) );
            
            		Row row8 = table.Rows.Add( 30 );
            		row8.Cells.Add( "Lines", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		AreaGroup lineGroup = new AreaGroup( 150, 150 );
            		lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            		lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            		Cell cell = row8.Cells.Add( lineGroup, 2 );
            		cell.Align = TextAlign.Center;
            
            		// Add the table to the page
            		page.Elements.Add( table );  
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.Add(ceTe.DynamicPDF.PageElement,System.Int32)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/> with the specified page element.
            </summary>
            <param name="element">Page element to be displayed in the cell.</param>
            <param name="colSpan">Number of columns for the cell will span.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> object.</returns>
            <remarks>This method is used to add any page element to the table.  Note that a page element should only be added to the cell directly if that page element impliments <see cref="T:ceTe.DynamicPDF.PageElements.IArea"/>.  If the page element does not impliment IArea then it is recommended you place your page element(s) in an <see cref="T:ceTe.DynamicPDF.PageElements.AreaGroup"/>.  This will assuree that the row will adjust to the height of the page element as needed.</remarks>
            <example>The following example shows you how to build a simple table where some cells contain page elements.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(150)
            
            		' Add rows to the table and add cells to the rows
            		Dim MyRow1 As Row = MyTable.Rows.Add(40, Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey)
            		MyRow1.Align = TextAlign.Center
            		MyRow1.VAlign = VAlign.Center
            		MyRow1.Cells.Add("Header 1")
            		MyRow1.Cells.Add("Header 2")
            		MyRow1.Cells.Add("Header 3")
            
            		Dim MyRow2 As Row = MyTable.Rows.Add(30)
            		MyRow2.Cells.Add("Rowheader 1", Font.HelveticaBold, 14, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow2.Cells.Add("Item 1")
            		MyRow2.Cells.Add("Item 2")
            
            		Dim MyRow3 As Row = MyTable.Rows.Add(30)
            		MyRow3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow3.Cells.Add("Item 3", 2)
            
            		Dim MyRow4 As Row = MyTable.Rows.Add(30)
            		MyRow4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow4.Cells.Add("Item 4", Font.CourierOblique, 14)
            		MyRow4.Cells.Add("Item 5")
            
            		Dim MyRow5 As Row = MyTable.Rows.Add(30)
            		MyRow5.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow5.Cells.Add("Item 6", Font.TimesBold, 16, 2)
            
            		Dim MyRow6 As Row = MyTable.Rows.Add(30)
            		MyRow6.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		MyRow6.Cells.Add("Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2)
            
            		Dim MyRow7 As Row = MyTable.Rows.Add(30)
            		MyRow7.Cells.Add("HtmlTextArea", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim htmlText As String = "<font face="Times">font face, </font>" + _
            			"<font color="FF0000">color, </font><b>bold.</b>"
            		MyRow7.Cells.Add(New HtmlTextArea(htmlText, 0, 0, 140, 30, _
            			FontFamily.Helvetica, 16, False))
            
            		Dim MyRow8 As Row = MyTable.Rows.Add(30)
            		MyRow8.Cells.Add("Lines", Font.HelveticaBold, 16, Color.Black, _
            			Color.LightGrey, 1)
            		Dim lineGroup As AreaGroup = New AreaGroup(150, 150)
            		lineGroup.Add(New Line(25, 25, 125, 125, 5))
            		lineGroup.Add(New Line(25, 125, 125, 25, 5))
            		Dim MyCell As Cell = MyRow8.Cells.Add(lineGroup, 2)
            		MyCell.Align = TextAlign.Center
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		Page page = new Page();
            		document.Pages.Add( page );
            			 		
            		Table table = new Table(0, 0, 600, 600);
                    
            		// Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
            		table.Columns.Add( 150 );
                    
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
                    
            		Row row2 = table.Rows.Add( 30 );
            		row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 14, Color.Black, 
            			Color.LightGrey, 1 );
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
                            
            		Row row3 = table.Rows.Add( 30 );
            		row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row3.Cells.Add( "Item 3", 2 );
                            
            		Row row4 = table.Rows.Add( 30 );
            		row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row4.Cells.Add( "Item 4", Font.CourierOblique, 14 );
            		row4.Cells.Add( "Item 5" );
                    
            		Row row5 = table.Rows.Add( 30 );
            		row5.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row5.Cells.Add( "Item 6", Font.TimesBold, 16, 2 );
            
            		Row row6 = table.Rows.Add( 30 );
            		row6.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		row6.Cells.Add( "Item 7", Font.Symbol, 18, Color.Blue, Color.Yellow, 2 );
            
            		Row row7 = table.Rows.Add( 30 );
            		row7.Cells.Add( "HtmlTextArea", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		string htmlText = "<font face="Times">font face, </font>" + 
            			"<font color="FF0000">color, </font><b>bold.</b>";
            		row7.Cells.Add( new HtmlTextArea( htmlText, 0, 0, 140, 30, 
            		FontFamily.Helvetica, 16, false ) );
            
            		Row row8 = table.Rows.Add( 30 );
            		row8.Cells.Add( "Lines", Font.HelveticaBold, 16, Color.Black, 
            			Color.LightGrey, 1 );
            		AreaGroup lineGroup = new AreaGroup( 150, 150 );
            		lineGroup.Add( new Line( 25, 25, 125, 125, 5 ) );
            		lineGroup.Add( new Line( 25, 125, 125, 25, 5 ) );
            		Cell cell = row8.Cells.Add( lineGroup, 2 );
            		cell.Align = TextAlign.Center;
            
            		// Add the table to the page
            		page.Elements.Add( table );  
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CellList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Cell"/> at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CellList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Circle">
            <summary>
            Represents a circle.
            </summary>
            <remarks>This class can be used to place circles on a page.</remarks>
            <example>The following example will place two circles on the page with different size, shape and colors.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create two circles
            		Dim circle1 As Circle = New Circle(100, 100, 50, 100, Color.Black, _
            			Color.OrangeRed, Apply.Both, 2, LineStyle.Solid)
            		Dim circle2 As Circle = New Circle(150, 75, 50, 50, Color.Black, _
            			Color.Lime, Apply.Both, 2, LineStyle.Solid)
            
            		' Add the circles to the page
            		MyPage.Elements.Add(circle1)
            		MyPage.Elements.Add(circle2)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create two circles
            		Circle circle1 = new Circle(100, 100, 50, 100, Color.Black, Color.OrangeRed, 
            			Apply.Both, 2, LineStyle.Solid);
            		Circle circle2 = new Circle(150, 75, 50, 50, Color.Black, Color.Lime, 
            			Apply.Both, 2, LineStyle.Solid);
            
            		// Add the circles to the page
            		page.Elements.Add( circle1 );	
            		page.Elements.Add( circle2 );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radiusX">Horizontal radius of the circle.</param>
            <param name="radiusY">Vertical radius of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
            <param name="borderStyle">Style of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
            <param name="apply">Specifies how color is applied to the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
            <param name="borderStyle">Style of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
            <param name="apply">Specifies how color is applied to the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
            <param name="apply">Specifies how color is applied to the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radius">Radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
            <param name="apply">Specifies how color is applied to the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
            <param name="borderStyle">Style of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Circle"/> class.
            </summary>
            <param name="x">X coordinate of the circle.</param>
            <param name="y">Y coordinate of the circle.</param>
            <param name="radiusX">Horizontal radius of the circle.</param>
            <param name="radiusY">Vertical radius of the circle.</param>
            <param name="borderColor">Color of the border of the circle.</param>
            <param name="fillColor">Fill color of the circle.</param>
            <param name="apply">Specifies how color is applied to the circle.</param>
            <param name="borderWidth">Width of the border of the circle.</param>
            <param name="borderStyle">Style of the border of the circle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Circle.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the circle to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the circle's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.BorderStyle">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> object that represents the border style of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.BorderWidth">
            <summary>
            Gets or sets the border width of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the border of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.FillColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the fill of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.X">
            <summary>
            Gets or sets the X coordinate of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.Y">
            <summary>
            Gets or sets the Y coordinate of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.RadiusX">
            <summary>
            Gets or sets the horizontal radius of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.RadiusY">
            <summary>
            Gets or sets the vertical radius of the circle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Circle.Apply">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Circle.Apply"/> enumeration that specifies how color is applied to the circle.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Column">
            <summary>
            Represents a column in a table.
            </summary>
            <example>The following example will display a simple table on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a table 
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(90)
            		MyTable.Columns.Add(90)
            		MyTable.Columns.Add(90)
            
            		' Add rows to the table and add cells to the rows
            		Dim row1 As Row = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Color.Black, Color.Gray)
            		row1.Align = TextAlign.Center
            		row1.VAlign = VAlign.Center
            		row1.Cells.Add("Header 1")
            		row1.Cells.Add("Header 2")
            		row1.Cells.Add("Header 3")
            		row1.Cells.Add("Header 4")
            
            		Dim row2 As Row = MyTable.Rows.Add(30)
            		Dim cell1 As Cell = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell1.Align = TextAlign.Center
            		cell1.VAlign = VAlign.Center
            		row2.Cells.Add("Item 1")
            		row2.Cells.Add("Item 2")
            		row2.Cells.Add("Item 3")
            
            		Dim row3 As Row = MyTable.Rows.Add(30)
            		Dim cell2 As Cell = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell2.Align = TextAlign.Center
            		cell2.VAlign = VAlign.Center
            		row3.Cells.Add("Item 4")
            		row3.Cells.Add("Item 5")
            		row3.Cells.Add("Item 6")
            
            		Dim row4 As Row = MyTable.Rows.Add(30)
            		Dim cell3 As Cell = row4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell3.Align = TextAlign.Center
            		cell3.VAlign = VAlign.Center
            		row4.Cells.Add("Item 7")
            		row4.Cells.Add("Item 8")
            		row4.Cells.Add("Item 9")
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Create a table 
            		Table table = new Table(0, 0, 600, 600);
            		
            		//Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 90 );
            		table.Columns.Add( 90 );
            		table.Columns.Add( 90 );
            		
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            		    Color.Gray );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		row1.Cells.Add( "Header 4" );
            		
            		Row row2 = table.Rows.Add( 30 );
            		Cell cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell1.Align = TextAlign.Center;
            		cell1.VAlign = VAlign.Center;
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
            		row2.Cells.Add( "Item 3" );
            				
            		Row row3 = table.Rows.Add( 30 );
            		Cell cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell2.Align = TextAlign.Center;
            		cell2.VAlign = VAlign.Center;
            		row3.Cells.Add( "Item 4" );
            		row3.Cells.Add( "Item 5" );
            		row3.Cells.Add( "Item 6" );
            				
            		Row row4 = table.Rows.Add( 30 );
            		Cell cell3 = row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell3.Align = TextAlign.Center;
            		cell3.VAlign = VAlign.Center;
            		row4.Cells.Add( "Item 7" );
            		row4.Cells.Add( "Item 8" );
            		row4.Cells.Add( "Item 9" );
            		
            		// Add the table to the page
            		page.Elements.Add( table );	
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            } 
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Column.Width">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.ColumnList">
            <summary>
            Represents a list of columns in a table.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.ColumnList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/>
            </summary>
            <param name="width">Width of the column to be added.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.ColumnList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ColumnList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.ColumnList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/>.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CurveFromSubPath">
            <summary>
            Represents a Bézier curve from the previous point.
            </summary>
            <remarks>This class, when added to a <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>, is used to create a Bézier curve 
            from the CurveToSubPath's specified location back to the last point in the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>.</remarks>
            <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a path
            		Dim MyPath As Path = New Path(50, 150, Color.Blue, Color.Yellow, _
            			Apply.Both, 3, LineStyle.Solid, True)
            
            		' Add some sub paths to the path 
            		MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
            		MyPath.SubPaths.Add(New LineSubPath(300, 400))
            		MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
            		MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
            
            		' Add the path to the page
            		MyPage.Elements.Add(path)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a path
            		Path path = new Path( 50, 150, Color.Blue, Color.Yellow, Apply.Both, 
            			3, LineStyle.Solid, true );
            
            		// Add some sub paths to the path
            		path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
            		path.SubPaths.Add( new LineSubPath( 300, 400 ) );
            		path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
            		path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
            
            		// Add the path to the page
            		page.Elements.Add( path );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.SubPath">
            <summary>
            Base class from which all sub paths are defined.
            </summary>
            <remarks>This class is the base class for all sub paths.  SubPath's derived classes are: <see cref="T:ceTe.DynamicPDF.PageElements.CurveFromSubPath"/>, <see cref="T:ceTe.DynamicPDF.PageElements.CurveToSubPath"/>, <see cref="T:ceTe.DynamicPDF.PageElements.CurveSubPath"/> and <see cref="T:ceTe.DynamicPDF.PageElements.LineSubPath"/></remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Abstract. Draws the sub path to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> to receive the sub path's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveFromSubPath.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.CurveFromSubPath"/> class.
            </summary>
            <param name="x">X coordinate of the destination.</param>
            <param name="y">Y coordinate of the destination.</param>
            <param name="sourceControlPointX">X coordinate of the sources control point.</param>
            <param name="sourceControlPointY">Y coordinate of the sources control point.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveFromSubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the sub path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveFromSubPath.X">
            <summary>
            Gets or sets the X coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveFromSubPath.Y">
            <summary>
            Gets or sets the Y coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveFromSubPath.SourceControlPointX">
            <summary>
            Gets or sets the X coordinate of the sources control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveFromSubPath.SourceControlPointY">
            <summary>
            Gets or sets the Y coordinate of the sources control point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CurveSubPath">
            <summary>
            Represents a Bézier curve subpath.
            </summary>
            <remarks>This class, when added to a <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>, is used to create a Bézier curve 
            to the CurveSubPath's specified location using the source and destination control points.</remarks>
            <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a path
            		Dim MyPath As Path = New Path(50, 150, Color.Blue, Color.Yellow, _
            			Apply.Both, 3, LineStyle.Solid, True)
            
            		' Add some sub paths to the path 
            		MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
            		MyPath.SubPaths.Add(New LineSubPath(300, 400))
            		MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
            		MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
            
            		' Add the path to the page
            		MyPage.Elements.Add(path)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a path
            		Path path = new Path( 50, 150, Color.Blue, Color.Yellow, Apply.Both, 
            			3, LineStyle.Solid, true );
            
            		// Add some sub paths to the path
            		path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
            		path.SubPaths.Add( new LineSubPath( 300, 400 ) );
            		path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
            		path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
            
            		// Add the path to the page
            		page.Elements.Add( path );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveSubPath.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.CurveSubPath"/> class.
            </summary>
            <param name="x">X coordinate of the destination.</param>
            <param name="y">Y coordinate of the destination.</param>
            <param name="sourceControlPointX">X coordinate of the sources control point.</param>
            <param name="sourceControlPointY">Y coordinate of the sources control point.</param>
            <param name="destinationControlPointX">X coordinate of the destinations control point.</param>
            <param name="destinationControlPointY">Y coordinate of the destinations control point.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveSubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the sub path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.X">
            <summary>
            Gets or sets the X coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.Y">
            <summary>
            Gets or sets the Y coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.SourceControlPointX">
            <summary>
            Gets or sets the X coordinate of the sources control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.SourceControlPointY">
            <summary>
            Gets or sets the Y coordinate of the sources control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.DestinationControlPointX">
            <summary>
            Gets or sets the X coordinate of the destinations control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveSubPath.DestinationControlPointY">
            <summary>
            Gets or sets the Y coordinate of the destinations control point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.CurveToSubPath">
            <summary>
            Represents a Bézier curve to the next subpath.
            </summary>
            <remarks>This class, when added to a <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>, is used to create a Bézier curve 
            to the CurveToSubPath's specified location.</remarks>
            <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a path
            		Dim MyPath As Path = New Path(50, 150, Color.Blue, Color.Yellow, _
            			Apply.Both, 3, LineStyle.Solid, True)
            
            		' Add some sub paths to the path 
            		MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
            		MyPath.SubPaths.Add(New LineSubPath(300, 400))
            		MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
            		MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
            
            		' Add the path to the page
            		MyPage.Elements.Add(path)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a path
            		Path path = new Path( 50, 150, Color.Blue, Color.Yellow, Apply.Both, 
            			3, LineStyle.Solid, true );
            
            		// Add some sub paths to the path
            		path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
            		path.SubPaths.Add( new LineSubPath( 300, 400 ) );
            		path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
            		path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
            
            		// Add the path to the page
            		page.Elements.Add( path );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveToSubPath.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.CurveSubPath"/> class.
            </summary>
            <param name="x">X coordinate of the destination.</param>
            <param name="y">Y coordinate of the destination.</param>
            <param name="destinationControlPointX">X coordinate of the destinations control point.</param>
            <param name="destinationControlPointY">Y coordinate of the destinations control point.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.CurveToSubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the sub path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveToSubPath.X">
            <summary>
            Gets or sets the X coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveToSubPath.Y">
            <summary>
            Gets or sets the Y coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveToSubPath.DestinationControlPointX">
            <summary>
            Gets or sets the X coordinate of the destinations control point.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.CurveToSubPath.DestinationControlPointY">
            <summary>
            Gets or sets the Y coordinate of the destinations control point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.HtmlTextArea">
            <summary>
            Represents an area of HTML text.
            </summary>
            <remarks>This class can be used to place HTML formatted text onto an area of the page.  
            For a complete list of supported font tags take a look at the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETHTMLTextAreaFormatting.htm">HTML TextArea Formatting</a> topic.</remarks>
            <example>The following example shows a paragraph of HTML formatted text being displayed on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create an HTML style
            		Dim style As HtmlTextAreaStyle = New HtmlTextAreaStyle(FontFamily.Helvetica, 12, False)
            
            		' Create the text and the HTML text area
            		Dim htmlText As String = "&lt;p&gt;HTML text area provide rich formatting support for " + _
            			"text that appears in the document. You have complete control over 8 paragraph " + _
            			"properties: spacing before, spacing after, first line indentation, left indentation," + _
            			" right indentation, alignment, allowing orphan lines, and white space preservation; " + _
            			"6 font properties: &lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + _
            			"pointSize='6'&gt;font size, &lt;/font&gt;&lt;font color='FF0000'&gt;color, " + _
            			"&lt;/font&gt;&lt;b&gt;bold, &lt;/b&gt;&lt;i&lt;italic and &lt;/i&gt;&lt;u&gt;" + _
            			"underline&lt;/u&gt;; and 2 line properties: leading, and leading type. Text can " + _
            			"also be rotated.&lt;/p&gt;"
            
            		Dim MyHtmlTextArea As HtmlTextArea = New HtmlTextArea(htmlText, 0, 0, 256, 400, style)
            
            		' Add the HTML text area to the page
            		MyPage.Elements.Add(MyHtmlTextArea)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create an HTML style
            		HtmlTextAreaStyle style = new HtmlTextAreaStyle( FontFamily.Helvetica, 12, false );
            
            		// Create the text and the HTML text area
            		string htmlText = "&lt;p&gt;HTML text area provide rich formatting support for text that " + 
            			"appears in the document. You have complete control over 8 paragraph properties: " + 
            			"spacing before, spacing after, first line indentation, left indentation, right " + 
            			"indentation, alignment, allowing orphan lines, and white space preservation; 6 " + 
            			"font properties: &lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + 
            			"pointSize='6'&gt;font size, &lt;/font&gt;&lt;font color='FF0000'&gt;color, " + 
            			"&lt;/font&gt;&lt;b&gt;bold, &lt;/b&gt;&lt;i&gt;italic and &lt;/i&gt;&lt;u&gt;" + 
            			"underline&lt;/u&gt;; and 2 line properties: leading, and leading type. Text can " + 
            			"also be rotated.&lt;/p&gt;"; 
            
            		HtmlTextArea htmlTextArea = new HtmlTextArea( htmlText, 0, 0, 256, 400, style );
            
            		// Add the HTML text area to the page
            		page.Elements.Add( htmlTextArea );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.FontFamily,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> class.
            </summary>
            <param name="text">Text to display in the HTML text area.</param>
            <param name="x">X coordinate of the HTML text area.</param>
            <param name="y">Y coordinate of the HTML text area.</param>
            <param name="width">Width of the HTML text area.</param>
            <param name="height">Height of the HTML text area.</param>
            <param name="fontFamily">Initial <see cref="T:ceTe.DynamicPDF.FontFamily"/> of the HTML text area.</param>
            <param name="fontSize">Initial font size of the HTML text area.</param>
            <param name="preserveWhitespace">Specifies if white space should be preserved.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> class.
            </summary>
            <param name="text">Text to display in the HTML text area.</param>
            <param name="x">X coordinate of the HTML text area.</param>
            <param name="y">Y coordinate of the HTML text area.</param>
            <param name="width">Width of the HTML text area.</param>
            <param name="height">Height of the HTML text area.</param>
            <param name="style">Initial <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle"/> of the HTML text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextArea.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the text area to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the HTML text area's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextArea.GetOverflowHtmlTextArea">
            <summary>
            Returns a new <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> object containing the overflow text.
            </summary>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> if there is overflow text; otherwise, <b>null</b>.</returns>
            <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
            <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a string and assign it to text of variable length
            		Dim myVariableText As String = ""
            		Dim i As Integer
            		For i = 0 To 50
            			MyVariableText &amp;= "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that " + _
            			"I will use as my &lt;b&gt;variable length&lt;/b&gt; text.  "
            		Next
            		
            		' Create an HTML text area
            		Dim MyHtmlTextArea As HtmlTextArea = New HtmlTextArea(MyVariableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, False)
            		Do
            			' Create a new page
            			Dim MyPage As Page = New Page
            
            			' Add the text area to the page;
            			MyPage.Elements.Add(MyHtmlTextArea)
            
            			' Add the page to the document
            			MyDocument.Pages.Add(MyPage)
            
            			' Set the text area object equal to the rest of the text that did not fit
            			' if all the text fit this will set textArea to null
            			MyHtmlTextArea = MyHtmlTextArea.GetOverflowHTMLTextArea()
            		Loop While Not MyHtmlTextArea Is Nothing
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a string and assign it to text of variable length
            		string variableText = "";
            		for( int i = 0; i &lt; 50; i++ )
            			variableText += "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that I " +
            			"will use as my &lt;b&gt;variable length&lt;/b&gt; text. ";
            
            		// Create an HTML text area
            		HtmlTextArea htmlTextArea = new HtmlTextArea( variableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, false ); 
            	
            		do
            		{
            			// Create a new page
            			Page page = new Page();
             
            			// Add the text area to the page;
            			page.Elements.Add( htmlTextArea );
            
            			// Add the page to the document
            			document.Pages.Add( page );
            
            			// Set the HTML text area object equal to the rest of the text that did not fit
            			// if all the text did fit, GetOverflowHtmlTextArea will return null
            			htmlTextArea = htmlTextArea.GetOverflowHtmlTextArea(); 
            		} while( htmlTextArea != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextArea.GetOverflowHtmlTextArea(System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> object containing the overflow text.
            </summary>
            <param name="x">X coordinate of the new object.</param>
            <param name="y">Y coordinate of the new object.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> if there is overflow text; otherwise, <b>null</b>.</returns>
            <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
            <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a string and assign it to text of variable length
            		Dim myVariableText As String = ""
            		Dim i As Integer
            		For i = 0 To 50
            			MyVariableText &amp;= "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that " + _
            			"I will use as my &lt;b&gt;variable length&lt;/b&gt; text.  "
            		Next
            		
            		' Create an HTML text area
            		Dim MyHtmlTextArea As HtmlTextArea = New HtmlTextArea(MyVariableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, False)
            		Do
            			' Create a new page
            			Dim MyPage As Page = New Page
            
            			' Add the text area to the page;
            			MyPage.Elements.Add(MyHtmlTextArea)
            
            			' Add the page to the document
            			MyDocument.Pages.Add(MyPage)
            
            			' Set the text area object equal to the rest of the text that did not fit
            			' if all the text fit this will set textArea to null
            			MyHtmlTextArea = MyHtmlTextArea.GetOverflowHTMLTextArea(50, 50)
            		Loop While Not MyHtmlTextArea Is Nothing
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a string and assign it to text of variable length
            		string variableText = "";
            		for( int i = 0; i &lt; 50; i++ )
            			variableText += "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that I " +
            			"will use as my &lt;b&gt;variable length&lt;/b&gt; text. ";
            
            		// Create an HTML text area
            		HtmlTextArea htmlTextArea = new HtmlTextArea( variableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, false ); 
            	
            		do
            		{
            			// Create a new page
            			Page page = new Page();
             
            			// Add the text area to the page;
            			page.Elements.Add( htmlTextArea );
            
            			// Add the page to the document
            			document.Pages.Add( page );
            
            			// Set the HTML text area object equal to the rest of the text that did not fit
            			// if all the text did fit, GetOverflowHtmlTextArea will return null
            			htmlTextArea = htmlTextArea.GetOverflowHtmlTextArea( 50, 50 ); 
            		} while( htmlTextArea != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextArea.GetOverflowHtmlTextArea(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> object containing the overflow text.
            </summary>
            <param name="x">X coordinate of the new object.</param>
            <param name="y">Y coordinate of the new object.</param>
            <param name="height">Height of the new object.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> if there is overflow text; otherwise, <b>null</b>.</returns>
            <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
            <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a string and assign it to text of variable length
            		Dim myVariableText As String = ""
            		Dim i As Integer
            		For i = 0 To 50
            			MyVariableText &amp;= "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that " + _
            			"I will use as my &lt;b&gt;variable length&lt;/b&gt; text.  "
            		Next
            		
            		' Create an HTML text area
            		Dim MyHtmlTextArea As HtmlTextArea = New HtmlTextArea(MyVariableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, False)
            		Do
            			' Create a new page
            			Dim MyPage As Page = New Page
            
            			' Add the text area to the page;
            			MyPage.Elements.Add(MyHtmlTextArea)
            
            			' Add the page to the document
            			MyDocument.Pages.Add(MyPage)
            
            			' Set the text area object equal to the rest of the text that did not fit
            			' if all the text fit this will set textArea to null
            			MyHtmlTextArea = MyHtmlTextArea.GetOverflowHTMLTextArea(50, 50, 100)
            		Loop While Not MyHtmlTextArea Is Nothing
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a string and assign it to text of variable length
            		string variableText = "";
            		for( int i = 0; i &lt; 50; i++ )
            			variableText += "&lt;i&gt;This&lt;/i&gt; is a &lt;font color='FF0000'&gt;sentence&lt;/font&gt; that I " +
            			"will use as my &lt;b&gt;variable length&lt;/b&gt; text. ";
            
            		// Create an HTML text area
            		HtmlTextArea htmlTextArea = new HtmlTextArea( variableText, 0, 0, 250, 200, FontFamily.Helvetica, 12, false ); 
            	
            		do
            		{
            			// Create a new page
            			Page page = new Page();
             
            			// Add the text area to the page;
            			page.Elements.Add( htmlTextArea );
            
            			// Add the page to the document
            			document.Pages.Add( page );
            
            			// Set the HTML text area object equal to the rest of the text that did not fit
            			// if all the text did fit, GetOverflowHtmlTextArea will return null
            			htmlTextArea = htmlTextArea.GetOverflowHtmlTextArea( 50, 50, 100 ); 
            		} while( htmlTextArea != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextArea.GetRequiredHeight">
            <summary>
            Returns the required height to fit all of the text of the <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/>.
            </summary>
            <returns>Height required to fit all text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextArea.HasOverflowText">
            <summary>
            Returns a value specifying if there is text that did not fit in the <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/>.
            </summary>
            <returns><b>True</b> if the <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/> has overflow text.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.HtmlTextArea.FontFaces">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.Text.FontFamilyList"/> used by the HTML text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.HtmlTextArea.VAlign">
            <summary>
            Gets or sets a value indicating the vertical alignment of the HTML text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.HtmlTextArea.Width">
            <summary>
            Gets or sets the width of the HTML text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.HtmlTextArea.Height">
            <summary>
            Gets or sets the height of the HTML text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.HtmlTextArea.Text">
            <summary>
            Gets or sets the text for the HTML text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.HtmlTextArea.Style">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle"/> object used to specify the initial style of the HTML text area.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle">
            <summary>
            Represents an HTML text area style.
            </summary>
            <remarks>This class can be used to define a certain style of text to be used with an <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextArea"/>.</remarks>
            <example>The following example shows a paragraph of HTML formatted text being displayed on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create an HTML style
            		Dim style As HtmlTextAreaStyle = New HtmlTextAreaStyle(FontFamily.Helvetica, 12, False)
            
            		' Create the text and the HTML text area
            		Dim htmlText As String = "&lt;p&gt;HTML text area provide rich formatting support for " + _
            			"text that appears in the document. You have complete control over 8 paragraph " + _
            			"properties: spacing before, spacing after, first line indentation, left indentation," + _
            			" right indentation, alignment, allowing orphan lines, and white space preservation; " + _
            			"6 font properties: &lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + _
            			"pointSize='6'&gt;font size, &lt;/font&gt;&lt;font color='FF0000'&gt;color, " + _
            			"&lt;/font&gt;&lt;b&gt;bold, &lt;/b&gt;&lt;i&lt;italic and &lt;/i&gt;&lt;u&gt;" + _
            			"underline&lt;/u&gt;; and 2 line properties: leading, and leading type. Text can " + _
            			"also be rotated.&lt;/p&gt;"
            
            		Dim MyHtmlTextArea As HtmlTextArea = New HtmlTextArea(htmlText, 0, 0, 256, 400, style)
            
            		' Add the HTML text area to the page
            		MyPage.Elements.Add(MyHtmlTextArea)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create an HTML style
            		HtmlTextAreaStyle style = new HtmlTextAreaStyle( FontFamily.Helvetica, 12, false );
            
            		// Create the text and the HTML text area
            		string htmlText = "&lt;p&gt;HTML text area provide rich formatting support for text that " + 
            			"appears in the document. You have complete control over 8 paragraph properties: " + 
            			"spacing before, spacing after, first line indentation, left indentation, right " + 
            			"indentation, alignment, allowing orphan lines, and white space preservation; 6 " + 
            			"font properties: &lt;font face='Times'&gt;font face, &lt;/font&gt;&lt;font " + 
            			"pointSize='6'&gt;font size, &lt;/font&gt;&lt;font color='FF0000'&gt;color, " + 
            			"&lt;/font&gt;&lt;b&gt;bold, &lt;/b&gt;&lt;i&gt;italic and &lt;/i&gt;&lt;u&gt;" + 
            			"underline&lt;/u&gt;; and 2 line properties: leading, and leading type. Text can " + 
            			"also be rotated.&lt;/p&gt;"; 
            
            		HtmlTextArea htmlTextArea = new HtmlTextArea( htmlText, 0, 0, 256, 400, style );
            
            		// Add the HTML text area to the page
            		page.Elements.Add( htmlTextArea );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Bold">
            <summary>
            Represents bold text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Italic">
            <summary>
            Represents italic text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Underline">
            <summary>
            Represents underlined text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Paragraph">
            <summary>
            Represents the paragraph style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Font">
            <summary>
            Represents the font style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Line">
            <summary>
            Represents the line style.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.#ctor(ceTe.DynamicPDF.FontFamily,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle"/> structure.
            </summary>
            <param name="fontFamily">Font family of the style.</param>
            <param name="fontSize">Font size of the style.</param>
            <param name="preserveWhiteSpace">Preserve whitespace property of the style.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Equals(System.Object)">
            <summary>
            Overridden. Tests equality of styles.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle"/>.</param>
            <returns><b>true</b> if the two styles are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.GetHashCode">
            <summary>
            Overridden. Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.GetFont">
            <summary>
            Returns the <see cref="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Font"/> to use from the <see cref="T:ceTe.DynamicPDF.FontFamily"/> of the style.
            </summary>
            <returns>The <see cref="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.Font"/> of the style</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle">
            <summary>
            Represents the style of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.SpacingBefore">
            <summary>
            Represents the spacing before a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.SpacingAfter">
            <summary>
            Represents the spacing after a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.Indent">
            <summary>
            Represents the indention of the first line of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.LeftIndent">
            <summary>
            Represents the left indentation of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.RightIndent">
            <summary>
            Represents the right indentation of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.Align">
            <summary>
            Represents the alignment of a paragraph.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.AllowOrphanLines">
            <summary>
            Represents if paragraphs should be allowed to break leaving one line on a page.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.PreserveWhiteSpace">
            <summary>
            Represents if a white space should be preserved.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.Equals(System.Object)">
            <summary>
            Overridden. Tests equality of paragraph styles.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle"/>.</param>
            <returns><b>true</b> if the two paragraph styles are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle.GetHashCode">
            <summary>
            Overridden. Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.ParagraphStyle"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.LineStyle">
            <summary>
            Represents the style of a line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.LineStyle.Leading">
            <summary>
            Represents the leading of the line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.LineStyle.LeadingType">
            <summary>
            Represents the leading type of the line.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.LineStyle.Equals(System.Object)">
            <summary>
            Overridden. Tests equality of line styles.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.LineStyle"/>.</param>
            <returns><b>true</b> if the two line styles are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.LineStyle.GetHashCode">
            <summary>
            Overridden. Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.LineStyle"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.FontStyle">
            <summary>
            Represents the style of a font.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.FontStyle.Face">
            <summary>
            Represents the font face.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.FontStyle.Size">
            <summary>
            Represents the font size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.FontStyle.Color">
            <summary>
            Represents the font color.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.FontStyle.Equals(System.Object)">
            <summary>
            Overridden. Tests equality of font styles.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.FontStyle"/>.</param>
            <returns><b>true</b> if the two font styles are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.FontStyle.GetHashCode">
            <summary>
            Overridden. Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.PageElements.HtmlTextAreaStyle.FontStyle"/> object.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.IAnnotation">
            <summary>
            Defines an annotation.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Class</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Link"/></term>
            <description>Represents a link with a destination or action.</description>
            </item>
            <item>
            <term><see cref="T:ceTe.DynamicPDF.PageElements.Note"/></term>
            <description>Represents a note annotation.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.IAnnotation.DrawAnnotation(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the annotation to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the annotation's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Image">
            <summary>
            Represents an image.
            </summary>
            <remarks>This class can be used to place images on a page.  If an image will be used more than once, 
            please see the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETImagesImageReuse.htm">Image Reuse</a> topic.</remarks>
            <example>The following example will place an image on the page and then set the Y scale to twice as much as the X scale.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create an image
            		Dim MyImage As Image = New Image("C:\MyImage.jpg", 0, 0)
            
            		' Add the image to the page
            		MyPage.Elements.Add(MyImage)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create an image
            		Image image = new Image( @"C:\MyImage.jpg", 0, 0 );
            	
            		// Add the image to the page
            		page.Elements.Add( image );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(ceTe.DynamicPDF.Imaging.ImageData,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="imageData"><see cref="P:ceTe.DynamicPDF.PageElements.Image.ImageData"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.Drawing.Bitmap,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="filePath">Physical file path of the image.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
            <param name="scale">The scale to use when rendering the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(ceTe.DynamicPDF.Imaging.ImageData,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="imageData"><see cref="P:ceTe.DynamicPDF.PageElements.Image.ImageData"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
            <param name="scale">The scale to use when rendering the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.IO.Stream,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
            <param name="scale">The scale to use when rendering the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.#ctor(System.Drawing.Bitmap,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Image"/> class.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> object containing the image data.</param>
            <param name="x">X coordinate of the image.</param>
            <param name="y">Y coordinate of the image.</param>
            <param name="scale">The scale to use when rendering the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the image to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the image's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.SetBounds(System.Single,System.Single)">
            <summary>
            Scales the image to fit in the given box keeping the X and Y scale equal.
            </summary>
            <param name="maximumWidth">The maximum width.</param>
            <param name="maximumHeight">The maximum height.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.SetSize(System.Single,System.Single)">
            <summary>
            Scales the image to fit the exact width and height given.
            </summary>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.SetDpi(System.Single)">
            <summary>
            Scales the image to have the specified dpi (also known as pixels per inch).
            </summary>
            <param name="dpi">DPI of the image.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Image.SetDpi(System.Single,System.Single)">
            <summary>
            Scales the image to have the specified dpi (also known as pixels per inch).
            </summary>
            <param name="horizontalDpi">Horizontal dpi of the image.</param>
            <param name="verticalDpi">Horizontal dpi of the image.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.Align">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Image.Align"/> enumeration that specifies horizontal alignment of the image on the X coordinate.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Image.VAlign"/> enumeration that specifies vertical alignment of the image on the Y coordinate.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.ScaleX">
            <summary>
            Gets or sets the horizontal scale of the image.
            </summary>
            <remarks>Setting this value affects the <see cref="P:ceTe.DynamicPDF.PageElements.Image.HorizontalDpi"/> property.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.ScaleY">
            <summary>
            Gets or sets the vertical scale of the image.
            </summary>
            <remarks>Setting this value affects the <see cref="P:ceTe.DynamicPDF.PageElements.Image.VerticalDpi"/> property.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.HorizontalDpi">
            <summary>
            Gets or sets the horizontal dpi (also known as pixels per inch) of the image.
            </summary>
            <remarks>Setting this value affects the <see cref="P:ceTe.DynamicPDF.PageElements.Image.ScaleX"/> property.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.VerticalDpi">
            <summary>
            Gets or sets the vertical dpi (also known as pixels per inch) of the image.
            </summary>
            <remarks>Setting this value affects the <see cref="P:ceTe.DynamicPDF.PageElements.Image.ScaleY"/> property.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Image.ImageData">
            <summary>
            Get the image's <see cref="P:ceTe.DynamicPDF.PageElements.Image.ImageData"/> object.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Label">
            <summary>
            Represents a label.
            </summary>
            <remarks>This class can be used to place labels of text on a page.</remarks>
            <example>The following example will display text in a label on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create the string and label
            		Dim MyText As String = "This is the dark blue, centered text at a 15 degree angle contained in the label."
            		Dim MyLabel As Label = New Label(MyText, 0, 0, 512, 14, Font.Helvetica, 14, TextAlign.Center, Color.DarkBlue)
            
            		' Change the angle property 
            		MyLabel.Angle = 15
            
            		' Add the label to the page
            		MyPage.Elements.Add(MyLabel)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create the string and label
            		string text = "This is the dark blue, centered text at a 15 degree angle contained in the label.";
            		Label label = new Label( text, 0, 0, 512, 14, Font.Helvetica, 14, TextAlign.Center, Color.DarkBlue );
            
            		// Change the angle property
            		label.Angle = 15;
            
            		// Add the label to the page
            		page.Elements.Add( label );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="align">Alignment of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="textColor">Color of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Label"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="align">Alignment of the text of the label.</param>
            <param name="textColor">Color of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Label.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the label to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the label's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Align">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Label.Align"/> enumeration that specifies the text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Label.VAlign"/> enumeration that specifies the vertical text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Underline">
            <summary>
            Gets or sets a value indicating if the label is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.RightToLeft">
            <summary>
            Gets or sets a value indicating if text should be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Text">
            <summary>
            Gets or sets the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Label.Font"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.FontSize">
            <summary>
            Gets or sets the font size for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Width">
            <summary>
            Gets or sets the width or the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Label.Height">
            <summary>
            Overridden. Gets or sets the height or the label.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.LayoutGrid">
            <summary>
            Represents a layout grid.
            </summary>
            <remarks>This class can be used to place a grid on the entire page.  This grid is very helpful with the design and layout of the document.</remarks>
            <example>The following example will place a layout grid on the page and also places a rectangle on the page for reference.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a layout grid
            		Dim grid As LayoutGrid = New LayoutGrid(LayoutGrid.GridType.Decimal)
             
            		' Add a rectangle to the page
            		MyPage.Elements.Add(New Rectangle(50, 50, 50, 50, 2))
            
            		' Add the layout grid to the page
            		MyPage.Elements.Add(grid)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a layout grid
            		LayoutGrid grid = new LayoutGrid( LayoutGrid.GridType.Decimal );
            
            		// Add a rectangle to the page
            		page.Elements.Add( new Rectangle( 50, 50, 50, 50, 2 ) );
            
            		// Add the layoutgrid to the page
            		page.Elements.Add( grid );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            } 
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LayoutGrid"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LayoutGrid"/> class.
            </summary>
            <param name="showTitle">This value specifies whether or not to display the grid's title information.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.#ctor(ceTe.DynamicPDF.PageElements.LayoutGrid.GridType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LayoutGrid"/> class.
            </summary>
            <param name="type">Type of grid to display.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.#ctor(ceTe.DynamicPDF.PageElements.LayoutGrid.GridType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LayoutGrid"/> class.
            </summary>
            <param name="type">Type of grid to display.</param>
            <param name="showTitle">This value specifies whether or not to display the grid's title information.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LayoutGrid.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the layout grid to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the layout grid's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.LayoutGrid.Type">
            <summary>
            Gets or sets the style of grid.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.LayoutGrid.ShowTitle">
            <summary>
            Gets or sets a value specifying whether or not to display the grids title information.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType">
            <summary>
            Specifies the type of grid. 
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType.Decimal">
            <summary>
            Decimal style of grid.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType.Standard">
            <summary>
            Standard measurement style of grid.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType.Metric">
            <summary>
            Metrics measurement style of grid.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.LayoutGrid.GridType.Print">
            <summary>
            Print measurement style of grid.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Line">
            <summary>
            Represents a line.
            </summary>
            <remarks>This class can be used to place lines of different length, width, color and patterns on a page.</remarks>
            <example>The following example will display two different lines on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a line
            		Dim MyLine As Line = New Line(50, 50, 50, 400, 5, _
            			Color.Black, LineStyle.Solid)
            
            		' Change the line cap property 
            		MyLine.Cap = LineCap.Round
            
            		' Add two lines to the page
            		MyPage.Elements.Add(MyLine)
            		MyPage.Elements.Add(New Line(60, 50, 150, 400, 2, _
            			Color.Blue, LineStyle.DashLarge))
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a line
            		Line line = new Line( 50, 50, 50, 400, 5, Color.Black, 
            			LineStyle.Solid );
            
            		// Change the line cap property
            		line.Cap = LineCap.Round;
            
            		// Add two lines to the page
            		page.Elements.Add( line );	
            		page.Elements.Add( new Line( 60, 50, 150, 400, 2, 
            			Color.Blue, LineStyle.DashLarge ) );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
            <param name="width">Width of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
            <param name="color">Color of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
            <param name="width">Width of the line.</param>
            <param name="color">Color of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Line"/> class.
            </summary>
            <param name="x1">X1 coordinate of the line.</param>
            <param name="y1">Y1 coordinate of the line.</param>
            <param name="x2">X2 coordinate of the line.</param>
            <param name="y2">Y2 coordinate of the line.</param>
            <param name="width">Width of the line.</param>
            <param name="color">Color of the line.</param>
            <param name="style">Style of the line.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Line.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the line to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the line's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Style">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> object to use for the style of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Cap">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineCap"/> enumeration used to specify the line cap style of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Width">
            <summary>
            Gets or sets the width of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Color">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Line.Color"/> object to use for the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.X1">
            <summary>
            Gets or sets the X1 coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Y1">
            <summary>
            Gets or sets the Y1 coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.X2">
            <summary>
            Gets or sets the X2 coordinate of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Line.Y2">
            <summary>
            Gets or sets the Y2 coordinate of the line.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.LineSubPath">
            <summary>
            Represents a line subpath.
            </summary>
            <remarks>This class, when added to a <see cref="T:ceTe.DynamicPDF.PageElements.Path"/>, is used to create a straight line 
            path to the LineSubPath's specified location.</remarks>
            <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a path
            		Dim MyPath As Path = New Path(50, 150, Color.Blue, Color.Yellow, _
            			Apply.Both, 3, LineStyle.Solid, True)
            
            		' Add some sub paths to the path 
            		MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
            		MyPath.SubPaths.Add(New LineSubPath(300, 400))
            		MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
            		MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
            
            		' Add the path to the page
            		MyPage.Elements.Add(path)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a path
            		Path path = new Path( 50, 150, Color.Blue, Color.Yellow, Apply.Both, 
            			3, LineStyle.Solid, true );
            
            		// Add some sub paths to the path
            		path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
            		path.SubPaths.Add( new LineSubPath( 300, 400 ) );
            		path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
            		path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
            
            		// Add the path to the page
            		page.Elements.Add( path );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LineSubPath.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.LineSubPath"/> class.
            </summary>
            <param name="x">X coordinate of the destination.</param>
            <param name="y">Y coordinate of the destination.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.LineSubPath.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the sub path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.LineSubPath.X">
            <summary>
            Gets or sets the X coordinate of the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.LineSubPath.Y">
            <summary>
            Gets or sets the Y coordinate of the destination.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Link">
            <summary>
            Represents a link with a destination or action.
            </summary>
            <remarks>This class can be used to place links on the PDF.</remarks>
            <example>The following example will place a label on the PDF then create a link at that location that links to a webpage.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		Dim MyText As String = "This is a link to DynamicPDF.com"
            		Dim MyFont As Font = Font.Helvetica
            
            		' Create the link's label
            		Dim MyLabel As Label = New Label(MyText, 50, 50, 400, 20, font, 18, _
            			Color.Blue)
            		MyLabel.Underline = True
            
            		' Set the action then create the link
            		Dim action As UrlAction = New UrlAction("http://www.dynamicpdf.com")
            		Dim MyLink As Link = New Link(50, 50, MyFont.GetTextWidth(MyText, 18), _
            			20, Action)
            
            		' Add the label and the link to the page
            		MyPage.Elements.Add(MyLabel)
            		MyPage.Elements.Add(MyLink)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		string text = "This is a link to DynamicPDF.com";
            		Font font = Font.Helvetica;
            
            		// Create the link's label
            		Label label = new Label( text, 50, 50, 400, 20, font, 18, 
            			Color.Blue );
            		label.Underline = true;
            
            		// Set the action then create the link
            		UrlAction action = new UrlAction( "http://www.dynamicpdf.com" );
            		Link link = new Link( 50, 50, font.GetTextWidth( text, 18 ), 20, 
            			action );
            
            		// Add the label and the link to the page
            		page.Elements.Add( label );
            		page.Elements.Add( link );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Link.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Link"/> class.
            </summary>
            <param name="x">X coordinate of the link.</param>
            <param name="y">Y coordinate of the link.</param>
            <param name="width">Width of the link.</param>
            <param name="height">Height of the link.</param>
            <param name="action">Action or destination of the link.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Link.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the link to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the link's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Link.DrawAnnotation(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the link to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the link's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.X">
            <summary>
            Gets or sets the X coordinate of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Y">
            <summary>
            Gets or sets the Y coordinate of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Width">
            <summary>
            Gets or sets the width of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Height">
            <summary>
            Gets or sets the height of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Link.Action">
            <summary>
            Gets the <see cref="P:ceTe.DynamicPDF.PageElements.Link.Action"/> to be taken by the link.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Note">
            <summary>
            Represents a note annotation.
            </summary>
            <remarks>This class can be used to place a note annotation on the PDF.</remarks>
            <example>The following example will place an icon on the PDF that once clicked on will display text in a separate box.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a note
            		Dim MyNote As Note = New Note("This is my help note.", 50, 50, _
            			150, 50, NoteType.Help, False)
            
            		' Change the color property 
            		MyNote.Color = Color.Red
            
            		' Add the note to the page
            		MyPage.Elements.Add(MyNote)
            		MyPage.Elements.Add(New Label("Click on the above icon to view " + _
            			"the note.", 50, 80, 150, 72, Font.HelveticaBold, 18))
            
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a note
            		Note note = new Note( "This is my help note.", 50, 50, 150, 50, 
            			NoteType.Help, true );
            
            		// Change the color property
            		note.Color = Color.Red;
            
            		// Add the note to the page
            		page.Elements.Add( note );	
            		page.Elements.Add( new Label( "Click on the above icon to view " +
            			"the note.", 50, 80, 150, 72, Font.HelveticaBold, 18 ) );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Note"/> class.
            </summary>
            <param name="text">Text of the note.</param>
            <param name="x">X coordinate of the note.</param>
            <param name="y">Y coordinate of the note.</param>
            <param name="width">Width of the note.</param>
            <param name="height">Height of the note.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.NoteType)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Note"/> class.
            </summary>
            <param name="text">Text of the note.</param>
            <param name="x">X coordinate of the note.</param>
            <param name="y">Y coordinate of the note.</param>
            <param name="width">Width of the note.</param>
            <param name="height">Height of the note.</param>
            <param name="type">Specifies the type of note.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Note"/> class.
            </summary>
            <param name="text">Text of the note.</param>
            <param name="x">X coordinate of the note.</param>
            <param name="y">Y coordinate of the note.</param>
            <param name="width">Width of the note.</param>
            <param name="height">Height of the note.</param>
            <param name="isOpen">Specifies if the note is open initially.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.NoteType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Note"/> class.
            </summary>
            <param name="text">Text of the note.</param>
            <param name="x">X coordinate of the note.</param>
            <param name="y">Y coordinate of the note.</param>
            <param name="width">Width of the note.</param>
            <param name="height">Height of the note.</param>
            <param name="type">Specifies the type of note.</param>
            <param name="isOpen">Specifies if the note is open initially.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the link to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the link's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Note.DrawAnnotation(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the link to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the link's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.X">
            <summary>
            Gets or sets the X coordinate of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Y">
            <summary>
            Gets or sets the Y coordinate of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Width">
            <summary>
            Gets or sets the width of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Height">
            <summary>
            Gets or sets the height of the link.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.NoteType">
            <summary>
            Gets or sets the type of note.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Text">
            <summary>
            Gets or sets the text of the note.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.IsOpen">
            <summary>
            Gets or sets a value indicating if the note is opened by default.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Note.Color">
            <summary>
            Gets or sets the color of the note.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.NoteType">
            <summary>
            Specifies a note type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Comment">
            <summary>Represents a note with a comment icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Help">
            <summary>Represents a note with a help icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Insert">
            <summary>Represents a note with an insert icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Key">
            <summary>Represents a note with a key icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.NewParagraph">
            <summary>Represents a note with a new paragraph icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Note">
            <summary>Represents a note with a note icon.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageElements.NoteType.Paragraph">
            <summary>Represents a note with a paragraph icon.</summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel">
            <summary>
            Represents a page numbering label.
            </summary>
            <remarks>
            This class can be used to add page and section numbering to a PDF document. A document can be broken up into
            sections using the <see cref="P:ceTe.DynamicPDF.Document.Sections"/> property of the <see cref="T:ceTe.DynamicPDF.Document"/> class. The following
            tokens can be used within the text of a PageNumberingLabel. They will be replaced with the appropriate value
            when the PDF is output.
            <list type="table">
            <listheader>
            <term>Token</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>CP</term>
            <description>Current page. The default numbering style is numeric. The current page can be offset using the is
            offset by the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageOffset"/> property.</description>
            </item>
            <item>
            <term>TP</term>
            <description>Total pages. The default numbering style is numeric. The total pages can be offset using the is
            offset by the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageTotalOffset"/> property.</description>
            </item>
            <item>
            <term>SP</term>
            <description>Section page. The default numbering style is the numbering style used by the section. The total
            pages can be offset using the is offset by the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageTotalOffset"/> property.</description>
            </item>
            <item>
            <term>ST</term>
            <description>Section Total. The default numbering style is the numbering style used by the section. The total
            pages can be offset using the is offset by the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageTotalOffset"/> property.</description>
            </item>
            <item>
            <term>PR</term>
            <description>Prefix. The sections prefix.</description>
            </item>
            </list>
            <p/>
            All tokens except the %%PR%% token can also contain a numbering style specifier. The numbering style specifier
            is placed in parenthesis after the token. If no numbering style specifier is given, then the current sections
            numbering specifier is used. If there are no document sections or the current section does not have a numbering
            specifier, numeric numbering is used.
            <list type="table">
            <listheader>
            <term>Numbering Style</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>1</term>
            <description>Numeric. Arabic numbers are used: 1, 2, 3, etc. Example: "%%CP(1)%%"</description>
            </item>
            <item>
            <term>i</term>
            <description>Lower Case Roman Numerals. Lower case roman numerals are used: i, ii, iii, etc.
            Example: "%%CP(i)%%".</description>
            </item>
            <item>
            <term>I</term>
            <description>Upper Case Roman Numerals. Upper case roman numerals are used: I, II, III, etc.
            Example: "%%CP(I)%%".</description>
            </item>
            <item>
            <term>a</term>
            <description>Lower Latin Letters. Lower case Latin letters are used: a, b, c, etc. After z, aa is used
            followed by bb, cc, ect. Example: "%%CP(a)%%".</description>
            </item>
            <item>
            <term>A</term>
            <description>Upper Latin Letters. Upper case Latin letters are used: A, B, C, etc. After Z, AA is used
            followed by BB, CC, ect. Example: "%%CP(A)%%".</description>
            </item>
            <item>
            <term>b</term>
            <description>Lower Latin Letters. Lower case Latin letters are used: a, b, c, etc. After z, aa is used
            followed by ab, ac, ect. Example: "%%CP(b)%%".</description>
            </item>
            <item>
            <term>B</term>
            <description>Lower Latin Letters. Lower case Latin letters are used: A, B, C, etc. After Z, AA is used
            followed by AB, AC, ect. Example: "%%CP(B)%%".</description>
            </item>
            </list>
            <p/>
            There should be no spaces within a token, only the token and optional numbering style specifier. This
            token is <b>invalid</b> %%CP ( i )%% because of the extra spaces.<p/>Here are some examples of valid tokens:
            <ul style="margin-top: 0px;">
            <li>%%SP%%</li>
            <li>%%SP(I)%%</li>
            <li>%%PR%%</li>
            <li>%%ST(B)%%</li>
            </ul>
            </remarks>
            <example>The following example shows how to use page numbering in a document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a document template and add it to the document
            		Dim documentTemplate As Template = New Template()
            		MyDocument.Template = documentTemplate
            
            		' Place a page numbering label in the document template
            		documentTemplate.Elements.Add( New PageNumberingLabel( _
            			"%%PR%%%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, _
            			12, TextAlign.Center ) )
            
            		' Begin the first section
            		MyDocument.Sections.Begin( NumberingStyle.RomanLowerCase )
            
            		' Add three pages
            		MyDocument.Pages.Add( new Page() ) 'Page 1
            		MyDocument.Pages.Add( new Page() ) 'Page 2
            		MyDocument.Pages.Add( new Page() ) 'Page 3
            
            		' Begin the second section
            		MyDocument.Sections.Begin( NumberingStyle.Numeric )
            
            		' Add four pages
            		MyDocument.Pages.Add( new Page() ) 'Page 4
            		MyDocument.Pages.Add( new Page() ) 'page 5
            		MyDocument.Pages.Add( new Page() ) 'page 6
            		MyDocument.Pages.Add( new Page() ) 'page 7
            
            		' Begin the third section specifying a section prefix
            		MyDocument.Sections.Begin( NumberingStyle.RomanLowerCase, _
            			"Appendix A - " )
            
            		' Add two pages
            		MyDocument.Pages.Add( new Page() ) 'page 8
            		MyDocument.Pages.Add( new Page() ) 'page 9
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a document template and add it to the document
            		Template documentTemplate = new Template();
            		document.Template = documentTemplate;
            
            		// Place a page numbering label in the document template
            		documentTemplate.Elements.Add( new PageNumberingLabel( 
            			"%%PR%%%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 
            			12, TextAlign.Center ) );
            
            		// Begin the first section
            		document.Sections.Begin( NumberingStyle.RomanLowerCase );
            
            		// Add three pages
            		document.Pages.Add( new Page() ); //Page 1
            		document.Pages.Add( new Page() ); //Page 2
            		document.Pages.Add( new Page() ); //Page 3
            
            		// Begin the second section
            		document.Sections.Begin( NumberingStyle.Numeric );
            
            		// Add four pages
            		document.Pages.Add( new Page() ); //Page 4
            		document.Pages.Add( new Page() ); //page 5
            		document.Pages.Add( new Page() ); //page 6
            		document.Pages.Add( new Page() ); //page 7
            
            		// Begin the third section specifying a section prefix
            		document.Sections.Begin( NumberingStyle.RomanLowerCase, 
            			"Appendix A - " );
            
            		// Add two pages
            		document.Pages.Add( new Page() ); //page 8
            		document.Pages.Add( new Page() ); //page 9
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="align">Alignment of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="textColor">Color of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.PageNumberingLabel"/> class.
            </summary>
            <param name="text">Text to display in the label.</param>
            <param name="x">X coordinate of the label.</param>
            <param name="y">Y coordinate of the label.</param>
            <param name="width">Width of the label.</param>
            <param name="height">Height of the label.</param>
            <param name="font">Font for the text of the label.</param>
            <param name="fontSize">Font size of the text of the label.</param>
            <param name="align">Alignment of the text of the label.</param>
            <param name="textColor">Color of the text of the label.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.PageNumberingLabel.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the label to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the label's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Align">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Align"/> enumeration that specifies the text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.VAlign"/> enumeration that specifies the vertical text alignment of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Underline">
            <summary>
            Gets or sets a value indicating if the label is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Text">
            <summary>
            Gets or sets the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Font"/> object to use for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.FontSize">
            <summary>
            Gets or sets the font size for the text of the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.Width">
            <summary>
            Gets or sets the width or the label.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageTotalOffset">
            <summary>
            Gets or sets the page total offset for page numbering.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.PageNumberingLabel.PageOffset">
            <summary>
            Gets or sets the page offset for page numbering.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Path">
            <summary>
            Represents a path with sub paths.
            </summary>
            <remarks>This class can be used to specify a collection of sub paths which will be used to complete your path.  
            Sub paths that can be added are CurveFromSubPath, CurveSubPath, CurveToSubPath and LineSubPath.</remarks>
            <example>The following example will display a path that incorporates several different subpaths before retuning to its starting location.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a path
            		Dim MyPath As Path = New Path(50, 150, Color.Blue, Color.Yellow, _
            			Apply.Both, 3, LineStyle.Solid, True)
            
            		' Add some sub paths to the path 
            		MyPath.SubPaths.Add(New CurveSubPath(50, 400, 300, 150, -200, 400))
            		MyPath.SubPaths.Add(New LineSubPath(300, 400))
            		MyPath.SubPaths.Add(New CurveToSubPath(300, 150, 50, 300))
            		MyPath.SubPaths.Add(New CurveFromSubPath(150, 100, 200, -100))
            
            		' Add the path to the page
            		MyPage.Elements.Add(path)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            		{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a path
            		Path path = new Path( 50, 150, Color.Blue, Color.Yellow, Apply.Both, 
            			3, LineStyle.Solid, true );
            
            		// Add some sub paths to the path
            		path.SubPaths.Add( new CurveSubPath( 50, 400, 300, 150, -200, 400 ) );
            		path.SubPaths.Add( new LineSubPath( 300, 400 ) );
            		path.SubPaths.Add( new CurveToSubPath( 300, 150, 50, 300 ) );
            		path.SubPaths.Add( new CurveFromSubPath( 150, 100, 200, -100 ) );
            
            		// Add the path to the page
            		page.Elements.Add( path );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="fillColor">Color of the fill of the path.</param>
            <param name="apply">Specifies how color is applied to the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
            <param name="fillColor">Color of the fill of the path.</param>
            <param name="apply">Specifies how color is applied to the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
            <param name="lineWidth">Width of the lines of the path.</param>
            <param name="lineStyle">Style of the lines of the path.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
            <param name="lineWidth">Width of the lines of the path.</param>
            <param name="lineStyle">Style of the lines of the path.</param>
            <param name="closePath">Specifies if the path should be closed.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.#ctor(System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply,System.Single,ceTe.DynamicPDF.LineStyle,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Path"/> class.
            </summary>
            <param name="x">X coordinate of the path.</param>
            <param name="y">Y coordinate of the path.</param>
            <param name="lineColor">Color of the lines of the path.</param>
            <param name="fillColor">Color of the fill of the path.</param>
            <param name="apply">Specifies how color is applied to the path.</param>
            <param name="lineWidth">Width of the lines of the path.</param>
            <param name="lineStyle">Style of the lines of the path.</param>
            <param name="closePath">Specifies if the path should be closed.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Path.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the path to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the sub path's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineStyle">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Path.LineStyle"/> object used to specify the style of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineCap">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Path.LineCap"/> enumeration used to specify the line cap style of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineJoin">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Path.LineJoin"/> enumeration used to specify the line join style of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.MiterLimit">
            <summary>
            Gets or sets the miter limit of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.SubPaths">
            <summary>
            Gets <see cref="T:ceTe.DynamicPDF.PageElements.SubPathList"/> that contains a collection of <see cref="T:ceTe.DynamicPDF.PageElements.SubPath"/> objects.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineWidth">
            <summary>
            Gets or sets the width of the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.LineColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the path's lines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.FillColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the fill of the path.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.X">
            <summary>
            Gets or set the X coordinate of the path.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.Y">
            <summary>
            Gets or sets the Y coordinate of the path.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.Apply">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Path.Apply"/> enumeration that specifies how color is applied to the path.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Path.ClosePath">
            <summary>
            Gets or sets a value specifying if the path should be closed.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Rectangle">
            <summary>
            Represents a rectangle.
            </summary>
            <remarks>This class can be used to place rectangles of any size or color on a page.</remarks>
            <example>The following example will display a custom rectangle on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a rectangle
            		Dim MyRectangle As Rectangle = New Rectangle(50, 50, 200, _
            			200, Color.Black, Color.Gray, Apply.Both, 4, _
            			LineStyle.Solid)
            
            		' Change the corner radius property 
            		MyRectangle.CornerRadius = 10
            
            		' Add the rectangle to the page
            		MyPage.Elements.Add(MyRectangle)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a rectangle
            		Rectangle rectangle = new Rectangle( 50, 50, 200, 
            			200, Color.Black, Color.Gray, Apply.Both, 4, 
            			LineStyle.Solid );
            
            		// Change the corner radius property
            		rectangle.CornerRadius = 10;
            
            		// Add the rectangle to the page
            		page.Elements.Add( rectangle );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            } 
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
            <param name="borderStyle">Style of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="fillColor">Color of the fill of the rectangle.</param>
            <param name="apply">Specifies how color is applied to the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
            <param name="borderStyle">Style of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="fillColor">Color of the fill of the rectangle.</param>
            <param name="apply">Specifies how color is applied to the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="fillColor">Color of the fill of the rectangle.</param>
            <param name="apply">Specifies how color is applied to the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Apply,System.Single,ceTe.DynamicPDF.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Rectangle"/> class.
            </summary>
            <param name="x">X coordinate of the rectangle.</param>
            <param name="y">Y coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <param name="borderColor">Color of the border of the rectangle.</param>
            <param name="fillColor">Color of the fill of the rectangle.</param>
            <param name="apply">Specifies how color is applied to the rectangle.</param>
            <param name="borderWidth">Width of the border of the rectangle.</param>
            <param name="borderStyle">Style of the border of the rectangle.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Rectangle.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the rectangle to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the rectangle's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.BorderStyle">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.LineStyle"/> object used to specify the border style of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.CornerRadius">
            <summary>
            Gets or sets the corner radius of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.BorderWidth">
            <summary>
            Gets or sets the border width of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the border of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.FillColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the fill of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Rectangle.Apply">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Rectangle.Apply"/> enumeration that specifies how color is applied to the rectangle.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Row">
            <summary>
            Represents a row in a table.
            </summary>
            <example>The following example will display a simple table on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a table 
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(90)
            		MyTable.Columns.Add(90)
            		MyTable.Columns.Add(90)
            
            		' Add rows to the table and add cells to the rows
            		Dim row1 As Row = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Color.Black, Color.Gray)
            		row1.Align = TextAlign.Center
            		row1.VAlign = VAlign.Center
            		row1.Cells.Add("Header 1")
            		row1.Cells.Add("Header 2")
            		row1.Cells.Add("Header 3")
            		row1.Cells.Add("Header 4")
            
            		Dim row2 As Row = MyTable.Rows.Add(30)
            		Dim cell1 As Cell = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell1.Align = TextAlign.Center
            		cell1.VAlign = VAlign.Center
            		row2.Cells.Add("Item 1")
            		row2.Cells.Add("Item 2")
            		row2.Cells.Add("Item 3")
            
            		Dim row3 As Row = MyTable.Rows.Add(30)
            		Dim cell2 As Cell = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell2.Align = TextAlign.Center
            		cell2.VAlign = VAlign.Center
            		row3.Cells.Add("Item 4")
            		row3.Cells.Add("Item 5")
            		row3.Cells.Add("Item 6")
            
            		Dim row4 As Row = MyTable.Rows.Add(30)
            		Dim cell3 As Cell = row4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell3.Align = TextAlign.Center
            		cell3.VAlign = VAlign.Center
            		row4.Cells.Add("Item 7")
            		row4.Cells.Add("Item 8")
            		row4.Cells.Add("Item 9")
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Create a table 
            		Table table = new Table(0, 0, 600, 600);
            		
            		//Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 90 );
            		table.Columns.Add( 90 );
            		table.Columns.Add( 90 );
            		
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            		    Color.Gray );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		row1.Cells.Add( "Header 4" );
            		
            		Row row2 = table.Rows.Add( 30 );
            		Cell cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell1.Align = TextAlign.Center;
            		cell1.VAlign = VAlign.Center;
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
            		row2.Cells.Add( "Item 3" );
            				
            		Row row3 = table.Rows.Add( 30 );
            		Cell cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell2.Align = TextAlign.Center;
            		cell2.VAlign = VAlign.Center;
            		row3.Cells.Add( "Item 4" );
            		row3.Cells.Add( "Item 5" );
            		row3.Cells.Add( "Item 6" );
            				
            		Row row4 = table.Rows.Add( 30 );
            		Cell cell3 = row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell3.Align = TextAlign.Center;
            		cell3.VAlign = VAlign.Center;
            		row4.Cells.Add( "Item 7" );
            		row4.Cells.Add( "Item 8" );
            		row4.Cells.Add( "Item 9" );
            		
            		// Add the table to the page
            		page.Elements.Add( table );	
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            } 
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Cells">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.CellList"/> containing all the cells in that row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Height">
            <summary>
            Gets or sets the minimum height of the row.
            </summary>
            <remarks>If no height is specified for a Row this value will return -1.  A -1 signifies that the height will automatically adjust to the height of the text.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.ActualRowHeight">
            <summary>
            Gets the actual height of the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Row.Font"/> object to use for the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.FontSize">
            <summary>
            Gets or sets the font size to use for the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text in the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background in the row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration to use for the horizontal alignment of each cell in that row.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Row.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Row.VAlign"/> enumeration to use for the vertical alignment of each cell in that row.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.RowList">
            <summary>
            Represents a list of Rows in a table.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="font">Font for the text in the row.</param>
            <param name="size">Font size for the text in the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <param name="font">Font for the text in the row.</param>
            <param name="size">Font size for the text in the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="font">Font for the text in the row.</param>
            <param name="size">Font size for the text in the row.</param>
            <param name="textColor">Color for the text in the row.</param>
            <param name="backColor">Background color for the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.Add(System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <param name="height">Height of the row to be added.</param>
            <param name="font">Font for the text in the row.</param>
            <param name="size">Font size for the text in the row.</param>
            <param name="textColor">Color for the text in the row.</param>
            <param name="backColor">Background color for the row.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Column"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.RowList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RowList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.RowList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.Row"/> at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.SubPathList">
            <summary>
            Represents a collection of sub paths.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubPathList.Add(ceTe.DynamicPDF.PageElements.SubPath)">
            <summary>
            Adds a sub path to the current path.
            </summary>
            <param name="subPath"><b>SubPath</b> object to add to the path.</param>
            <returns>The index of the added subpath.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.SubPathList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <b>SubPathList</b>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <b>SubPathList</b></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubPathList.Count">
            <summary>
            Gets the number of <see cref="T:ceTe.DynamicPDF.PageElements.SubPath"/> objects in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.SubPathList.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:ceTe.DynamicPDF.PageElements.SubPath"/> object at the given index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.Table">
            <summary>
            Represents a table with rows, columns and cells.
            </summary>
            <remarks>This class can be used to create tables.  A table must contain at least one Column and one Row with at least one 
            Cell in that Row.  Formatting of each cell in the table is done in a hierarchical manner in that a Cell's formatting take 
            precedent over a Row's formatting which in term takes precedent over a Table's formatting .  The column object contains no
            formatting information.  Using the Tables GetOverflowColumns and GetOverflowRows methods you can allow your table to easily 
            flow onto other pages.</remarks>
            <example>The following example will display a simple table on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a table 
            		Dim MyTable As Table = New Table(0, 0, 600, 600)
            
            		' Add columns to the table
            		MyTable.Columns.Add(150)
            		MyTable.Columns.Add(90)
            		MyTable.Columns.Add(90)
            		MyTable.Columns.Add(90)
            
            		' Add rows to the table and add cells to the rows
            		Dim row1 As Row = MyTable.Rows.Add(40, ceTe.DynamicPDF.Font.HelveticaBold, _
            			16, Color.Black, Color.Gray)
            		row1.Align = TextAlign.Center
            		row1.VAlign = VAlign.Center
            		row1.Cells.Add("Header 1")
            		row1.Cells.Add("Header 2")
            		row1.Cells.Add("Header 3")
            		row1.Cells.Add("Header 4")
            
            		Dim row2 As Row = MyTable.Rows.Add(30)
            		Dim cell1 As Cell = row2.Cells.Add("Rowheader 1", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell1.Align = TextAlign.Center
            		cell1.VAlign = VAlign.Center
            		row2.Cells.Add("Item 1")
            		row2.Cells.Add("Item 2")
            		row2.Cells.Add("Item 3")
            
            		Dim row3 As Row = MyTable.Rows.Add(30)
            		Dim cell2 As Cell = row3.Cells.Add("Rowheader 2", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell2.Align = TextAlign.Center
            		cell2.VAlign = VAlign.Center
            		row3.Cells.Add("Item 4")
            		row3.Cells.Add("Item 5")
            		row3.Cells.Add("Item 6")
            
            		Dim row4 As Row = MyTable.Rows.Add(30)
            		Dim cell3 As Cell = row4.Cells.Add("Rowheader 3", Font.HelveticaBold, 16, _
            			Color.Black, Color.Gray, 1)
            		cell3.Align = TextAlign.Center
            		cell3.VAlign = VAlign.Center
            		row4.Cells.Add("Item 7")
            		row4.Cells.Add("Item 8")
            		row4.Cells.Add("Item 9")
            
            		' Add the table to the page
            		MyPage.Elements.Add(MyTable)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Create a table 
            		Table table = new Table(0, 0, 600, 600);
            		
            		//Add columns to the table
            		table.Columns.Add( 150 );
            		table.Columns.Add( 90 );
            		table.Columns.Add( 90 );
            		table.Columns.Add( 90 );
            		
            		// Add rows to the table and add cells to the rows
            		Row row1 = table.Rows.Add( 40, Font.HelveticaBold, 16, Color.Black, 
            		    Color.Gray );
            		row1.Align = TextAlign.Center;
            		row1.VAlign = VAlign.Center;
            		row1.Cells.Add( "Header 1" );
            		row1.Cells.Add( "Header 2" );
            		row1.Cells.Add( "Header 3" );
            		row1.Cells.Add( "Header 4" );
            		
            		Row row2 = table.Rows.Add( 30 );
            		Cell cell1 = row2.Cells.Add( "Rowheader 1", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell1.Align = TextAlign.Center;
            		cell1.VAlign = VAlign.Center;
            		row2.Cells.Add( "Item 1" );
            		row2.Cells.Add( "Item 2" );
            		row2.Cells.Add( "Item 3" );
            				
            		Row row3 = table.Rows.Add( 30 );
            		Cell cell2 = row3.Cells.Add( "Rowheader 2", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell2.Align = TextAlign.Center;
            		cell2.VAlign = VAlign.Center;
            		row3.Cells.Add( "Item 4" );
            		row3.Cells.Add( "Item 5" );
            		row3.Cells.Add( "Item 6" );
            				
            		Row row4 = table.Rows.Add( 30 );
            		Cell cell3 = row4.Cells.Add( "Rowheader 3", Font.HelveticaBold, 16, 
            		    Color.Black, Color.Gray, 1 );
            		cell3.Align = TextAlign.Center;
            		cell3.VAlign = VAlign.Center;
            		row4.Cells.Add( "Item 7" );
            		row4.Cells.Add( "Item 8" );
            		row4.Cells.Add( "Item 9" );
            		
            		// Add the table to the page
            		page.Elements.Add( table );	
            		
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            } 
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">Y coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">X coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
            <param name="font">Font for the text in the table.</param>
            <param name="size">Font size for the text in the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> class.
            </summary>
            <param name="x">X coordinate of the table.</param>
            <param name="y">X coordinate of the table.</param>
            <param name="width">Width of the table.</param>
            <param name="height">Height of the table.</param>
            <param name="font">Font for the text in the table.</param>
            <param name="size">Font size for the text in the table.</param>
            <param name="textColor">Color of the text in the table.</param>
            <param name="backColor">Background color of the table.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowColumns">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow columns.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
            <remarks>This method returns a new <b>Table</b> object that contains the remaining columns that did not fit.</remarks>
            <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		Dim MyTable As Table = New Table(0, 0, 500, 50)
            
            		' Create some number of columns
            		Dim Cols As Integer = 50
            		Dim Int As Integer
            		For Int = 0 To Cols
            			MyTable.Columns.Add(100)
            		Next
            
            		' Create your rows to fill in
            		Dim MyRow1 As Row = MyTable.Rows.Add(20)
            		Dim MyRow2 As Row = MyTable.Rows.Add(20)
            
            		Dim J As Integer
            		For J = 1 To Cols
            			MyRow1.Cells.Add("Column #" &amp; J)
            			MyRow2.Cells.Add("Item")
            		Next
            
            		Do
            			Dim MyPage As Page = New Page
            			MyDocument.Pages.Add(MyPage)
            			MyPage.Elements.Add(MyTable)
            			MyTable = MyTable.GetOverflowColumns()
            		Loop While Not (MyTable Is Nothing)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		Table table = new Table( 0, 0, 500, 50 );
            
            		// Create some number of columns
            		int cols = 50;
            		for( int i = 0; i &lt;= cols; i++ )
            			table.Columns.Add( 100 );
            		
            		// Create your rows to fill in
            		Row row1 = table.Rows.Add( 20 );
            		Row row2 = table.Rows.Add( 20 );
            
            		for( int j = 0; j &lt;= cols; j++ )
            		{
            			row1.Cells.Add( "Column #" + j );
            			row2.Cells.Add( "Item" );
            		}
            	
            		do
            		{
            			Page page = new Page();
            			document.Pages.Add( page );
            			page.Elements.Add( table );
            			table = table.GetOverflowColumns();
            		} while ( table != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowColumns(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow columns.
            </summary>
            <param name="x">X coordinate of the new table.</param>
            <param name="y">Y coordinate of the new table.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
            <remarks>This method returns a new <b>Table</b> object that contains the remaining columns that did not fit.  This new table will be assigned the specified values for x and y.</remarks>
            <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		Dim MyTable As Table = New Table(0, 0, 500, 50)
            
            		' Create some number of columns
            		Dim Cols As Integer = 50
            		Dim Int As Integer
            		For Int = 0 To Cols
            			MyTable.Columns.Add(100)
            		Next
            
            		' Create your rows to fill in
            		Dim MyRow1 As Row = MyTable.Rows.Add(20)
            		Dim MyRow2 As Row = MyTable.Rows.Add(20)
            
            		Dim J As Integer
            		For J = 1 To Cols
            			MyRow1.Cells.Add("Column #" &amp; J)
            			MyRow2.Cells.Add("Item")
            		Next
            
            		Do
            			Dim MyPage As Page = New Page
            			MyDocument.Pages.Add(MyPage)
            			MyPage.Elements.Add(MyTable)
            			MyTable = MyTable.GetOverflowColumns(50, 50)
            		Loop While Not (MyTable Is Nothing)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		Table table = new Table( 0, 0, 500, 50 );
            
            		// Create some number of columns
            		int cols = 50;
            		for( int i = 0; i &lt;= cols; i++ )
            			table.Columns.Add( 100 );
            		
            		// Create your rows to fill in
            		Row row1 = table.Rows.Add( 20 );
            		Row row2 = table.Rows.Add( 20 );
            
            		for( int j = 0; j &lt;= cols; j++ )
            		{
            			row1.Cells.Add( "Column #" + j );
            			row2.Cells.Add( "Item" );
            		}
            	
            		do
            		{
            			Page page = new Page();
            			document.Pages.Add( page );
            			page.Elements.Add( table );
            			table = table.GetOverflowColumns( 50, 50 );
            		} while ( table != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowColumns(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow columns.
            </summary>
            <param name="x">X coordinate of the new table.</param>
            <param name="y">Y coordinate of the new table.</param>
            <param name="width">Width of the new table.</param>
            <param name="height">Height of the new table.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
            <remarks>This method returns a new <b>Table</b> object that contains the remaining columns that did not fit.  This new table will be assigned the specified values for x, y, height and width.</remarks>
            <example>The following example shows you how to use the GetOverflowColumns method to allow tables of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		Dim MyTable As Table = New Table(0, 0, 500, 50)
            
            		' Create some number of columns
            		Dim Cols As Integer = 50
            		Dim Int As Integer
            		For Int = 0 To Cols
            			MyTable.Columns.Add(100)
            		Next
            
            		' Create your rows to fill in
            		Dim MyRow1 As Row = MyTable.Rows.Add(20)
            		Dim MyRow2 As Row = MyTable.Rows.Add(20)
            
            		Dim J As Integer
            		For J = 1 To Cols
            			MyRow1.Cells.Add("Column #" &amp; J)
            			MyRow2.Cells.Add("Item")
            		Next
            
            		Do
            			Dim MyPage As Page = New Page
            			MyDocument.Pages.Add(MyPage)
            			MyPage.Elements.Add(MyTable)
            			MyTable = MyTable.GetOverflowColumns(50, 50, 250, 50)
            		Loop While Not (MyTable Is Nothing)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		Table table = new Table( 0, 0, 500, 50 );
            
            		// Create some number of columns
            		int cols = 50;
            		for( int i = 0; i &lt;= cols; i++ )
            			table.Columns.Add( 100 );
            		
            		// Create your rows to fill in
            		Row row1 = table.Rows.Add( 20 );
            		Row row2 = table.Rows.Add( 20 );
            
            		for( int j = 0; j &lt;= cols; j++ )
            		{
            			row1.Cells.Add( "Column #" + j );
            			row2.Cells.Add( "Item" );
            		}
            	
            		do
            		{
            			Page page = new Page();
            			document.Pages.Add( page );
            			page.Elements.Add( table );
            			table = table.GetOverflowColumns( 50, 50, 250, 50 );
            		} while ( table != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowRows">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow rows.
            </summary>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
            <remarks>This method returns a new <b>Table</b> object that contains the remaining rows that did not fit.</remarks>
            <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
                    Dim MyTable As Table = New Table(0, 0, 200, 700)
            
            		MyTable.Columns.Add(100)
            		MyTable.Columns.Add(100)
            
            		' This loop populates the table
            		Dim I As Integer
            		For I = 1 To 400
            			Dim MyRow As Row = MyTable.Rows.Add(20)
            			MyRow.Cells.Add("Row #" &amp; I)
            			MyRow.Cells.Add("Item")
            		Next
            		
            		Do
            			Dim MyPage As Page = New Page
            			MyDocument.Pages.Add(MyPage)
            			MyPage.Elements.Add(MyTable)
            			MyTable = MyTable.GetOverflowRows()
            		Loop While Not (MyTable Is Nothing)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		Table table = new Table( 0, 0, 200, 700 );
            
            		table.Columns.Add( 100 );
            		table.Columns.Add( 100 );
            
            		// This loop populates the table 
            		for ( int i = 1; i &lt;= 400; i++ )
            		{
            			Row row = table.Rows.Add( 20 );
            			row.Cells.Add( "Row #" + i );
            			row.Cells.Add( "Item" );
            		}
            
            		do
            		{
            			Page page = new Page();
            			document.Pages.Add( page );
            			page.Elements.Add( table );
            			table = table.GetOverflowRows();
            		} while ( table != null );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowRows(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow rows.
            </summary>
            <param name="x">X coordinate of the new table.</param>
            <param name="y">Y coordinate of the new table.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
            <remarks>This method returns a new <b>Table</b> object that contains the remaining rows that did not fit.  This new table will be assigned the specified values for x and y.</remarks>
            <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
                    Dim MyTable As Table = New Table(0, 0, 200, 700)
            
            		MyTable.Columns.Add(100)
            		MyTable.Columns.Add(100)
            
            		' This loop populates the table
            		Dim I As Integer
            		For I = 1 To 400
            			Dim MyRow As Row = MyTable.Rows.Add(20)
            			MyRow.Cells.Add("Row #" &amp; I)
            			MyRow.Cells.Add("Item")
            		Next
            		
            		Do
            			Dim MyPage As Page = New Page
            			MyDocument.Pages.Add(MyPage)
            			MyPage.Elements.Add(MyTable)
            			MyTable = MyTable.GetOverflowRows(50, 50)
            		Loop While Not (MyTable Is Nothing)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		Table table = new Table( 0, 0, 200, 700 );
            
            		table.Columns.Add( 100 );
            		table.Columns.Add( 100 );
            
            		// This loop populates the table 
            		for ( int i = 1; i &lt;= 400; i++ )
            		{
            			Row row = table.Rows.Add( 20 );
            			row.Cells.Add( "Row #" + i );
            			row.Cells.Add( "Item" );
            		}
            
            		do
            		{
            			Page page = new Page();
            			document.Pages.Add( page );
            			page.Elements.Add( table );
            			table = table.GetOverflowRows( 50, 50 );
            		} while ( table != null );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetOverflowRows(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object containing the overflow rows.
            </summary>
            <param name="x">X coordinate of the new table.</param>
            <param name="y">Y coordinate of the new table.</param>
            <param name="width">Width of the new table.</param>
            <param name="height">Height of the new table.</param>
            <returns>Returns a <see cref="T:ceTe.DynamicPDF.PageElements.Table"/> object.</returns>
            <remarks>This method returns a new <b>Table</b> object that contains the remaining rows that did not fit.  This new table will be assigned the specified values for x, y, height and width.</remarks>
            <example>The following example shows you how to use the GetOverflowRows method to allow tables of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
                    Dim MyTable As Table = New Table(0, 0, 200, 700)
            
            		MyTable.Columns.Add(100)
            		MyTable.Columns.Add(100)
            
            		' This loop populates the table
            		Dim I As Integer
            		For I = 1 To 400
            			Dim MyRow As Row = MyTable.Rows.Add(20)
            			MyRow.Cells.Add("Row #" &amp; I)
            			MyRow.Cells.Add("Item")
            		Next
            		
            		Do
            			Dim MyPage As Page = New Page
            			MyDocument.Pages.Add(MyPage)
            			MyPage.Elements.Add(MyTable)
            			MyTable = MyTable.GetOverflowRows(50, 50, 200, 350)
            		Loop While Not (MyTable Is Nothing)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		Table table = new Table( 0, 0, 200, 700 );
            
            		table.Columns.Add( 100 );
            		table.Columns.Add( 100 );
            
            		// This loop populates the table 
            		for ( int i = 1; i &lt;= 400; i++ )
            		{
            			Row row = table.Rows.Add( 20 );
            			row.Cells.Add( "Row #" + i );
            			row.Cells.Add( "Item" );
            		}
            
            		do
            		{
            			Page page = new Page();
            			document.Pages.Add( page );
            			page.Elements.Add( table );
            			table = table.GetOverflowRows( 50, 50, 200, 350 );
            		} while ( table != null );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetVisibleWidth">
            <summary>
            Returns the width of the table that will be seen on the page.
            </summary>
            <returns>The width of all visible text of the table. </returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetVisibleHeight">
            <summary>
            Returns the height of the table that will be seen on the page.
            </summary>
            <returns>The height of all visible text of the table.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetRequiredWidth">
            <summary>
            Returns the width required to horizontally fit the entire table on the page.
            </summary>
            <returns>The width to fit the entire table on the page horizontally.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetRequiredHeight">
            <summary>
            Returns the height required to vertically fit the entire table on the page.
            </summary>
            <returns>The height to fit the entire table on the page vertically.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.HasOverflowRows">
            <summary>
            Returns a value indicating if there are rows remaining that will not be drawn to the table.
            </summary>
            <returns>Value indication whether or not overflow rows exists.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.HasOverflowColumns">
            <summary>
            Returns a value indicating if there are columns remaining that will not be drawn to the table.
            </summary>
            <returns>Value indication whether or not overflow columns exists.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetVisibleRowCount">
            <summary>
            Returns the number of rows that will be displayed in the current table.
            </summary>
            <returns>The number are rows that will display.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.GetVisibleColumnCount">
            <summary>
            Returns the number of columns that will be displayed in the current table.
            </summary>
            <returns>The number are columns that will display.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.Table.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the table to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the table's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.X">
            <summary>
            Gets or sets the x coordinate of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Y">
            <summary>
            Gets or sets the y coordinate of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Width">
            <summary>
            Gets or sets the width of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Height">
            <summary>
            Gets or sets the height of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Table.Font"/> object to use for the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.FontSize">
            <summary>
            Gets or sets the font size of the text in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.BackgroundColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the background of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration to use for the horizontal alignment of the text in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.Table.VAlign"/> enumeration to use for the vertical alignment of the text in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.BorderWidth">
            <summary>
            Gets or sets the width of the border on the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.BorderColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the borders of the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Padding">
            <summary>
            Gets or sets the padding of the cells in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.RepeatRowHeaders">
            <summary>
            Gets or sets a value specifying whether the first column of the table should also be drawn as the first column on all subsequent column overflow tables.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.RepeatColumnHeaders">
            <summary>
            Gets or sets a value specifying whether the first row of the table should also be drawn as the first row on all subsequent row overflow tables.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Rows">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.RowList"/> object contained in the table.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.Table.Columns">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.PageElements.ColumnList"/> object contained in the table.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TableException">
            <summary>
            The exception that is thrown for a Table page element error.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TableException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TextArea">
            <summary>
            Represents an area of text.
            </summary>
            <remarks>This class can be used to place text on a page.  Using the methods GetOverflowText or GetOverflowTextArea and HasOverflowText, 
            users can control the pagination of TextAreas that come from a source of unknown length.</remarks>
            <example>The following example will display text on the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a text area
            		Dim MyTextArea As TextArea = New TextArea("This is the " + _
            			"underlined text of a TextArea", 100, 100, 400, 30, _
            			ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18)
            
            		' Change the underline property to true
            		MyTextArea.Underline = True
            
            		' Add the text to the page
            		MyPage.Elements.Add(MyTextArea)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Create a text area
            		TextArea textArea = new TextArea( "This is the underlined " +
            			"text of a TextArea", 100, 100, 400, 30, 
            			ceTe.DynamicPDF.Font.HelveticaBoldOblique, 18 );
            
            		// Change the underline property to true
            		textArea.Underline = true;
            
            		// Add the text area to the page
            		page.Elements.Add( textArea );	
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
            <param name="fontSize">Font size of the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
            <param name="fontSize">Font size of the text of the text area.</param>
            <param name="align">Alignment of the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
            <param name="fontSize">Font size of the text of the text area.</param>
            <param name="textColor">Color of the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TextArea"/> class.
            </summary>
            <param name="text">Text to display in the text area.</param>
            <param name="x">X coordinate of the text area.</param>
            <param name="y">Y coordinate of the text area.</param>
            <param name="width">Width of the text area.</param>
            <param name="height">Height of the text area.</param>
            <param name="font">Font for the text of the text area.</param>
            <param name="fontSize">Font size of the text of the text area.</param>
            <param name="align">Alignment of the text of the text area.</param>
            <param name="textColor">Color of the text of the text area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.DrawRotated(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the text area to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the text area's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetRequiredHeight">
            <summary>
            Returns the height required to fit all of the text supplied.
            </summary>
            <returns>The required height to display all text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetTextHeight">
            <summary>
            Returns the height of the text that will be drawn.
            </summary>
            <returns>The height of visible text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetOverflowText">
            <summary>
            Returns the text remaining that will be clipped by the text area.
            </summary>
            <returns>The overflow text as a <b>string</b>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetOverflowTextArea">
            <summary>
            Returns a <b>TextArea</b> object containing the overflow text.
            </summary>
            <returns>Returns a <b>TextArea</b> object.</returns>
            <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
            <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a string and assign it to text of variable length
            		Dim myVariableText As String = ""
            		Dim i As Integer
            		For i = 0 To 50
            			myVariableText &amp;= "This is a sentence that I will use as my variable length text.  "
            		Next
            		' Create a text area
            		Dim MyTextArea As TextArea = New TextArea(myVariableText, 0, 0, 250, 200)
            		Do
            			' Create a new page
            			Dim MyPage As Page = New Page
            
            			' Add the text area to the page;
            			MyPage.Elements.Add(MyTextArea)
            
            			' Add the page to the document
            			MyDocument.Pages.Add(MyPage)
            
            			' Set the text area object equal to the rest of the text that did not fit
            			' if all the text fit this will set textArea to null
            			MyTextArea = MyTextArea.GetOverflowTextArea()
            		Loop While Not MyTextArea Is Nothing
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf") 
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a string and assign it to text of variable length
            		string variableText = "";
            		for( int i = 0; i &lt; 50; i++ )
            			variableText += "This is a sentence that I will use as my variable length text.  ";
            
            		// Create a text area
            		TextArea textArea = new TextArea( variableText, 0, 0, 250, 200 ); 
            	
            		do
            		{
            			// Create a new page
            			Page page = new Page();
            
            			// Add the text area to the page;
            			page.Elements.Add( textArea );
            
            			// Add the page to the document
            			document.Pages.Add( page );
            
            			// Set the text area object equal to the rest of the text that did not fit
            			// if all the text did fit, GetOverflowTextArea will return null
            			textArea = textArea.GetOverflowTextArea();
            		} while( textArea != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetOverflowTextArea(System.Single,System.Single)">
            <summary>
            Returns a <b>TextArea</b> object containing the overflow text.
            </summary>
            <param name="x">X coordinate of the new text area.</param>
            <param name="y">Y coordinate of the new text area.</param>
            <returns>Returns a <b>TextArea</b> object.</returns>
            <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
            <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a string and assign it to text of variable length
            		Dim myVariableText As String = ""
            		Dim i As Integer
            		For i = 0 To 50
            			myVariableText &amp;= "This is a sentence that I will use as my variable length text.  "
            		Next
            		' Create a text area
            		Dim MyTextArea As TextArea = New TextArea(myVariableText, 0, 0, 250, 200)
            		Do
            			' Create a new page
            			Dim MyPage As Page = New Page
            
            			' Add the text area to the page;
            			MyPage.Elements.Add(MyTextArea)
            
            			' Add the page to the document
            			MyDocument.Pages.Add(MyPage)
            
            			' Set the text area object equal to the rest of the text that did not fit
            			' if all the text fit this will set textArea to null
            			MyTextArea = MyTextArea.GetOverflowTextArea(50, 50)
            		Loop While Not MyTextArea Is Nothing
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf") 
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a string and assign it to text of variable length
            		string variableText = "";
            		for( int i = 0; i &lt; 50; i++ )
            			variableText += "This is a sentence that I will use as my variable length text.  ";
            
            		// Create a text area
            		TextArea textArea = new TextArea( variableText, 0, 0, 250, 200 ); 
            	
            		do
            		{
            			// Create a new page
            			Page page = new Page();
            
            			// Add the text area to the page;
            			page.Elements.Add( textArea );
            
            			// Add the page to the document
            			document.Pages.Add( page );
            
            			// Set the text area object equal to the rest of the text that did not fit
            			// if all the text did fit, GetOverflowTextArea will return null
            			textArea = textArea.GetOverflowTextArea( 50, 50 );
            		} while( textArea != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.GetOverflowTextArea(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a <b>TextArea</b> object containing the overflow text.
            </summary>
            <param name="x">X coordinate of the new text area.</param>
            <param name="y">Y coordinate of the new text area.</param>
            <param name="width">Width of the new text area.</param>
            <param name="height">Height of the new text area.</param>
            <returns>Returns a <b>TextArea</b> object.</returns>
            <remarks>This method returns a new <b>TextArea</b> object that contains the remaining text that did not fit.</remarks>
            <example>The following example shows you how to use the GetOverflowTextArea object to allow text of variable length to flow onto new pages as needed.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a string and assign it to text of variable length
            		Dim myVariableText As String = ""
            		Dim i As Integer
            		For i = 0 To 50
            			myVariableText &amp;= "This is a sentence that I will use as my variable length text.  "
            		Next
            		' Create a text area
            		Dim MyTextArea As TextArea = New TextArea(myVariableText, 0, 0, 250, 200)
            		Do
            			' Create a new page
            			Dim MyPage As Page = New Page
            
            			' Add the text area to the page;
            			MyPage.Elements.Add(MyTextArea)
            
            			' Add the page to the document
            			MyDocument.Pages.Add(MyPage)
            
            			' Set the text area object equal to the rest of the text that did not fit
            			' if all the text fit this will set textArea to null
            			MyTextArea = MyTextArea.GetOverflowTextArea(50, 50, 150, 100)
            		Loop While Not MyTextArea Is Nothing
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf") 
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a string and assign it to text of variable length
            		string variableText = "";
            		for( int i = 0; i &lt; 50; i++ )
            			variableText += "This is a sentence that I will use as my variable length text.  ";
            
            		// Create a text area
            		TextArea textArea = new TextArea( variableText, 0, 0, 250, 200 ); 
            	
            		do
            		{
            			// Create a new page
            			Page page = new Page();
            
            			// Add the text area to the page;
            			page.Elements.Add( textArea );
            
            			// Add the page to the document
            			document.Pages.Add( page );
            
            			// Set the text area object equal to the rest of the text that did not fit
            			// if all the text did fit, GetOverflowTextArea will return null
            			textArea = textArea.GetOverflowTextArea( 50, 50, 150, 100 );
            		} while( textArea != null );
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TextArea.HasOverflowText">
            <summary>
            Returns a value indicating if there is text remaining that will not be drawn to the text area.
            </summary>
            <returns>Value indication whether or not overflow text exists.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Align">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.TextAlign"/> enumeration that specifies the text alignment of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.VAlign">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.VAlign"/> enumeration that specifies the vertical text alignment of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Underline">
            <summary>
            Gets or sets a value indicating if the text area is underlined.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.RightToLeft">
            <summary>
            Gets or sets a value indicating if text should be displayed right to left.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Text">
            <summary>
            Gets or sets the text of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.TextColor">
            <summary>
            Gets or sets the <see cref="T:ceTe.DynamicPDF.Color"/> object to use for the text of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Font">
            <summary>
            Gets or sets the <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.Font"/> object used to specify the font of the text for the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.FontSize">
            <summary>
            Gets or sets the font size for the text of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Leading">
            <summary>
            Gets or sets the leading for the text of the text area.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.AutoLeading">
            <summary>
            Gets or sets whether the leading of the text area should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.PageElements.TextArea.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing for the paragraphs of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indenting for the paragraphs of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.CleanParagraphBreaks">
            <summary>
            Gets or sets the clean paragraph breaks for the paragraphs of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Width">
            <summary>
            Gets or sets the width of the text area.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TextArea.Height">
            <summary>
            Overridden. Gets or sets the height or the label.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TransformationGroup">
            <summary>
            Represents a group of page elements to transform.
            </summary>
            <remarks>This class can be used to transform entire groups of page elements. Any page element that is placed in this group
            will be displayed with the transformation values and attributes of this group.</remarks>
            <example>The following example will display an image and some text that has been rotated and horizontally scaled as a group.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a transformation group and add a rectangle and a label to it
            		Dim MyGroup As TransformationGroup = New TransformationGroup(100, 100, _
            			200, 200, 30)
            		MyGroup.Add(New Rectangle(0, 0, 75, 75, Color.Blue, Apply.Fill))
            		MyGroup.Add(New Label("This text is inside a TransformationGroup.", 0, _
            			100, 300, 12))
            
            		' Vertically scale the group
            		MyGroup.ScaleY = 2
            
            		' Add the transformation group to the page
            		MyPage.Elements.Add(MyGroup)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module	
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a transformation group and add a rectangle and label to it
            		TransformationGroup group = new TransformationGroup( 100, 100, 200, 
            			200, 30 );
            		group.Add( new Rectangle( 0, 0, 75, 75, Color.Blue, Apply.Fill ) );
            		group.Add( new Label( "This text is inside a TransformationGroup.", 
            			0, 100, 300, 12 ) );
            
            		// Vertically scale the group
            		group.ScaleY = 2;
            
            		// Add the transformation group to the page
            		page.Elements.Add( group );
            
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransformationGroup.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TransformationGroup"/> class.
            </summary>
            <param name="x">X coordinate of the transformation group.</param>
            <param name="y">Y coordinate of the transformation group.</param>
            <param name="width">Width of the transformation group.</param>
            <param name="height">Height of the transformation group.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransformationGroup.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TransformationGroup"/> class.
            </summary>
            <param name="x">X coordinate of the transformation group.</param>
            <param name="y">Y coordinate of the transformation group.</param>
            <param name="width">Width of the transformation group.</param>
            <param name="height">Height of the transformation group.</param>
            <param name="angle">Angle of the transformation group in degrees.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransformationGroup.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the transformation group to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the transformation group's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.Angle">
            <summary>
            Gets or sets the Angle of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.ScaleX">
            <summary>
            Gets or sets the X scale of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.ScaleY">
            <summary>
            Gets or sets the Y scale of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.X">
            <summary>
            Gets or sets the X coordinate of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.Y">
            <summary>
            Gets or sets the Y coordinate of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.Width">
            <summary>
            Gets or sets the width of the transformation group.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransformationGroup.Height">
            <summary>
            Gets or sets the height of the transformation group.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageElements.TransparencyGroup">
            <summary>
            Represents a group of page elements that will have transparency.
            </summary>
            <remarks>This class can be used to add transparency to page elements. Any page element that is placed in this group
            will be displayed with the transparency values and attributes of this group.</remarks>
            <example>The following example will display text with a transparent rectangle over it.
            The text will be visible beneath the rectangle.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a transparency group and add a rectangle to it
            		Dim MyGroup As TransparencyGroup = New TransparencyGroup(0.5F)
            		MyGroup.Add(New Rectangle(50, 0, 100, 100, Color.Red, Apply.Fill))
            
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("This text is beneath the rectangle.", _
            			 0, 0, 200, 12))
            
            		'Add the transparency group to the page
            		MyPage.Elements.Add(MyGroup)
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a transparency group and add a rectangle to it
            		TransparencyGroup group = new TransparencyGroup( 0.5f );
            		group.Add( new Rectangle( 50, 0, 100, 100, Color.Red, Apply.Fill ) );
            
            		// Add a label to the page
            		page.Elements.Add( new Label( "This text is beneath the rectangle.", 
            			0, 0, 200, 12 ) );
            
            		// Add the transparency group to the page
            		page.Elements.Add( group );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransparencyGroup.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TransparencyGroup"/> class.
            </summary>
            <param name="alpha">Amount of transparency the group will have.</param>
            <remarks>An alpha value of 0 represents full transparency meaning the page elements will not be visible. An alpha value of 1
            means the page elements will have no transparency.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransparencyGroup.#ctor(System.Single,ceTe.DynamicPDF.BlendMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageElements.TransparencyGroup"/> class.
            </summary>
            <param name="alpha">Amount of transparency the group will have.</param>
            <param name="blendMode">Blend mode to use for the transparency group.</param>
            <remarks>An alpha value of 0 represents full transparency meaning the page elements will not be visible. An alpha value of 1
            means the page elements will have no transparency.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.PageElements.TransparencyGroup.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Overridden. Draws the transparency group to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the transparency group's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransparencyGroup.StrokeAlpha">
            <summary>
            Gets or sets the stroke alpha value. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransparencyGroup.FillAlpha">
            <summary>
            Gets or sets the fill alpha value. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransparencyGroup.BlendMode">
            <summary>
            Gets or sets the blend mode value. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageElements.TransparencyGroup.Transparency.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the transparency.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.BalticEncoder">
            <summary>
            Represents a Baltic encoder.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.SingleByteEncoder">
            <summary>
            Base class from which single byte encoders are derived.
            </summary>
            <remarks>See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETFontsAndTextTextEncodings.htm">Text Encodings</a> topic for more details on this.</remarks>
            <example>This example shows how to Change the encoding of a built in font.</example>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Text
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Create a core font with a specified encoding
            		Dim MyCentralEuropeHelveticaFont As Font = New Helvetica(Encoder.CentralEurope)
            		' Use the font in a text area Page Element
            		MyPage.Elements.Add(New TextArea("Text using the Central Europe encoder", 0, 0, 200, 12, MyCentralEuropeHelveticaFont, 12))
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Text;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Create a core font with a specified encoding
            		Font centralEuropeHelveticaFont = new Helvetica( Encoder.CentralEurope );
            		// Use the font in a text area Page Element
            		page.Elements.Add( new TextArea( "Text using the Central Europe encoder", 0, 0, 200, 12, centralEuropeHelveticaFont, 12 ) );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Encoder">
            <summary>
            Base class from which encoders are derived.
            </summary>
            <remarks>This class contains the static properties from which all encodings are accessed.  See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETFontsAndTextTextEncodings.htm">Text Encodings</a> topic for more details on this.</remarks>
            <example>This example shows how to Change the encoding of a built in font.</example>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.Text
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Create a core font with a specified encoding
            		Dim MyCentralEuropeHelveticaFont As Font = New Helvetica(Encoder.CentralEurope)
            		' Use the font in a text area Page Element
            		MyPage.Elements.Add(New TextArea("Text using the Central Europe encoder", 0, 0, 200, 12, MyCentralEuropeHelveticaFont, 12))
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.Text;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Create a core font with a specified encoding
            		Font centralEuropeHelveticaFont = new Helvetica( Encoder.CentralEurope );
            		// Use the font in a text area Page Element
            		page.Elements.Add( new TextArea( "Text using the Central Europe encoder", 0, 0, 200, 12, centralEuropeHelveticaFont, 12 ) );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Encoder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.Encoder"/> class.
            </summary>
            <param name="spaceIs0x20"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Encoder.Encode(ceTe.DynamicPDF.IO.FontSubsetter,System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Abstract. Encodes the specified text. 
            </summary>
            <param name="subsetter"><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> to use while encoding the text.</param>
            <param name="text">Text array to use for the encoding.</param>
            <param name="start">Start index in the text array.</param>
            <param name="length">Length of text to encode.</param>
            <param name="rightToLeft">Specifies if the text should be encoded right to left.</param>
            <returns>The encoded text as a byte array.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Encoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Abstract. Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.SpaceIs0x20">
            <summary>
            Gets a value indicating if the encoder uses a single byte 0x20 value for spaces.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.CentralEurope">
            <summary>
            Gets the central Europe encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Latin1">
            <summary>
            Gets the Latin 1 encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Turkish">
            <summary>
            Gets the Turkish encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Baltic">
            <summary>
            Gets the Baltic encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Latin2">
            <summary>
            Gets the Latin 2 (WINANSI) encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Latin9">
            <summary>
            Gets the Latin 9 encoder.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Encoder.Unicode">
            <summary>
            Gets the Unicode encoder.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncoder.Encode(System.Char)">
            <summary>
            Encodes a single character.
            </summary>
            <param name="character">Character to encode.</param>
            <returns>The encoded character.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncoder.Decode(System.Byte)">
            <summary>
            Decodes a single character.
            </summary>
            <param name="character">The character to decode.</param>
            <returns>The decoded character.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncoder.Encode(ceTe.DynamicPDF.IO.FontSubsetter,System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Overridden. Encodes the specified text. 
            </summary>
            <param name="subsetter"><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> to use while encoding the text.</param>
            <param name="text">Text array to use for the encoding.</param>
            <param name="start">Start index in the text array.</param>
            <param name="length">Length of text to encode.</param>
            <param name="rightToLeft">Specifies if the text should be encoded right to left.</param>
            <returns>The encoded text as a byte array.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SingleByteEncoder.IsBuiltInEncoding">
            <summary>
            Gets a value specifying if the encoding is built-in to PDF.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.BalticEncoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CentralEuropeEncoder">
            <summary>
            Represents a Central Europe encoder.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CentralEuropeEncoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CoreLatinFont">
            <summary>
            Represents a core latin font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Font">
            <summary>
            Base class from which all fonts are derived.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.#ctor(ceTe.DynamicPDF.Text.Encoder,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Font"/> class.
            </summary>
            <param name="encoder">Specifies the encoder for the font.</param>
            <param name="uid">Specifies the unique id for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.#ctor(ceTe.DynamicPDF.Text.Encoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Font"/> class.
            </summary>
            <param name="encoder">Specifies the encoder for the font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetGlyphWidth(System.Char)">
            <summary>
            Abstract. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetTextLines(System.Char[],System.Single,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given character array.
            </summary>
            <param name="text">Character array containing the text.</param>
            <param name="width">Width to use when calculating the text lines.</param>
            <param name="height">Height to use when calculating the text lines.</param>
            <param name="fontSize">Font size to use when calculating the text lines.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetTextLines(System.Char[],System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given character array.
            </summary>
            <param name="text">Character array containing the text.</param>
            <param name="width">Width to use when calculating the text lines.</param>
            <param name="fontSize">Font size to use when calculating the text lines.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetTextWidth(System.Char[],System.Single)">
            <summary>
            Returns the width of the given text.
            </summary>
            <param name="text">Byte array or text whose width is returned.</param>
            <param name="fontSize">Font size of text.</param>
            <returns>Width of text in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetTextWidth(System.String,System.Single)">
            <summary>
            Returns the width of the given text.
            </summary>
            <param name="text">Text whose width is returned.</param>
            <param name="fontSize">Font size of text.</param>
            <returns>Width of text in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetDescender(System.Single)">
            <summary>
            Returns the descender of the font in points for the given font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <returns>The descender in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetAscender(System.Single)">
            <summary>
            Returns the ascender of the font in points for the given font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <returns>The ascender in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetLineGap(System.Single)">
            <summary>
            Returns the line gap of the font in points for the given font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <returns>The line gap in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetDefaultLeading(System.Single)">
            <summary>
            Returns the default leading of the font in points for the given font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <returns>The default leading in points.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Font.GetBaseLine(System.Single,System.Single)">
            <summary>
            Returns the baseline of the font in points for the given leading and font size.
            </summary>
            <param name="fontSize">Font size to use for the calculation.</param>
            <param name="leading">Leading to use for the calculation.</param>
            <returns>The baseline in points.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Descender">
            <summary>
            Abstract. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Ascender">
            <summary>
            Abstract. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.LineGap">
            <summary>
            Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.LineBreaker">
            <summary>
            Abstract. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Encoder">
            <summary>
            Gets the encoder for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Name">
            <summary>
            Abstract. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.TimesRoman">
            <summary>
            Gets the Times Roman core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.TimesBold">
            <summary>
            Gets the Times Bold core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.TimesItalic">
            <summary>
            Gets the Times Italic core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.TimesBoldItalic">
            <summary>
            Gets the Times Bold Italic core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Helvetica">
            <summary>
            Gets the Helvetica core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HelveticaBold">
            <summary>
            Gets the Helvetica Bold core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HelveticaOblique">
            <summary>
            Gets the Helvetica Oblique core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HelveticaBoldOblique">
            <summary>
            Gets the Helvetica Bold Oblique core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Courier">
            <summary>
            Gets the Courier core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.CourierBold">
            <summary>
            Gets the Courier Bold core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.CourierOblique">
            <summary>
            Gets the Courier Oblique core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.CourierBoldOblique">
            <summary>
            Gets the Courier Bold Oblique core font with Latin 1 encoding.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.Symbol">
            <summary>
            Gets the Symbol core font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.ZapfDingbats">
            <summary>
            Gets the Zapf Dingbats core font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HeiseiKakuGothicW5">
            <summary>
            Gets the Heisei Kaku Gothic W5 Japanese font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HeiseiMinchoW3">
            <summary>
            Gets the Heisei Mincho W3 Japanese font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HanyangSystemsGothicMedium">
            <summary>
            Gets the Hanyang Systems Gothic Medium Korean font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.HanyangSystemsShinMyeongJoMedium">
            <summary>
            Gets the Hanyang Systems Shin MyeongJo Medium Korean font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.MonotypeHeiMedium">
            <summary>
            Gets the Monotype Hei Medium Chinese (traditional) font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.MonotypeSungLight">
            <summary>
            Gets the Monotype Sung Light Chinese (traditional) font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Font.SinoTypeSongLight">
            <summary>
            Gets the SinoType Song Light Chinese (simplified) font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CoreLatinFont.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the core font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CoreLatinFont.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.LineGap">
            <summary>
            Overridden. Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the core Latin font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.SingleByteEncoder">
            <summary>
            Gets the single byte encoder for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.CoreLatinFont.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Courier">
            <summary>
            Represents the core PDF Courier font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Courier.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.Courier"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CourierBold">
            <summary>
            Represents the core PDF Courier Bold font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CourierBold.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.CourierBold"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CourierBoldOblique">
            <summary>
            Represents the core PDF Courier Bold Oblique font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CourierBoldOblique.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.CourierBoldOblique"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.CourierOblique">
            <summary>
            Represents the core PDF Courier Oblique font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.CourierOblique.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.CourierOblique"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.FontFamilyList">
            <summary>
            Represents a collection of font families.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.FontFamilyList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.FontFamilyList"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.FontFamilyList.Add(ceTe.DynamicPDF.FontFamily)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.FontFamily"/> to the collection.
            </summary>
            <param name="fontFamily">The <see cref="T:ceTe.DynamicPDF.FontFamily"/> object to add.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.FontFamilyList.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.FontFamilyList.Count">
            <summary>
            Gets the total number of font families in the collection.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.FontFamilyList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.FontFamily"/> at the specified index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.FontFamilyList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ceTe.DynamicPDF.FontFamily"/> with the specified name.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HanyangSystemsGothicMedium">
            <summary>
            Represents the Asian Font Pack, Hanyang Systems Gothic Medium font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HanyangSystemsGothicMedium.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HanyangSystemsGothicMedium.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsGothicMedium.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsGothicMedium.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsGothicMedium.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Hanyang Systems Gothic Medium font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsGothicMedium.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsGothicMedium.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HanyangSystemsShinMyeongJoMedium">
            <summary>
            Represents the Asian Font Pack, Hanyang Systems Shin Myeong Jo Medium font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HanyangSystemsShinMyeongJoMedium.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HanyangSystemsShinMyeongJoMedium.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsShinMyeongJoMedium.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsShinMyeongJoMedium.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsShinMyeongJoMedium.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Hanyang Systems Shin Myeong Jo Medium font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsShinMyeongJoMedium.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HanyangSystemsShinMyeongJoMedium.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HeiseiKakuGothicW5">
            <summary>
            Represents the Asian Font Pack, Heisei Kaku Gothic W5 font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HeiseiKakuGothicW5.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HeiseiKakuGothicW5.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiKakuGothicW5.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiKakuGothicW5.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiKakuGothicW5.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Heisei Kaku Gothic W5 font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiKakuGothicW5.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiKakuGothicW5.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HeiseiMinchoW3">
            <summary>
            Represents the Asian Font Pack, Heisei Mincho W3 font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HeiseiMinchoW3.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HeiseiMinchoW3.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiMinchoW3.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiMinchoW3.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiMinchoW3.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Heisei Mincho W3 font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiMinchoW3.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.HeiseiMinchoW3.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Helvetica">
            <summary>
            Represents the core PDF Helvetica font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Helvetica.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.Helvetica"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HelveticaBold">
            <summary>
            Represents the core PDF Helvetica Bold font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaBold.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.HelveticaBold"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HelveticaBoldOblique">
            <summary>
            Represents the core PDF Helvetica Bold Oblique font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaBoldOblique.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.HelveticaBoldOblique"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.HelveticaOblique">
            <summary>
            Represents the core PDF Helvetica Oblique font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.HelveticaOblique.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.HelveticaOblique"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.IFontSubsettable">
            <summary>
            Represents a contract implemented by subsettable fonts.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.IFontSubsettable.GetFontSubsetter">
            <summary>
            Returns a font subsetter for the font.
            </summary>
            <returns><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> object to use for the font.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Latin1Encoder">
            <summary>
            Represents a Latin 1 encoder.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Latin1Encoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Latin2Encoder">
            <summary>
            Represents a Latin 2 encoder.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Latin2Encoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Latin9Encoder">
            <summary>
            Represents a Latin 9 encoder.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Latin9Encoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.LatinLineBreaker">
            <summary>
            Represents a Latin line breaker.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.LineBreaker">
            <summary>
            Represents a line breaker for text.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LineBreaker.GetLines(System.Char[],System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LineBreaker.GetLines(System.Char[],System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LineBreaker.GetLines(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Abstract. Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LineBreaker.GetLines(System.Char[],System.Int32,System.Int32,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.LineBreaker.Latin">
            <summary>
            Gets the Latin line breaker.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.LineBreaker.Universal">
            <summary>
            Gets the universal line breaker.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.LineBreaker.Default">
            <summary>
            Gets or sets the default line breaker.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinLineBreaker.GetLines(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Overridden. Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines for Latin text.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.LatinTextLineList">
            <summary>
            Represents a Latin text line list.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TextLineList">
            <summary>
            Represents a list of text lines.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.#ctor(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> class.
            </summary>
            <param name="text">Text of the text line list.</param>
            <param name="start">Start index of the text for the text line list.</param>
            <param name="length">Length of the text for the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for text of the text line list.</param>
            <param name="fontSize">Font size to use for text of the text line list.</param>
            <param name="initialLineIsNewParagraph">Specifies if the first line of the text line list is a new paragraph.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.#ctor(System.Int32,System.Single,System.Single,System.Boolean,ceTe.DynamicPDF.Text.TextLineList)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> class.
            </summary>
            <param name="start">Start index of the text for the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="initialLineIsNewParagraph">Specifies if the first line of the text line list is a new paragraph.</param>
            <param name="textLineList">Previous text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.SetLines(System.Boolean)">
            <summary>
            Sets the lines of the line list.
            </summary>
            <param name="setAllLines">Specifies if all lines should be set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.CalculateLines(ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode)">
            <summary>
            Abstract. Calculates the lines of the text line list.
            </summary>
            <param name="mode">Mode to use for the calculation.</param>
            <returns>A value indicating if all the lines were calculated.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.InitializeLines(System.Boolean)">
            <summary>
            Abstract. Initializes the text line list.
            </summary>
            <param name="newParagraph"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetOverflow(System.Single,System.Single)">
            <summary>
            Returns an overflow <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/>.
            </summary>
            <param name="width">Width of the overflow text line list.</param>
            <param name="height">Height of the overflow text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the overflowed lines.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.HasOverflow">
            <summary>
            Returns a value indicating if the text line list has overflow lines.
            </summary>
            <returns>A value indicating if overflow lines exist.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetOverflowText">
            <summary>
            Returns the overflow text of the text line list.
            </summary>
            <returns>The overflow text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetText">
            <summary>
            returns the text of the text line list.
            </summary>
            <returns>Text of the text line list.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.SetText(System.String)">
            <summary>
            Sets the text of the text line list to a new value.
            </summary>
            <param name="text">Text to set as the text of the text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.Add(ceTe.DynamicPDF.Text.TextLine)">
            <summary>
            Add a text line to the text line list.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetRequiredHeight(System.Int32)">
            <summary>
            Returns the required height for the all the text to display.
            </summary>
            <param name="startLine">Start text line index.</param>
            <returns>The required height of the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetTextHeight(System.Int32,System.Int32)">
            <summary>
            Returns the height of the visible text.
            </summary>
            <param name="startLine">Start text line index.</param>
            <param name="lineCount">Number of lines to use for the calculation.</param>
            <returns>The height of the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetMaximunWidth">
            <summary>
            Get the maximum width of text in the line list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetTextHeight">
            <summary>
            Returns the height of the visible text.
            </summary>
            <returns>The height of the text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.GetLineCount(System.Int32,System.Single)">
            <summary>
            Returns the number of lines that will draw for the given height.
            </summary>
            <param name="startLine">Start text line index.</param>
            <param name="height">Height used for the calculation.</param>
            <returns>the number of lines that will be drawn.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.Draw(ceTe.DynamicPDF.IO.PageWriter,System.Single,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color,System.Boolean,System.Boolean)">
            <summary>
            Overridden. Draws the text line list to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the link's output.</param>
            <param name="x">X coordinate of the text.</param>
            <param name="y">Y coordinate of the text.</param>
            <param name="align">Alignment of the text.</param>
            <param name="textColor">Color of the text.</param>
            <param name="underline">Specifies if the text should be underlined.</param>
            <param name="rightToLeft">Specifies if the text should be drawn right to left.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLineList.Draw(ceTe.DynamicPDF.IO.PageWriter,System.Single,System.Single,ceTe.DynamicPDF.TextAlign,ceTe.DynamicPDF.Color,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Overridden. Draws the text line list to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the link's output.</param>
            <param name="x">X coordinate of the text.</param>
            <param name="y">Y coordinate of the text.</param>
            <param name="align">Alignment of the text.</param>
            <param name="textColor">Color of the text.</param>
            <param name="underline">Specifies if the text should be underlined.</param>
            <param name="startLine">Start line for the text.</param>
            <param name="lineCount">Number of lines to draw.</param>
            <param name="rightToLeft">Specifies if the text should be drawn right to left.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Start">
            <summary>
            Gets or sets the start index for text in the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.End">
            <summary>
            Gets or sets the ending index for text in the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.LineCount">
            <summary>
            Gets the line count of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.VisibleLineCount">
            <summary>
            Gets the number of lines that will be drawn. 
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.BaseLine">
            <summary>
            Gets the baseline value for the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Item(System.Int32)">
            <summary>
            Gets the text line at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.TextArray">
            <summary>
            Gets or sets the text of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Width">
            <summary>
            Gets or set the width of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.CleanParagraphBreaks">
            <summary>
            Gets or sets if the text line list should have clean paragraph breaks.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Height">
            <summary>
            Gets or sets the height of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Font">
            <summary>
            Gets or sets the font of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.FontSize">
            <summary>
            Gets or sets the font size of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Leading">
            <summary>
            Gets or sets the leading of the text line list.
            </summary>
            <remarks>Setting this property will automatically set the <see cref="P:ceTe.DynamicPDF.Text.TextLineList.AutoLeading"/> property to false.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.AutoLeading">
            <summary>
            Gets or sets whether the leading of the text line list should be calculated automatically.
            </summary>
            <remarks>This property is automatically set to false any time the <see cref="P:ceTe.DynamicPDF.Text.TextLineList.Leading"/> property is set.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.Count">
            <summary>
            Gets the number of lines in the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.ParagraphIndent">
            <summary>
            Gets or sets the paragraph indention of the text line list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLineList.ParagraphSpacing">
            <summary>
            Gets or sets the paragraph spacing of the text line list.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode">
            <summary>
            Specifies a line calculation mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode.OneLine">
            <summary>Calculate one line.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode.ToHeight">
            <summary>Calculate lines to the given height.</summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode.All">
            <summary>Calculate all lines.</summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.#ctor(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.LatinTextLineList"/> class.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.GetOverflowText">
            <summary>
            Overridden. Returns the overflow text of the text line list.
            </summary>
            <returns>Overflow text of the line list.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.HasOverflow">
            <summary>
            Returns a value indicating if the text line list has overflow lines.
            </summary>
            <returns>A value indicating if the line list has overflow text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.GetOverflow(System.Single,System.Single)">
            <summary>
            Returns the overflow lines for the text line list.
            </summary>
            <param name="width">Width of the returned text line list.</param>
            <param name="height">Height of the returned text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the overflow lines.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.InitializeLines(System.Boolean)">
            <summary>
            Initializes the text line list.
            </summary>
            <param name="newParagraph">Specifies if the first line in the list is a new paragraph.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.LatinTextLineList.CalculateLines(ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode)">
            <summary>
            Calculates the lines.
            </summary>
            <param name="mode">Line calculation mode to use.</param>
            <returns>A value indicating if all the lines were calculated.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.MonotypeHeiMedium">
            <summary>
            Represents the Asian Font Pack, Monotype Hei Medium font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.MonotypeHeiMedium.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.MonotypeHeiMedium.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeHeiMedium.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeHeiMedium.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeHeiMedium.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Monotype Hei Medium font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeHeiMedium.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeHeiMedium.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.MonotypeSungLight">
            <summary>
            Represents the Asian Font Pack, Monotype Sung Light font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.MonotypeSungLight.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.MonotypeSungLight.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeSungLight.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeSungLight.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeSungLight.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Monotype Sung Light font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeSungLight.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.MonotypeSungLight.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.SingleByteEncodingResource">
            <summary>
            Represents a single byte encoding resource.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncodingResource.#ctor(System.Int64,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.SingleByteEncodingResource"/> font class.
            </summary>
            <param name="uid">The unique ID of the encoder.</param>
            <param name="data">Byte array containing the encoders output steam.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SingleByteEncodingResource.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the encoder to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the encoder's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SingleByteEncodingResource.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the single byte encoding.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.SinoTypeSongLight">
            <summary>
            Represents the Asian Font Pack, Sino Type Song Light font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SinoTypeSongLight.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.SinoTypeSongLight.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Sino Type Song Light font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.SinoTypeSongLight.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Symbol">
            <summary>
            Represents the core PDF Symbol font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Symbol.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the core font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Symbol.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.LineGap">
            <summary>
            Overridden. Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Symbol font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Symbol.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TextLine">
            <summary>
            Represents a line of text.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLine.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TextLine"/> class.
            </summary>
            <param name="start">Start index for the text.</param>
            <param name="length">Length of the text.</param>
            <param name="mWidth">MWidth of the text.</param>
            <param name="yOffset">Y offset for the line.</param>
            <param name="spaceCount">Number of spaces in the line.</param>
            <param name="newParagraph">Specifies if the line begins a paragraph.</param>
            <param name="hardReturn">Specifies if the line ends with a hard return.</param>
            <param name="hyphenate">Specifies if the line ends with a hyphenation.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TextLine.GetWidth(System.Single)">
            <summary>
            Returns the width of the line's text in points.
            </summary>
            <param name="fontSize">Font size to use for the width.</param>
            <returns>the width of the lines text.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.Start">
            <summary>
            Gets or sets the start index of the lines text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.Length">
            <summary>
            Gets or sets the length of the lines text.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.HardReturn">
            <summary>
            Gets or sets a value indicating if the line ends with a hard return.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.NewParagraph">
            <summary>
            Gets or sets a value indicating if the line begins a paragraph.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.Hyphenate">
            <summary>
            Gets or sets a value indicating if the line is to be hyphenated.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.SpaceCount">
            <summary>
            Gets or sets the space count for the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.MWidth">
            <summary>
            Gets or sets the mwidth of the line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TextLine.YOffset">
            <summary>
            Gets or sets the y offset of the line.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TimesBold">
            <summary>
            Represents the core PDF Times Bold font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesBold.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TimesBold"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TimesBoldItalic">
            <summary>
            Represents the core PDF Times Bold Italic font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesBoldItalic.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TimesBoldItalic"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TimesItalic">
            <summary>
            Represents the core PDF Times Italic font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesItalic.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TimesItalic"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TimesRoman">
            <summary>
            Represents the core PDF Times Roman font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TimesRoman.#ctor(ceTe.DynamicPDF.Text.SingleByteEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TimesRoman"/> font class.
            </summary>
            <param name="encoder">Single byte encoding to use for the font.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TrueTypeFont">
            <summary>
            Represents a TrueType font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TrueTypeFont"/> class.
            </summary>
            <param name="filePath">Physical file path to the TrueType font file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.#ctor(System.String,ceTe.DynamicPDF.Text.LineBreaker)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.TrueTypeFont"/> class.
            </summary>
            <param name="filePath">Physical file path to the TrueType font file.</param>
            <param name="lineBreaker">Line breaker to use for the TrueType font.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the TrueType font to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the TureType font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TrueTypeFont.GetFontSubsetter">
            <summary>
            Returns a font subsetter for the TrueType font.
            </summary>
            <returns><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> object to use for the font.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the TrueType font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.LineGap">
            <summary>
            Overridden. Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.Name">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.TrueTypeFont.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.TurkishEncoder">
            <summary>
            Represents a Turkish encoder.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.TurkishEncoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.Type1Font">
            <summary>
            Represents a Type1Font font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Type1Font.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.Type1Font"/> class.
            </summary>
            <param name="metricsFile">Physical file path to the .PFM or .AFM font metrics file.</param>
            <param name="fontFile">Physical file path to the Type 1 (.PFB) font file.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Type1Font.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Returns the mwidth of a glyph.
            </summary>
            <param name="glyph">Glyph whose mwidth is to be returned.</param>
            <returns>Mwidth of glyph.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.Type1Font.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the Type 1 font to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the Type 1 font's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the type 1 font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.LineGap">
            <summary>
            Overridden. Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.Type1Font.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.UnicodeEncoder">
            <summary>
            Represents a Unicode encoder.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UnicodeEncoder.DrawEncoding(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the encoding to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the encoding's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UnicodeEncoder.Encode(ceTe.DynamicPDF.IO.FontSubsetter,System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Overridden. Encodes the specified text in Unicode. 
            </summary>
            <param name="subsetter"><see cref="T:ceTe.DynamicPDF.IO.FontSubsetter"/> to use while encoding the text.</param>
            <param name="text">Text array to use for the encoding.</param>
            <param name="start">Start index in the text array.</param>
            <param name="length">Length of text to encode.</param>
            <param name="rightToLeft">Specifies if the text should be encoded right to left.</param>
            <returns>The encoded text as a byte array.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.UniversalLineBreaker">
            <summary>
            Represents a universal line breaker.
            </summary>
            <remarks>This line breaker works well for both CJK and many other types of text.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalLineBreaker.GetLines(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Returns a <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> with the text broken into lines for Latin or CJK text.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> for the given text.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.UniversalTextLineList">
            <summary>
            Represents a universal text line list.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.#ctor(System.Char[],System.Int32,System.Int32,System.Single,System.Single,ceTe.DynamicPDF.Font,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Text.UniversalTextLineList"/> class.
            </summary>
            <param name="text">Text for the text line list.</param>
            <param name="start">Start index for the text of the text line list.</param>
            <param name="length">Length of the text of the text line list.</param>
            <param name="width">Width of the text line list.</param>
            <param name="height">Height of the text line list.</param>
            <param name="font">Font to use for the text of the text line list.</param>
            <param name="fontSize">Font size to use for the text of the text line list.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.GetOverflowText">
            <summary>
            Overridden. Returns the overflow text of the text line list.
            </summary>
            <returns>Overflow text of the line list.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.HasOverflow">
            <summary>
            Returns a value indicating if the text line list has overflow lines.
            </summary>
            <returns>A value indicating if the line list has overflow text.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.GetOverflow(System.Single,System.Single)">
            <summary>
            Returns the overflow lines for the text line list.
            </summary>
            <param name="width">Width of the returned text line list.</param>
            <param name="height">Height of the returned text line list.</param>
            <returns>A <see cref="T:ceTe.DynamicPDF.Text.TextLineList"/> containing the overflow lines.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.InitializeLines(System.Boolean)">
            <summary>
            Initializes the text line list.
            </summary>
            <param name="newParagraph">Specifies if the first line in the list is a new paragraph.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.UniversalTextLineList.CalculateLines(ceTe.DynamicPDF.Text.TextLineList.LineCalculationMode)">
            <summary>
            Calculates the lines.
            </summary>
            <param name="mode">Line calculation mode to use.</param>
            <returns>A value indicating if all the lines were calculated.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.Text.ZapfDingbats">
            <summary>
            Represents a Zapf Dingbats font.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.ZapfDingbats.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the font definition to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the core font's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Text.ZapfDingbats.GetGlyphWidth(System.Char)">
            <summary>
            Overridden. Return the mwidth of the glyph.
            </summary>
            <param name="glyph">Glyph to return the mwidth for.</param>
            <returns>The mwidth of the glyph.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.ZapfDingbats.Descender">
            <summary>
            Overridden. Gets the descender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.ZapfDingbats.Ascender">
            <summary>
            Overridden. Gets the ascender for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.ZapfDingbats.LineGap">
            <summary>
            Overridden. Gets the line gap for the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.ZapfDingbats.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the Zapf Dingbats font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.ZapfDingbats.Name">
            <summary>
            Overridden. Gets the name of the font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Text.ZapfDingbats.LineBreaker">
            <summary>
            Overridden. Gets the default line breaker for the font.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Action">
            <summary>
            Base class representing a destination or action.
            </summary>
            <remarks>Action's derived classes are: <see cref="T:ceTe.DynamicPDF.UrlAction"/>, <see cref="T:ceTe.DynamicPDF.XYDestination"/> and <see cref="T:ceTe.DynamicPDF.ZoomDestination"/>.
            Take a look a the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETOutlinesandBookmarks.htm">Outlines and Bookmarks</a> topic for examples that use these derived classes.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Action.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Action"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Action.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Abstract. Draws the action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the action's output.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.Annotation">
            <summary>
            Represents an annotation resource.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Annotation.#ctor(System.Single,System.Single,System.Single,System.Single,ceTe.DynamicPDF.PageElements.IAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Annotation"/> class.
            </summary>
            <param name="left">The left X coordinate of the annotation.</param>
            <param name="top">The top Y coordinate of the annotation.</param>
            <param name="right">The right X coordinate of the annotation.</param>
            <param name="bottom">The bottom Y coordinate of the annotation.</param>
            <param name="iAnnotation"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Annotation.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the annotation to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the annotation's output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.RequiredPdfObjects">
            <summary>
            Overridden. Gets the number of PDF objects required by the annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.Left">
            <summary>
            Gets or sets the left X coordinate of the annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.Right">
            <summary>
            Gets or sets the right X coordinate of the annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.Top">
            <summary>
            Gets or sets the top Y coordinate of the annotation.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Annotation.Bottom">
            <summary>
            Gets or sets the bottom Y coordinate of the annotation.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.AreaDimensions">
            <summary>
            Represents the dimensions of an area.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AreaDimensions.Edge">
            <summary>
            Represents the dimensions of the areas edge.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.AreaDimensions.Body">
            <summary>
            Represents the dimensions of the areas body.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.AreaDimensions.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.AreaDimensions"/> class.
            </summary>
            <param name="left">Left edge of the area.</param>
            <param name="top">Top edge of the area.</param>
            <param name="right">Right edge of the area.</param>
            <param name="bottom">Bottom edge of the area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AreaDimensions.#ctor(ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.AreaDimensions"/> class.
            </summary>
            <param name="edge">Edge dimensions of the area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AreaDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.AreaDimensions"/> class.
            </summary>
            <param name="edge">Edge dimensions of the area.</param>
            <param name="body">Body dimensions of the area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AreaDimensions.#ctor(ceTe.DynamicPDF.AreaDimensions,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.AreaDimensions"/> class.
            </summary>
            <param name="areaDimensions">Parent area dimentions.</param>
            <param name="x">X coordinate for area.</param>
            <param name="y">Y coordinate for area.</param>
            <param name="width">Width of area.</param>
            <param name="height">Height of area.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.AreaDimensions.GetPdfY(System.Single)">
            <summary>
            Gets the translated Y coordinate.
            </summary>
            <param name="y">Y coordinate to translate.</param>
            <returns>A translated Y coordinate.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.AreaDimensions.GetPdfX(System.Single)">
            <summary>
            Returns the translated X coordinate.
            </summary>
            <param name="x">X coordinate to translate.</param>
            <returns>A translated X coordinate.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.Width">
            <summary>
            Gets or sets the width of the page dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.Height">
            <summary>
            Gets or sets the height of the page dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.LeftMargin">
            <summary>
            Gets or sets the left margin of the page dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.TopMargin">
            <summary>
            Gets or sets the top margin of the page dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.RightMargin">
            <summary>
            Gets or sets the right margin of the page dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.AreaDimensions.BottomMargin">
            <summary>
            Gets or sets the bottom margin of the page dimensions.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.BlendMode">
            <summary>
            The type of blending to use.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Normal">
            <summary>
            Normal blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Multiply">
            <summary>
            Multiply blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Screen">
            <summary>
            Screen blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Overlay">
            <summary>
            Overlay blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Darken">
            <summary>
            Darken blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Lighten">
            <summary>
            Lighten blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.ColorDodge">
            <summary>
            Color Dodge blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.ColorBurn">
            <summary>
            Color Burn blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.HardLight">
            <summary>
            Hard Light blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.SoftLight">
            <summary>
            Soft Light blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Difference">
            <summary>
            Difference blending.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.BlendMode.Exclusion">
            <summary>
            Exclusion blending.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.CmykColor">
            <summary>
            Represents a CMYK color.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Color">
            <summary>
            Base class representing color.
            </summary>
            <remarks>Color's derived classes are: <see cref="T:ceTe.DynamicPDF.CmykColor"/>, <see cref="T:ceTe.DynamicPDF.Grayscale"/>, <see cref="T:ceTe.DynamicPDF.WebColor"/> and <see cref="T:ceTe.DynamicPDF.RgbColor"/></remarks>	
        </member>
        <member name="M:ceTe.DynamicPDF.Color.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Color"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.Equals(System.Object)">
            <summary>
            Abstract. Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.GetHashCode">
            <summary>
            Abstract. Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <b>Color</b>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Color.Draw(ceTe.DynamicPDF.IO.PageWriter,ceTe.DynamicPDF.Apply)">
            <summary>
            Abstract. Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> object to receive the color data.</param>
            <param name="apply">Defines how the color is applied.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Black">
            <summary>Gets the color black.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Silver">
            <summary>Gets the color silver.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkGray">
            <summary>Gets the color dark gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Gray">
            <summary>Gets the color gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DimGray">
            <summary>Gets the color dim gray. </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.White">
            <summary>Gets the color white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Red">
            <summary>Gets the color red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Green">
            <summary>Gets the color green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Lime">
            <summary>Gets the color lime.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Aqua">
            <summary>Gets the color aqua.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Purple">
            <summary>Gets the color purple.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Blue">
            <summary>Gets the color blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Cyan">
            <summary>Gets the color cyan. </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Magenta">
            <summary>Gets the color magenta.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Yellow">
            <summary>Gets the color yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.AliceBlue">
            <summary>Gets the color alice blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.AntiqueWhite">
            <summary>Gets the color antique white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Aquamarine">
            <summary>Gets the color aquamarine.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Azure">
            <summary>Gets the color azure.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Beige">
            <summary>Gets the color beige.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Bisque">
            <summary>Gets the color bisque.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.BlanchedAlmond">
            <summary>Gets the color blanched almond.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.BlueViolet">
            <summary>Gets the color blue violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Brown">
            <summary>Gets the color brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.BurlyWood">
            <summary>Gets the color burly wood.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.CadetBlue">
            <summary>Gets the color cadet blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Chartreuse">
            <summary>Gets the color chartreuse.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Chocolate">
            <summary>Gets the color chocolate.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Coral">
            <summary>Gets the color coral.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.CornflowerBlue">
            <summary>Gets the color cornflower blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Cornsilk">
            <summary>Gets the color cornsilk.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Crimson">
            <summary>Gets the color crimson.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkBlue">
            <summary>Gets the color dark blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkCyan">
            <summary>Gets the color dark cyan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkGoldenRod">
            <summary>Gets the color dark golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkGreen">
            <summary>Gets the color dark green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkKhaki">
            <summary>Gets the color dark khaki.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkMagenta">
            <summary>Gets the color dark magenta.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkOliveGreen">
            <summary>Gets the color dark olive green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Darkorange">
            <summary>Gets the color dark orange.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkOrchid">
            <summary>Gets the color dark orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkRed">
            <summary>Gets the color dark red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkSalmon">
            <summary>Gets the color dark salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkSeaGreen">
            <summary>Gets the color dark sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkSlateBlue">
            <summary>Gets the color dark slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkSlateGray">
            <summary>Gets the color dark slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkTurquoise">
            <summary>Gets the color dark turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DarkViolet">
            <summary>Gets the color dark violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DeepPink">
            <summary>Gets the color deep pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DeepSkyBlue">
            <summary>Gets the color deep sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.DodgerBlue">
            <summary>Gets the color dodger blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Feldspar">
            <summary>Gets the color feldspar.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.FireBrick">
            <summary>Gets the color fire brick.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.FloralWhite">
            <summary>Gets the color floral white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.ForestGreen">
            <summary>Gets the color forest green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Fuchsia">
            <summary>Gets the color fuchsia.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Gainsboro">
            <summary>Gets the color gainsboro.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.GhostWhite">
            <summary>Gets the color ghost white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Gold">
            <summary>Gets the color gold.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.GoldenRod">
            <summary>Gets the color golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.GreenYellow">
            <summary>Gets the color green yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.HoneyDew">
            <summary>Gets the color honey dew.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.HotPink">
            <summary>Gets the color hot pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.IndianRed">
            <summary>Gets the color indian red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Indigo">
            <summary>Gets the color indigo.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Ivory">
            <summary>Gets the color ivory.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Khaki">
            <summary>Gets the color khaki.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Lavender">
            <summary>Gets the color lavender.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LavenderBlush">
            <summary>Gets the color lavender blush.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LawnGreen">
            <summary>Gets the color lawn green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LemonChiffon">
            <summary>Gets the color lemon chiffon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightBlue">
            <summary>Gets the color light blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightCoral">
            <summary>Gets the color light coral.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightCyan">
            <summary>Gets the color light cyan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightGoldenRodYellow">
            <summary>Gets the color light golden rod yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightGrey">
            <summary>Gets the color light grey.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightGreen">
            <summary>Gets the color light green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightPink">
            <summary>Gets the color light pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightSalmon">
            <summary>Gets the color light salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightSeaGreen">
            <summary>Gets the color light sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightSkyBlue">
            <summary>Gets the color light sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightSlateBlue">
            <summary>Gets the color light slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightSlateGray">
            <summary>Gets the color light slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightSteelBlue">
            <summary>Gets the color light steel blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LightYellow">
            <summary>Gets the color light yellow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.LimeGreen">
            <summary>Gets the color lime green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Linen">
            <summary>Gets the color linen.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Maroon">
            <summary>Gets the color maroon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumAquaMarine">
            <summary>Gets the color medium aqua marine.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumBlue">
            <summary>Gets the color medium blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumOrchid">
            <summary>Gets the color medium orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumPurple">
            <summary>Gets the color medium purple.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumSeaGreen">
            <summary>Gets the color medium sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumSlateBlue">
            <summary>Gets the color medium slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumSpringGreen">
            <summary>Gets the color medium spring green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumTurquoise">
            <summary>Gets the color medium turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MediumVioletRed">
            <summary>Gets the color medium violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MidnightBlue">
            <summary>Gets the color midnight blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MintCream">
            <summary>Gets the color mint cream.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.MistyRose">
            <summary>Gets the color misty rose.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Moccasin">
            <summary>Gets the color moccasin.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.NavajoWhite">
            <summary>Gets the color navajo white.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Navy">
            <summary>Gets the color navy.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.OldLace">
            <summary>Gets the color old lace.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Olive">
            <summary>Gets the color olive.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.OliveDrab">
            <summary>Gets the color olive drab.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Orange">
            <summary>Gets the color orange.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.OrangeRed">
            <summary>Gets the color orange red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Orchid">
            <summary>Gets the color orchid.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.PaleGoldenRod">
            <summary>Gets the color pale golden rod.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.PaleGreen">
            <summary>Gets the color pale green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.PaleTurquoise">
            <summary>Gets the color pale turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.PaleVioletRed">
            <summary>Gets the color pale violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.PapayaWhip">
            <summary>Gets the color papaya whip.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.PeachPuff">
            <summary>Gets the color peach puff.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Peru">
            <summary>Gets the color peru.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Pink">
            <summary>Gets the color pink.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Plum">
            <summary>Gets the color plum.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.PowderBlue">
            <summary>Gets the color powder blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.RosyBrown">
            <summary>Gets the color rosy brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.RoyalBlue">
            <summary>Gets the color royal blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SaddleBrown">
            <summary>Gets the color saddle brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Salmon">
            <summary>Gets the color salmon.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SandyBrown">
            <summary>Gets the color sandy brown.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SeaGreen">
            <summary>Gets the color sea green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SeaShell">
            <summary>Gets the color sea shell.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Sienna">
            <summary>Gets the color sienna.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SkyBlue">
            <summary>Gets the color sky blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SlateBlue">
            <summary>Gets the color slate blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SlateGray">
            <summary>Gets the color slate gray.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Snow">
            <summary>Gets the color snow.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SpringGreen">
            <summary>Gets the color spring green.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.SteelBlue">
            <summary>Gets the color steel blue.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Tan">
            <summary>Gets the color tan.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Teal">
            <summary>Gets the color teal.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Thistle">
            <summary>Gets the color thistle.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Tomato">
            <summary>Gets the color tomato.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Turquoise">
            <summary>Gets the color turquoise.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Violet">
            <summary>Gets the color violet.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.VioletRed">
            <summary>Gets the color violet red.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.Wheat">
            <summary>Gets the color wheat.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.WhiteSmoke">
            <summary>Gets the color white smoke.</summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Color.YellowGreen">
            <summary>Gets the color yellow green.</summary>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.CmykColor"/> class.
            </summary>
            <param name="cyan">The cyan intensity.</param>
            <param name="magenta">The magenta intensity.</param>
            <param name="yellow">The yellow intensity.</param>
            <param name="black">The black intensity.</param>
            <remarks>Values must be between 0.0 and 1.0.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.CmykColor"/> class.
            </summary>
            <param name="cyan">The cyan intensity.</param>
            <param name="magenta">The magenta intensity.</param>
            <param name="yellow">The yellow intensity.</param>
            <param name="black">The black intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.Equals(System.Object)">
            <summary>
            Overridden. Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.GetHashCode">
            <summary>
            Overridden. Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ceTe.DynamicPDF.Color"/> object.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.CmykColor.Draw(ceTe.DynamicPDF.IO.PageWriter,ceTe.DynamicPDF.Apply)">
            <summary>
            Overridden. Draws the color data to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the color data.</param>
            <param name="apply">Defines how the color is applied.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.C">
            <summary>
            Gets or sets the cyan value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.M">
            <summary>
            Gets or sets the magenta value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.Y">
            <summary>
            Gets or sets the yellow value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.CmykColor.K">
            <summary>
            Gets or sets the black value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Destination">
            <summary>
            Base class from which destinations are derived.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Destination.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Destination"/> class.
            </summary>
            <param name="pageNumber">Page number targeted by the destination.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Destination.PageNumber">
            <summary>
            Gets or sets the page number targeted by the destination.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Dimensions">
            <summary>
            Represents the dimensions of a rectangle.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Dimensions"/> structure.
            </summary>
            <param name="size">The page size of the dimensions.</param>
            <param name="orientation">The orientation of the dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Dimensions"/> structure.
            </summary>
            <param name="width">The width of the dimensions.</param>
            <param name="height">the height of the dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Dimensions.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Dimensions"/> structure.
            </summary>
            <param name="left">The left edge of the dimensions.</param>
            <param name="top">The top edge of the dimensions.</param>
            <param name="right">The right edge of the dimensions.</param>
            <param name="bottom">The bottom edge of the dimensions.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Width">
            <summary>
            Gets or sets the width of the dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Height">
            <summary>
            Gets or sets the width of the dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Left">
            <summary>
            Gets or sets the left edge of the dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Top">
            <summary>
            Gets or sets the top edge of the dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Right">
            <summary>
            Gets or sets the right edge of the dimensions.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Dimensions.Bottom">
            <summary>
            Gets or sets the bottom edge of the dimensions.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Document">
            <summary>
            Represents a PDF Document.
            </summary>
            <remarks>
            This is the primary class used to generate the Dynamic PDF document. It
            represents a single PDF Document and is made up of Pages and Outlines.
            The document can have a <see cref="P:ceTe.DynamicPDF.Document.Security"/> object associated with it
            to control document security and encryption. The document can be output
            to any object derived from the <see cref="T:System.IO.Stream"/> class that
            supports writing and can easily be integrated with ASP.NET to stream the
            document to Internet Information Server's HTTP output stream.
            </remarks>
            <example>This example shows how to use the document in the creation of a simple PDF document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Document"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.SetProducer(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="producer"></param>
            <param name="value"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.SetProducer(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="producer"></param>
            <param name="value"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.AddLicense(System.String)">
            <summary>
            
            </summary>
            <param name="licenseKey"></param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Draw">
            <summary>
            Outputs the generated <b>Document</b> to a byte array.
            </summary>
            <example>This example shows how to output the PDF to a byte array.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Save the PDF document to a byte array
            		Private MyPdfData As Byte() = MyDocument.Draw()
            		
            	End Sub
            End Module
            
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
            		// Save the PDF document to a byte array
            		byte[] pdfData = document.Draw();
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Draw(System.String)">
            <summary>
            Outputs the generated <b>Document</b> to a file.
            </summary>
            <param name="filePath">File path to store the Document.</param>
            <example>This example shows how to output the PDF to a file.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Draw(System.IO.Stream)">
            <summary>
            Outputs the generated <b>Document</b> to the given <b>Stream</b> object.
            </summary>
            <param name="stream"><b>Stream</b> object that receive the <b>Document</b> output.</param>
            <example>This example shows how to output the document to a memory stream object.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports System.IO
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Create a memory stream object to save to
            		Dim outputStream As MemoryStream = New MemoryStream
            		
            		' Output the PDF to the MemoryStream
            		MyDocument.Draw(outputStream)
            		
            	End Sub
            End Module
            
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using System.IO;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            		
            		// Create a memory stream object to save to
            		MemoryStream outputStream = new MemoryStream();
            		
            		// Output the PDF to the MemoryStream
            		objDocument.Draw( outputStream );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.Web.UI.Page)">
            <summary>
            Outputs the generated <b>Document</b> to the given <b>Page</b> object.
            </summary>
            <param name="page"><b>Page</b> object that receive the <b>Document</b> output.</param>
            <example>This example shows how to output a PDF to the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Public Class MyClass
            	Inherits System.Web.UI.Page
            
            	Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Save the PDF document
            		MyDocument.DrawToWeb(Me)
            		
            	End Sub
            End Class
            	
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            public class MyClass : System.Web.UI.Page
            {
            	private void Page_Load(object sender, System.EventArgs e)
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
            		// Save the PDF document
            		document.DrawToWeb( this );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.Web.UI.Page,System.Boolean)">
            <summary>
            Outputs the generated <b>Document</b> to the given <b>Page</b> object.
            </summary>
            <param name="page"><b>Page</b> object that receive the Document output.</param>
            <param name="allowBrowserCaching">Specifies if the browser should be allowed to cache the <b>Document</b>.</param>
            <example>This example shows how to output a PDF to the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Public Class MyClass
            		Inherits System.Web.UI.Page
            
            		Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Save the PDF document
            		MyDocument.DrawToWeb(Me, True)
            		
            		End Sub
            	End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            public class MyClass : System.Web.UI.Page
            {
            		private void Page_Load(object sender, System.EventArgs e)
            		{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
            		// Save the PDF document
            		document.DrawToWeb( this, true );
            		}
            	}
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.Web.UI.Page,System.String)">
            <summary>
            Outputs the generated <b>Document</b> to the given <b>Page</b> object.
            </summary>
            <param name="page"><b>Page</b> object that receive the Document output.</param>
            <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
            <example>This example shows how to output a PDF to the page.<p/>>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Public Class MyClass
            		Inherits System.Web.UI.Page
            
            		Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Save the PDF document
            		MyDocument.DrawToWeb(Me, "MyDocument.pdf")
            		
            		End Sub
            	End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            public class MyClass : System.Web.UI.Page
            {
            		private void Page_Load(object sender, System.EventArgs e)
            		{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
            		// Save the PDF document
            		document.DrawToWeb( this, "MyDocument.pdf" );
            		}
            	}
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            Outputs the generated <b>Document</b> to the given <b>Page</b> object.
            </summary>
            <param name="page"><b>Page</b> object that receive the Document output.</param>
            <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
            <param name="forceDownload">Specifies if the Save As dialog should appear.</param>
            <example>This example shows how to output a PDF to the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Public Class MyClass
            		Inherits System.Web.UI.Page
            
            		Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Save the PDF document
            		MyDocument.DrawToWeb(Me, "MyDocument.pdf", True)
            		
            		End Sub
            	End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            public class MyClass : System.Web.UI.Page
            {
            		private void Page_Load(object sender, System.EventArgs e)
            		{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
            		// Save the PDF document
            		document.DrawToWeb( this, "MyDocument.pdf", true );
            		}
            	}
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.DrawToWeb(System.Web.UI.Page,System.Boolean,System.String,System.Boolean)">
            <summary>
            Outputs the generated <b>Document</b> to the given <b>Page</b> object.
            </summary>
            <param name="page"><b>Page</b> object that receive the Document output.</param>
            <param name="allowBrowserCaching">Specifies if the browser should be allowed to cache the <b>Document</b>.</param>
            <param name="downloadAsFileName">Specifies the file name of the document if it is downloaded.</param>
            <param name="forceDownload">Specifies if the Save As dialog should appear.</param>
            <example>This example shows how to output a PDF to the page.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Public Class MyClass
            		Inherits System.Web.UI.Page
            
            		Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            		
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center))
            
            		' Save the PDF document
            		MyDocument.DrawToWeb(Me, True, "MyDocument.pdf", True)
            		
            		End Sub
            	End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            public class MyClass : System.Web.UI.Page
            {
            		private void Page_Load(object sender, System.EventArgs e)
            		{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            		
            		// Add a label to the page 
            		Page.Elements.Add( new Label( "My PDF Document", 0, 0, 512, 40, Font.Helvetica, 30, TextAlign.Center ) );
            
            		// Save the PDF document
            		document.DrawToWeb( this, true, "MyDocument.pdf", true );
            		}
            	}
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.RequireLicense(System.Int32)">
            <summary>
            Causes the evaluation watermark to display if product is not adequately licensed.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.RequireLicense">
            <summary>
            Causes the evaluation watermark to display if product is not adequately licensed.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Document.Append(ceTe.DynamicPDF.Document)">
            <summary>
            Append a <see cref="T:ceTe.DynamicPDF.Document"/> to the end of the <see cref="T:ceTe.DynamicPDF.Document"/>
            </summary>
            <param name="document">The <see cref="T:ceTe.DynamicPDF.Document"/> to be appended to the end of the <see cref="T:ceTe.DynamicPDF.Document"/>.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.ViewerPreferences">
            <summary>
            Gets a <see cref="P:ceTe.DynamicPDF.Document.ViewerPreferences"/> object that represent the viewer preferences of the <b>Document</b>.
            </summary>
            <value>The documents <see cref="P:ceTe.DynamicPDF.Document.ViewerPreferences"/> object.</value>
            <example>This example shows how to change the viewer preferences associated with a document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Create a Page and add it to the document
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
            		' Set the viewer preferences
            		MyDocument.ViewerPreferences.CenterWindow = True
            		MyDocument.ViewerPreferences.DisplayDocTitle = False
            		MyDocument.ViewerPreferences.HideMenubar = True
            		MyDocument.ViewerPreferences.HideToolbar = True
            		MyDocument.ViewerPreferences.HideWindowUI = True
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            	End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Create a page and add it to the document
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Set the viewer preferences
            		document.ViewerPreferences.CenterWindow = true;
            		document.ViewerPreferences.DisplayDocTitle = false;
            		document.ViewerPreferences.HideMenubar = true;
            		document.ViewerPreferences.HideToolbar = true;
            		document.ViewerPreferences.HideWindowUI = true;
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Template">
            <summary>
            Gets or sets a <see cref="P:ceTe.DynamicPDF.Document.Template"/> object for the <b>Document</b>.
            </summary>
            <value>The documents <see cref="P:ceTe.DynamicPDF.Document.Template"/> object.</value>
            <remarks>See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETTemplates.htm">Templates</a> topic for more on templates.</remarks>
            <example>This example shows how to create an EvenOddTemplate and Add it to the document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		' Add 5 blank pages to the document
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
            		' Create an even odd template and add elements to it
            		Dim MyTemplate As EvenOddTemplate = New EvenOddTemplate
            		MyTemplate.EvenElements.Add(New Label("Even Header", 0, 0, 200, 12))
            		MyTemplate.OddElements.Add(New Label("Odd Header", 0, 0, 200, 12)) 
            		MyTemplate.Elements.Add(New Label("Footer", 0, 680, 200, 12))
            		
            		' Add the template to the document
            		MyDocument.Template = MyTemplate
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add 5 blank pages to the document
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Create an even odd template and add elements to it
            		EvenOddTemplate template = new EvenOddTemplate();
            		template.EvenElements.Add( new Label( "Even Header", 0, 0, 200, 12 ) );
            		template.OddElements.Add( new Label( "Odd Header", 0, 0, 200, 12 ) );
            		template.Elements.Add( new Label( "Footer", 0, 680, 200, 12 ) );
            		
            		// Add the template to the document
            		document.Template = template;
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Sections">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.SectionList"/> object for the <b>Document</b>.
            </summary>
            <value>The documents <see cref="T:ceTe.DynamicPDF.SectionList"/> object.</value>
            <remarks>Used to break a document into sections.  See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETDocumentSectioning.htm">Document Sectioning</a> topic for 
            more details.</remarks>
            <example>This example shows how to break the document into different sections.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		'Create a template object and add a page numbering label
            		Dim MyTemplate As Template = New Template
            		MyTemplate.Elements.Add(New PageNumberingLabel("%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center))
            		
            		'Add the template to the document
            		MyDocument.Template = MyTemplate
            		
            		'Begin the first section
            		MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase)
            		'Add two pages
            		MyDocument.Pages.Add(New Page)     'Page 1
            		MyDocument.Pages.Add(New Page)     'Page 2
            		
            		'Begin the second section
            		MyDocument.Sections.Begin(NumberingStyle.Numeric, MyTemplate)
            		'Add three pages
            		MyDocument.Pages.Add(New Page)     'Page 3
            		MyDocument.Pages.Add(New Page)     'page 4
            		MyDocument.Pages.Add(New Page)     'page 5
            		
            		'Begin the third section specifying a section prefix
            		MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase, "Appendix A - ")
            		'Add two pages
            		MyDocument.Pages.Add(New Page)     'page 6
            		MyDocument.Pages.Add(New Page)     'page 7
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            	End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		//Create a template object and add a page numbering label
            		Template template = new Template();
            		template.Elements.Add( new PageNumberingLabel( "%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center ) );
            		
            		document.Template = template;
            		
            		//Begin the first section
            		document.Sections.Begin( NumberingStyle.RomanLowerCase );
            		//Add two pages
            		document.Pages.Add( new Page() ); //Page 1
            		document.Pages.Add( new Page() ); //Page 2
            		
            		//Begin the second section
            		document.Sections.Begin( NumberingStyle.Numeric, template );
            		//Add three pages
            		document.Pages.Add( new Page() ); //Page 3
            		document.Pages.Add( new Page() ); //page 4
            		document.Pages.Add( new Page() ); //page 5
            		
            		//Begin the third section specifying a section prefix
            		document.Sections.Begin( NumberingStyle.RomanLowerCase, "Appendix A - " );
            		//Add two pages
            		document.Pages.Add( new Page() ); //page 6
            		document.Pages.Add( new Page() ); //page 7
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            	</code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Pages">
            <summary>
            Gets a <see cref="T:ceTe.DynamicPDF.PageList"/> object that represent the pages of the <b>Document</b>.
            </summary>
            <value>The collection of pages for the <b>Document</b></value>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Outlines">
            <summary>
            Gets an <see cref="T:ceTe.DynamicPDF.OutlineList"/> object that represents the top level outlines of the <b>Document</b>.
            </summary>
            <remarks>See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETOutlinesandBookmarks.htm">Outlines and Bookmarks</a> topic for more on Outlines.</remarks>
            <example>This example shows how to create an outline for a PDF document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Add three blank pages
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            
            		' Add a top level outline and set properties
            		Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
            		MyOutline1.Style = TextStyle.Bold
            		MyOutline1.Color = New RgbColor(255, 0, 0)
            
            		' Add child outlines
            		Dim MyOutline1A As Outline = MyOutline1.Outlines.Add("Outline1A", New ZoomDestination(2, PageZoom.FitPage))
            		MyOutline1A.IsExpanded = False
            		Dim MyOutline1A1 As Outline = MyOutline1A.Outlines.Add("Outline1A1", New XYDestination(2, 0, 0))
            		Dim MyOutline1A2 As Outline = MyOutline1A.Outlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
            		Dim MyOutline1B As Outline = MyOutline1.Outlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
            		' Add a second top level outline
            		Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
            		' Add a child outline
            		Dim MyOutline2A As Outline = MyOutline2.Outlines.Add("Outline2A")
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add three blank pages
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Add a top level outline and set properties
            		Outline outline1 = document.Outlines.Add( "Outline1" );
            		outline1.Style = TextStyle.Bold;
            		outline1.Color = new RgbColor( 255, 0, 0 );
            		
            		// Add child outlines
            		Outline outline1A = outline1.Outlines.Add( "Outline1A", new ZoomDestination( 2, PageZoom.FitPage ) );
            		outline1A.IsExpanded = false;
            		Outline outline1A1 = outline1A.Outlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
            		Outline outline1A2 = outline1A.Outlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
            		Outline outline1B = outline1.Outlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
            		// Add a second top level outline
            		Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
            		// Add a child outline
            		Outline outline2A = outline2.Outlines.Add( "Outline2A" );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.InitialPageZoom">
            <summary>
            Gets or sets a value indicating the initial zoom of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.InitialPageMode">
            <summary>
            Gets or sets a value indicating the initial page mode of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.InitialPage">
            <summary>
            Gets or sets a value indicating the initial page of the <b>Document</b>.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Author">
            <summary>
            Gets or sets a value indicating the author of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Creator">
            <summary>
            Gets or sets a value indicating the creator of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Keywords">
            <summary>
            Gets or sets a value indicating the keywords of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Subject">
            <summary>
            Gets or sets a value indicating the subject of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Title">
            <summary>
            Gets or sets a value indicating the title of the <b>Document</b>.
            </summary>
            <remarks>This value appears as a property of the generated PDF document.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.CompressionLevel">
            <summary>
            Gets or sets a value indicating the compression level of the <b>Document</b>.
            </summary>
            <remarks>A value from 0 to 9 indicating the compression level of the 
            document. Six (6) is the default. Zero (0) represents no compression and
            nine (9) represents the best compression. This value will only affect the
            compression of the content streams of the documents pages. Depending
            on the type of document you are creating, it may not affect the size
            significantly.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Security">
            <summary>
            Gets or sets an object to control the security and encryption of the <b>Document</b>.
            </summary>
            <remarks>This object controls the encryption and security of the generated PDF document.</remarks>
            <example>The following example will set the high security of the document so that the anyone who logs in 
            with the user password will not be able to print at high resolution, edit or add annotations or form fields, or access this document from other accessibility programs.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a high security object
            		Dim security As HighSecurity = New HighSecurity("owner", "user")
            
            		' Set the permissions on that security object
            		security.AllowAccessibility = False
            		security.AllowDocumentAssembly = False
            		security.AllowHighResolutionPrinting = False
            
            		' Add the security object to the document
            		MyDocument.Security = security
            
            		' Create and display a label as a reference
            		Dim text As String = "This document has been encrypted with 128 bit encryption."
            		MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a high security object
            		HighSecurity security = new HighSecurity( "owner", "user" );
            
            		// Set the permissions on that security object
            		security.AllowAccessibility = false;
            		security.AllowDocumentAssembly = false;
            		security.AllowUpdateAnnotsAndFields = false;
            
            		// Add the security object to the document
            		document.Security = security;
            
            		// Create and display a label as a reference
            		string text = "This document has been encrypted with 128 bit encryption.";
            		page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.Form">
            <summary>
            Gets or sets a form object for the PDF document.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Document.PdfVersion">
            <summary>
            Gets or sets the PDF version of the PDF document.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.EmptyDocumentException">
            <summary>
            The exception that is thrown for an empty DynamicPDF Generator document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.EmptyDocumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.EmptyDocumentException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.PageZoom">
            <summary>
            Specifies zoom type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.Retain">
            <summary>
            Keep unchanged.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.FitPage">
            <summary>
            Fit page in window.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.FitWidth">
            <summary>
            Fit width of page in window.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.FitHeight">
            <summary>
            Fit height of page in window.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageZoom.FitBox">
            <summary>
            Fit all elements of page in window.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageMode">
            <summary>
            Specifies page mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.Auto">
            <summary>
            ShowOutlines is used if outlines are present. If not ShowNone is used.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.ShowNone">
            <summary>
            Outlines and Thumbnails toolbars are not shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.ShowOutlines">
            <summary>
            Outlines toolbar is shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.ShowThumbnails">
            <summary>
            Thumbnails toolbar is shown.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageMode.FullScreen">
            <summary>
            Document is show in full screen mode.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageSize">
            <summary>
            Specifies page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.A3">
            <summary>
            A3 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.A4">
            <summary>
            A4 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.A5">
            <summary>
            A5 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.A6">
            <summary>
            A6 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.B3">
            <summary>
            B3 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.B4">
            <summary>
            B4 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.B5">
            <summary>
            B5 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.B5JIS">
            <summary>
            B5 Japanese page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.DoublePostcard">
            <summary>
            Double postcard page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Envelope10">
            <summary>
            Envelope 10 page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.EnvelopeDL">
            <summary>
            DL envelope page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.EnvelopeC5">
            <summary>
            C5 envelope page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.EnvelopeB5">
            <summary>
            B5 envelope page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.EnvelopeMonarch">
            <summary>
            Monarch envelope page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Executive">
            <summary>
            Executive page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Legal">
            <summary>
            Legal page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Folio">
            <summary>
            Folio page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Letter">
            <summary>
            Letter page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Postcard">
            <summary>
            Postcard page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.PRC16K">
            <summary>
            PRC 16K page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.PRC32K">
            <summary>
            PRC 32K page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Quatro">
            <summary>
            Quatro page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Statement">
            <summary>
            Statement page size.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageSize.Tabloid">
            <summary>
            Tabloid page size.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageOrientation">
            <summary>
            Specifies page orientation.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageOrientation.Portrait">
            <summary>
            Portrait page orientation.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PageOrientation.Landscape">
            <summary>
            Landscape page orientation.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TextAlign">
            <summary>
            Specifies alignment of text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.Justify">
            <summary>
            Align justify.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextAlign.FullJustify">
            <summary>
            Align justify including last line.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TextStyle">
            <summary>
            Specifies text style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextStyle.Regular">
            <summary>
            Regular style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextStyle.Italic">
            <summary>
            Italic style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextStyle.Bold">
            <summary>
            Bold style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextStyle.BoldItalic">
            <summary>
            Bold italic style.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Align">
            <summary>
            Specifies horizontal alignment.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Align.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Align.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Align.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.VAlign">
            <summary>
            Specifies vertical alignment.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.VAlign.Top">
            <summary>
            Align top.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.VAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.VAlign.Bottom">
            <summary>
            Align bottom.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Apply">
            <summary>
            Specifies how color is applied.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Apply.Stroke">
            <summary>
            The border is drawn.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Apply.Fill">
            <summary>
            The fill is drawn.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.Apply.Both">
            <summary>
            Both border and fill are drawn.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.LineCap">
            <summary>
            Specifies the cap style of a line.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineCap.Butt">
            <summary>
            Straight line at point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineCap.Round">
            <summary>
            Rounded at point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineCap.ProjectedSquare">
            <summary>
            Projected from point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.LineJoin">
            <summary>
            Specifies how lines are joined.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineJoin.Miter">
            <summary>
            Sharp angle projected from point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineJoin.Round">
            <summary>
            Rounded at point.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineJoin.Bevel">
            <summary>
            Beveled at point.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.LineLeadingType">
            <summary>
            Specifies the line leading type.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineLeadingType.Auto">
            <summary>
            Automatically calculated.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineLeadingType.AtLeast">
            <summary>
            At least the value specified.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.LineLeadingType.Exactly">
            <summary>
            Exactly the value specified.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.TextRenderingMode">
            <summary>
            Specifies text rendering mode.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextRenderingMode.Fill">
            <summary>
            Fill text.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextRenderingMode.Stroke">
            <summary>
            Stroke text border.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextRenderingMode.FillAndStroke">
            <summary>
            Fill text and stroke border.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.TextRenderingMode.Invisible">
            <summary>
            Invisible text.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.EvenOddTemplate">
            <summary>
            Represents an even / odd section or document template.
            </summary>
            <remarks>This class can be used to define a template that can contain separate information to go on even and odd pages.
            See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETTemplates.htm">Templates</a> topic for more on Templates.</remarks>
            <example>This example shows how to create an EvenOddTemplate and add it to the document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		' Add 5 blank pages to the document
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
            		' Create an even odd template and add elements to it
            		Dim MyTemplate As EvenOddTemplate = New EvenOddTemplate
            		MyTemplate.EvenElements.Add(New Label("Even Header", 0, 0, 200, 12))
            		MyTemplate.OddElements.Add(New Label("Odd Header", 0, 0, 200, 12)) 
            		MyTemplate.Elements.Add(New Label("Footer", 0, 680, 200, 12))
            		
            		' Add the template to the document
            		MyDocument.Template = MyTemplate
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add 5 blank pages to the document
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Create an even odd template and add elements to it
            		EvenOddTemplate template = new EvenOddTemplate();
            		template.EvenElements.Add( new Label( "Even Header", 0, 0, 200, 12 ) );
            		template.OddElements.Add( new Label( "Odd Header", 0, 0, 200, 12 ) );
            		template.Elements.Add( new Label( "Footer", 0, 680, 200, 12 ) );
            		
            		// Add the template to the document
            		document.Template = template;
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ceTe.DynamicPDF.Template">
            <summary>
            Represents a document or section template.
            </summary>
            <example>This example shows how to create a template and add it to the document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		' Add 5 blank pages to the document
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
            		' Create an even odd template and add elements to it
            		Dim MyTemplate As Template = New Template
            		MyTemplate.Elements.Add(New Label("Header", 0, 0, 200, 12))
            		MyTemplate.Elements.Add(New Label("Footer", 0, 680, 200, 12))
            		
            		' Add the template to the document
            		MyDocument.Template = MyTemplate
            
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add 5 blank pages to the document
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Create an even odd template and add elements to it
            		Template template = new Template();
            		template.Elements.Add( new Label( "Header", 0, 0, 200, 12 ) );
            		template.Elements.Add( new Label( "Footer", 0, 680, 200, 12 ) );
            		
            		// Add the template to the document
            		document.Template = template;
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Template.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Template"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Template.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the template's page elements to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the template's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Template.HasPageElements(System.Int32)">
            <summary>
            Returns a value indicating if the template has page elements for the given page.
            </summary>
            <param name="pageNumber">Page number to test.</param>
            <returns>A <b>Boolean</b> value indicating if there are page elements.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Template.Elements">
            <summary>
            Gets the page elements that will be applied by the template to all pages.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.EvenOddTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Template"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.EvenOddTemplate.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the template's page elements to the given <see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.PageWriter"/> object to receive the template's output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.EvenOddTemplate.HasPageElements(System.Int32)">
            <summary>
            Returns a value indicating if the template has page elements for the given page.
            </summary>
            <param name="pageNumber">The page number to check.</param>
            <returns>A <b>Boolean</b> value indicating if there are page elements.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.EvenOddTemplate.EvenElements">
            <summary>
            Gets the page elements that will be applied by the template to even pages.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.EvenOddTemplate.OddElements">
            <summary>
            Gets the page elements that will be applied by the template to odd pages.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ExtendedPageDimensions">
            <summary>
            Represents the extended dimensions of a page.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageDimensions">
            <summary>
            Represents the dimensions of a page.
            </summary>
            <remarks>This class can be used to specify the dimensions and other formatting details of a page.  It can then be passed into a <see cref="T:ceTe.DynamicPDF.Page"/> constructor.</remarks>
            <example>The following example creates a new page using a <see cref="T:ceTe.DynamicPDF.PageDimensions"/> to set the margins of that page.  
            It then places a label on the page and rotates the page 90 degrees.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a page dimensions object and set the margins
            		Dim dimensions As PageDimensions = New PageDimensions(PageSize.Letter, PageOrientation.Portrait)
            		dimensions.BottomMargin = 50
            		dimensions.TopMargin = 50
            		dimensions.LeftMargin = 35
            		dimensions.RightMargin = 35
            	
            		' Create a page using a page dimensions object and add it to the document
            		Dim MyPage As Page = New Page(dimensions)
            		MyDocument.Pages.Add(MyPage)
            
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("this page was rotated 90 degrees.", 0, 0, 300, 20, Font.Helvetica, 18))
            
            		' Rotate the page 90 degrees
            		MyPage.Rotate = 90
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a page dimensions object and set the margins
            		PageDimensions dimensions = new PageDimensions( PageSize.Letter, PageOrientation.Portrait );
            		dimensions.BottomMargin = 50;
            		dimensions.TopMargin = 50;
            		dimensions.LeftMargin = 35;
            		dimensions.RightMargin = 35;
            
            		// Create a page using a page dimensions object and add it to the document
            		Page page = new Page( dimensions );
            		document.Pages.Add( page );
            
            		// Add a label to the page
            		page.Elements.Add( new Label( "This page was rotated 90 degrees.", 0, 0, 300, 20, Font.Helvetica, 18 ) );
            
            		// Rotate the page 90 degrees
            		page.Rotate = 90;
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="width">Width of the page dimensions.</param>
            <param name="height">Height of the page dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="width">Width of the page dimensions.</param>
            <param name="height">Height of the page dimensions.</param>
            <param name="margins">Margins of the page dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.PageSize)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="size">Page size of the page dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="size">Page size of the page dimensions.</param>
            <param name="orientation"></param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.PageSize,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="size">Page size of the page dimensions.</param>
            <param name="margins">Margins of the page dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="size">Page size of the page dimensions.</param>
            <param name="orientation">Orientation of the page dimensions.</param>
            <param name="margins">Margins of the page dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="edgeDimensions">Edge dimensions of the page dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="edgeDimensions">Edge dimensions of the page dimensions.</param>
            <param name="margins">Margins of the page dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageDimensions"/> class.
            </summary>
            <param name="edgeDimensions">Edge dimensions of the page dimensions.</param>
            <param name="marginDimensions">Margin dimensions of the page dimensions.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the page dimensions to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the page dimensions output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.GetPdfY(System.Single)">
            <summary>
            Overridden. Gets the translated Y coordinate.
            </summary>
            <param name="y">Y coordinate to translate.</param>
            <returns>A translated Y coordinate.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.SetMargins(System.Single)">
            <summary>
            Sets all of the margins for the page dimensions.
            </summary>
            <param name="margins">Margins value to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.SetMargins(System.Single,System.Single)">
            <summary>
            Sets all of the margins of the page.
            </summary>
            <param name="leftAndRight">Left and right margin value to set.</param>
            <param name="topAndBottom">Top and bottom margin value to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageDimensions.SetMargins(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets all of the margins of the page.
            </summary>
            <param name="leftMargin">Left margin value to set.</param>
            <param name="topMargin">Top margin value to set.</param>
            <param name="rightMargin">Right margin value to set.</param>
            <param name="bottomMargin">Bottom margin value to set.</param>
        </member>
        <member name="F:ceTe.DynamicPDF.ExtendedPageDimensions.MediaBox">
            <summary>
            Represents the dimensions of the pages media box.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ExtendedPageDimensions.BleedBox">
            <summary>
            Represents the dimensions of the pages bleed box.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ExtendedPageDimensions.TrimBox">
            <summary>
            Represents the dimensions of the pages trim box.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.ExtendedPageDimensions.ArtBox">
            <summary>
            Represents the dimensions of the pages art box.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ExtendedPageDimensions"/> class.
            </summary>
            <param name="edge">Edge dimensions of the page.</param>
            <param name="body">Body dimensions of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ExtendedPageDimensions"/> class.
            </summary>
            <param name="edge">Edge dimensions of the page.</param>
            <param name="bleedBox">Bleed box dimensions of the page.</param>
            <param name="trimBox">Trim box dimensions of the page.</param>
            <param name="body">Body dimensions of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ExtendedPageDimensions"/> class.
            </summary>
            <param name="mediaBox">Media box dimensions of the page.</param>
            <param name="cropBox">Crop box dimensions of the page.</param>
            <param name="bleedBox">Bleed dimensions of the page.</param>
            <param name="trimBox">Trim dimensions of the page.</param>
            <param name="artBox">Art box dimensions of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.#ctor(ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions,ceTe.DynamicPDF.Dimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ExtendedPageDimensions"/> class.
            </summary>
            <param name="mediaBox">Media box dimensions of the page.</param>
            <param name="cropBox">Crop box dimensions of the page.</param>
            <param name="bleedBox">Bleed dimensions of the page.</param>
            <param name="trimBox">Trim dimensions of the page.</param>
            <param name="artBox">Art box dimensions of the page.</param>
            <param name="body">Body dimensions of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overloaded. Draws the page dimensions to the given <b>DocumentWriter</b> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the page dimensions output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ExtendedPageDimensions.GetPdfY(System.Single)">
            <summary>
            Gets the translated PDF y coordinate.
            </summary>
            <param name="y">Y coordinate to translate.</param>
            <returns>A translated Y coordinate.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.ExtendedPageDimensions.CropBox">
            <summary>
            Gets the crop box dimensions of the page. This is the same as the edge of the page.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.FontFamily">
            <summary>
            Represents a font family.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.FontFamily.#ctor(System.String,ceTe.DynamicPDF.Font,ceTe.DynamicPDF.Font,ceTe.DynamicPDF.Font,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.FontFamily"/> class.
            </summary>
            <param name="name">Name of font family.</param>
            <param name="regular"><see cref="T:ceTe.DynamicPDF.Font"/> representing regular.</param>
            <param name="bold"><see cref="T:ceTe.DynamicPDF.Font"/> representing bold.</param>
            <param name="italic"><see cref="T:ceTe.DynamicPDF.Font"/> representing italic.</param>
            <param name="boldItalic"><see cref="T:ceTe.DynamicPDF.Font"/> representing bold italic.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.FontFamily.#ctor(System.String,ceTe.DynamicPDF.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.FontFamily"/> class.
            </summary>
            <param name="name">Name of font family.</param>
            <param name="font"><see cref="T:ceTe.DynamicPDF.Font"/> representing all styles.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Name">
            <summary>
            Gets the name of the font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Regular">
            <summary>
            Gets the regular font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Bold">
            <summary>
            Gets the bold font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Italic">
            <summary>
            Gets the italic font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.BoldItalic">
            <summary>
            Gets the bold italic font.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Courier">
            <summary>
            Gets the core Courier font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Helvetica">
            <summary>
            Gets the core Helvetica font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Times">
            <summary>
            Gets the core Times font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.Symbol">
            <summary>
            Gets the core Symbol font family.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.FontFamily.ZapfDingbats">
            <summary>
            Gets the core Zapf Dingbats font family.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Grayscale">
            <summary>
            Represents a grayscale color.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Grayscale"/> class.
            </summary>
            <param name="grayLevel">The gray intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Grayscale"/> class.
            </summary>
            <param name="grayLevel">The gray intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.Equals(System.Object)">
            <summary>
            Overridden. Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.GetHashCode">
            <summary>
            Overridden. Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <b>Color</b>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Grayscale.Draw(ceTe.DynamicPDF.IO.PageWriter,ceTe.DynamicPDF.Apply)">
            <summary>
            Overridden. Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> object to receive the color data.</param>
            <param name="apply">Defines how the color is applied.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Grayscale.GrayLevel">
            <summary>
            Gets or sets the gray value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.HighSecurity">
            <summary>
            Represents high 128 bit PDF document security.
            </summary>
            <remarks>
            128 bit PDF security is compatible with PDF version 1.4 and higher and can be read
            with Adobe Acrobat Reader version 5 and higher. Older readers will not be able to
            read document encrypted with this security.  Refer to the <see cref="T:ceTe.DynamicPDF.Security"/> section for more details on this class.
            </remarks>
            <example>The following example will set the high security of the document so that the anyone who logs in 
            with the user password will not be able to print at high resolution, edit or add annotations or form fields, or access this document from other accessibility programs.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a high security object
            		Dim security As HighSecurity = New HighSecurity("owner", "user")
            
            		' Set the permissions on that security object
            		security.AllowAccessibility = False
            		security.AllowDocumentAssembly = False
            		security.AllowHighResolutionPrinting = False
            
            		' Add the security object to the document
            		MyDocument.Security = security
            
            		' Create and display a label as a reference
            		Dim text As String = "This document has been encrypted with 128 bit encryption."
            		MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a high security object
            		HighSecurity security = new HighSecurity( "owner", "user" );
            
            		// Set the permissions on that security object
            		security.AllowAccessibility = false;
            		security.AllowDocumentAssembly = false;
            		security.AllowUpdateAnnotsAndFields = false;
            
            		// Add the security object to the document
            		document.Security = security;
            
            		// Create and display a label as a reference
            		string text = "This document has been encrypted with 128 bit encryption.";
            		page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="T:ceTe.DynamicPDF.Security">
            <summary>
            Base class from which all security classes are derived.
            </summary>
            <remarks>Security's derived classes are: <see cref="T:ceTe.DynamicPDF.HighSecurity"/> and <see cref="T:ceTe.DynamicPDF.StandardSecurity"/>.</remarks>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Security"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Security"/> class.
            </summary>
            <param name="ownerPassword">The owner password.</param>
            <param name="userPassword">The user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Security"/> class.
            </summary>
            <param name="password">The owner and user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Abstract. Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.GetEncrypter(System.Byte[])">
            <summary>
            Abstract. Gets an <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Security.BinPassword(System.String)">
            <summary>
            Gets a byte array of the password padded with the PDF padding array.
            </summary>
            <param name="password">The password.</param>
            <returns>A byte array representing the password.</returns>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.OwnerPassword">
            <summary>
            Gets or sets the owner password.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.UserPassword">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.AllowPrint">
            <summary>
            Gets or sets if the document can be printed by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.AllowEdit">
            <summary>
            Gets or sets if the document can be edited by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.AllowCopy">
            <summary>
            Gets or sets if text and images can be copied to the clipboard by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.AllowUpdateAnnotsAndFields">
            <summary>
            Gets or sets if annotations and form fields can be added, edited
            and modified by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Security.Filler">
            <summary>
            Gets the byte array specified by Adobe to use as a filler for passwords.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.HighSecurity"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.HighSecurity"/> class.
            </summary>
            <param name="ownerPassword">The owner password.</param>
            <param name="userPassword">The user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.HighSecurity"/> class.
            </summary>
            <param name="password">The owner and user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.GetEncrypter(System.Byte[])">
            <summary>
            Overridden. Gets a 128 bit <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.HighSecurity.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Overridden. Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.HighSecurity.AllowFormFilling">
            <summary>
            Gets or sets if form filling should be allowed by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.HighSecurity.AllowAccessibility">
            <summary>
            Gets or sets if accessibility programs should be able to read
            the documents text and images for the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.HighSecurity.AllowDocumentAssembly">
            <summary>
            Gets or sets if the document can be assembled and manipulated by the user.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.HighSecurity.AllowHighResolutionPrinting">
            <summary>
            Gets or sets if the document can be printed at a high resolution by the user.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.LineStyle">
            <summary>
            Represents a style of line.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.LineStyle.#ctor(System.Single[],System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.LineStyle"/> class.
            </summary>
            <param name="dashArray">The array specifying the line style.</param>
            <param name="dashPhase">The phase of the line style.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.LineStyle.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.LineStyle"/> class.
            </summary>
            <param name="dashArray">The array specifying the line style.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.LineStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>LineStyle</b> class.
            </summary>
            <param name="lineStyle">String specifying the line style.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.Solid">
            <summary>
            Gets a solid line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.Dots">
            <summary>
            Gets a dotted line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.DashSmall">
            <summary>
            Gets a line with small dashes.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.Dash">
            <summary>
            Gets a dashed line.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.LineStyle.DashLarge">
            <summary>
            Gets a line with large dashes. 
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.NumberingStyle">
            <summary>
            Specifies numbering style.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.Numeric">
            <summary>
            Numeric numbering (arabic).
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.AlphabeticLowerCase">
            <summary>
            Lower case alphabetic numbering.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.AlphabeticUpperCase">
            <summary>
            Upper case alphabetic numbering.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.RomanLowerCase">
            <summary>
            Lower case roman numerals.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.RomanUpperCase">
            <summary>
            Upper case roman numerals.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.NumberingStyle.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Outline">
            <summary>
            Represents an outline.
            </summary>
            <remarks>See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETOutlinesandBookmarks.htm">Outlines and Bookmarks</a> topic for more on Outlines.</remarks>
            <example>This example shows how to create an outline for a PDF document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Add three blank pages
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            
            		' Add a top level outline and set properties
            		Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
            		MyOutline1.Style = TextStyle.Bold
            		MyOutline1.Color = New RgbColor(255, 0, 0)
            
            		' Add child outlines
            		Dim MyOutline1A As Outline = MyOutline1.Outlines.Add("Outline1A", New ZoomDestination(2, PageZoom.FitPage))
            		MyOutline1A.IsExpanded = False
            		Dim MyOutline1A1 As Outline = MyOutline1A.Outlines.Add("Outline1A1", New XYDestination(2, 0, 0))
            		Dim MyOutline1A2 As Outline = MyOutline1A.Outlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
            		Dim MyOutline1B As Outline = MyOutline1.Outlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
            		' Add a second top level outline
            		Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
            		' Add a child outline
            		Dim MyOutline2A As Outline = MyOutline2.Outlines.Add("Outline2A")
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add three blank pages
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Add a top level outline and set properties
            		Outline outline1 = document.Outlines.Add( "Outline1" );
            		outline1.Style = TextStyle.Bold;
            		outline1.Color = new RgbColor( 255, 0, 0 );
            		
            		// Add child outlines
            		Outline outline1A = outline1.Outlines.Add( "Outline1A", new ZoomDestination( 2, PageZoom.FitPage ) );
            		outline1A.IsExpanded = false;
            		Outline outline1A1 = outline1A.Outlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
            		Outline outline1A2 = outline1A.Outlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
            		Outline outline1B = outline1.Outlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
            		// Add a second top level outline
            		Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
            		// Add a child outline
            		Outline outline2A = outline2.Outlines.Add( "Outline2A" );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Outline.#ctor(System.String,ceTe.DynamicPDF.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Outline"/> class.
            </summary>
            <param name="text">Text of the outline.</param>
            <param name="action">Action or destination of the outline.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Text">
            <summary>
            Gets or sets the text of the outline.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Style">
            <summary>
            Gets or sets the style of the outline.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Color">
            <summary>
            Gets or sets the color of the outline.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Parent">
            <summary>
            Gets the parent of the outline.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.Outlines">
            <summary>
            Gets a collection or child outlines.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Outline.IsExpanded">
            <summary>
            Gets or sets a value specifying if the outline is expanded.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.OutlineList">
            <summary>
            Represents a collection of outlines.
            </summary>
            /// <remarks>See the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETOutlinesandBookmarks.htm">Outlines and Bookmarks</a> topic for more on Outlines.</remarks>
            <example>This example shows how to create an outline for a PDF document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Add three blank pages
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            
            		' Add a top level outline and set properties
            		Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
            		MyOutline1.Style = TextStyle.Bold
            		MyOutline1.Color = New RgbColor(255, 0, 0)
            
            		' Add child outlines
            		Dim MyOutline1A As Outline = MyOutline1.Outlines.Add("Outline1A", New ZoomDestination(2, PageZoom.FitPage))
            		MyOutline1A.IsExpanded = False
            		Dim MyOutline1A1 As Outline = MyOutline1A.Outlines.Add("Outline1A1", New XYDestination(2, 0, 0))
            		Dim MyOutline1A2 As Outline = MyOutline1A.Outlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
            		Dim MyOutline1B As Outline = MyOutline1.Outlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
            		' Add a second top level outline
            		Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
            		' Add a child outline
            		Dim MyOutline2A As Outline = MyOutline2.Outlines.Add("Outline2A")
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add three blank pages
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Add a top level outline and set properties
            		Outline outline1 = document.Outlines.Add( "Outline1" );
            		outline1.Style = TextStyle.Bold;
            		outline1.Color = new RgbColor( 255, 0, 0 );
            		
            		// Add child outlines
            		Outline outline1A = outline1.Outlines.Add( "Outline1A", new ZoomDestination( 2, PageZoom.FitPage ) );
            		outline1A.IsExpanded = false;
            		Outline outline1A1 = outline1A.Outlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
            		Outline outline1A2 = outline1A.Outlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
            		Outline outline1B = outline1.Outlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
            		// Add a second top level outline
            		Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
            		// Add a child outline
            		Outline outline2A = outline2.Outlines.Add( "Outline2A" );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.Add(System.String,ceTe.DynamicPDF.Action)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.Outline"/> object to the outline list.
            </summary>
            <param name="text">Text of the outline.</param>
            <param name="action">Action or destination of the outline.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Outline"/> object that is created.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.Add(System.String)">
            <summary>
            Adds an <see cref="T:ceTe.DynamicPDF.Outline"/> object to the outline list.
            </summary>
            <param name="text">Text of the outline.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Outline"/> object that is created.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.OutlineList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <b>OutlineList</b>.
            </summary>
            <returns>An <b>IEnumerator</b> for the entire <b>OutlineList</b></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.OutlineList.Count">
            <summary>
            Gets the number of outlines in the list.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.OutlineList.Item(System.Int32)">
            <summary>
            Gets the <b>Outline</b> object at the specified index.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Page">
            <summary>
            Represents a page.
            </summary>
            <remarks>This class can be used to create pages to add to your <see cref="T:ceTe.DynamicPDF.Document"/>.</remarks>
            <example>The following example creates a new page using a <see cref="T:ceTe.DynamicPDF.PageDimensions"/> to set the margins of that page.  
            It then places a label on the page and rotates the page 90 degrees.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a page dimensions object and set the margins
            		Dim dimensions As PageDimensions = New PageDimensions(PageSize.Letter, PageOrientation.Portrait)
            		dimensions.BottomMargin = 50
            		dimensions.TopMargin = 50
            		dimensions.LeftMargin = 35
            		dimensions.RightMargin = 35
            	
            		' Create a page using a page dimensions object and add it to the document
            		Dim MyPage As Page = New Page(dimensions)
            		MyDocument.Pages.Add(MyPage)
            
            		' Add a label to the page
            		MyPage.Elements.Add(New Label("this page was rotated 90 degrees.", 0, 0, 300, 20, Font.Helvetica, 18))
            
            		' Rotate the page 90 degrees
            		MyPage.Rotate = 90
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a page dimensions object and set the margins
            		PageDimensions dimensions = new PageDimensions( PageSize.Letter, PageOrientation.Portrait );
            		dimensions.BottomMargin = 50;
            		dimensions.TopMargin = 50;
            		dimensions.LeftMargin = 35;
            		dimensions.RightMargin = 35;
            
            		// Create a page using a page dimensions object and add it to the document
            		Page page = new Page( dimensions );
            		document.Pages.Add( page );
            
            		// Add a label to the page
            		page.Elements.Add( new Label( "This page was rotated 90 degrees.", 0, 0, 300, 20, Font.Helvetica, 18 ) );
            
            		// Rotate the page 90 degrees
            		page.Rotate = 90;
            	
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageSize)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="size">The <see cref="T:ceTe.DynamicPDF.PageSize"/> representing the dimensions of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="size">The <see cref="T:ceTe.DynamicPDF.PageSize"/> representing the dimensions of the page.</param>
            <param name="orientation">The <see cref="T:ceTe.DynamicPDF.PageOrientation"/> of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageSize,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="size">The <see cref="T:ceTe.DynamicPDF.PageSize"/> representing the dimensions of the page.</param>
            <param name="margins">The  margins of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageSize,ceTe.DynamicPDF.PageOrientation,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="size">The <see cref="T:ceTe.DynamicPDF.PageSize"/> representing the dimensions of the page.</param>
            <param name="orientation">The <see cref="T:ceTe.DynamicPDF.PageOrientation"/> of the page.</param>
            <param name="margins">The margins of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page.</param>
            <param name="margins">The margins of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.#ctor(ceTe.DynamicPDF.PageDimensions)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.Page"/> class.
            </summary>
            <param name="dimensions">The <see cref="T:ceTe.DynamicPDF.PageDimensions"/> of the page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.HasPageElements(ceTe.DynamicPDF.IO.DocumentWriter,System.Int32)">
            <summary>
            Returns a value specifying if the page has page elements.
            </summary>
            <param name="writer">The <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object used for output.</param>
            <param name="pageNumber">The page number to check.</param>
            <returns></returns>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.Draw(ceTe.DynamicPDF.IO.DocumentWriter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the page to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="parentObject">The parent objects number.</param>
            <param name="pageNumber">The page number of this page.</param>
            <param name="sectionPageNumber">The section number of this page.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.DrawDimensions(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the dimensions to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.DrawContents(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the contents to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.DrawAnnotations(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the annotations to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.DrawResources(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.PageResources)">
            <summary>
            Draws the resources to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
            <param name="resources">The pages resources.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.Draw(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the output to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.SetRequiredLicenseLevel(System.Int32)">
            <summary>
            Sets the license level required by the page.
            </summary>
            <param name="level">Required license level.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.DrawPrepend(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the prepended output to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.Page.DrawAppend(ceTe.DynamicPDF.IO.PageWriter)">
            <summary>
            Draws the appended output to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.ContentObjects">
            <summary>
            Get the number of content objects used by the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.RequiredLicenseLevel">
            <summary>
            Gets the required license level for this page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.Elements">
            <summary>
            Gets a collection of page elements.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.Dimensions">
            <summary>
            Gets or sets the dimensions of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.Rotate">
            <summary>
            Gets or sets the rotation of the page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.ApplyDocumentTemplate">
            <summary>
            Gets or sets a value indicating if this page uses the documents template.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Page.ApplySectionTemplate">
            <summary>
            Gets or sets a value indicating if this page uses the sections template.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PageList">
            <summary>
            Represents a collection of pages associated with a document.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.PageList"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.Add(ceTe.DynamicPDF.Page)">
            <summary>
            Adds a <see cref="T:ceTe.DynamicPDF.Page"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageList"/>.
            </summary>
            <param name="page">The <see cref="T:ceTe.DynamicPDF.Page"/> to be added to the end of the <see cref="T:ceTe.DynamicPDF.PageList"/>.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.PageList"/> index at which the <i>page</i> has been added.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.Append(ceTe.DynamicPDF.PageList)">
            <summary>
            Append a <see cref="T:ceTe.DynamicPDF.PageList"/> to the end of the <see cref="T:ceTe.DynamicPDF.PageList"/>.
            </summary>
            <param name="pages">The <see cref="T:ceTe.DynamicPDF.PageList"/> to be appended to the end of the <see cref="T:ceTe.DynamicPDF.PageList"/>.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.Insert(System.Int32,ceTe.DynamicPDF.Page)">
            <summary>
            Inserts a <see cref="T:ceTe.DynamicPDF.Page"/> into the <see cref="T:ceTe.DynamicPDF.PageList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <i>page</i> should be inserted.</param>
            <param name="page">The <see cref="T:ceTe.DynamicPDF.Page"/> to insert.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.Remove(ceTe.DynamicPDF.Page)">
            <summary>
            Removes the first occurrence of the given <see cref="T:ceTe.DynamicPDF.Page"/> from the <see cref="T:ceTe.DynamicPDF.PageList"/>.
            </summary>
            <param name="page">The <see cref="T:ceTe.DynamicPDF.Page"/> to remove form the <see cref="T:ceTe.DynamicPDF.PageList"/></param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.RemoveAt(System.Int32)">
            <summary>
            Removes the page at the specified index of the <see cref="T:ceTe.DynamicPDF.PageList"/>.
            </summary>
            <param name="index">The zero-based index of the page to remove.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.PageList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <see cref="T:ceTe.DynamicPDF.PageList"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the entire <see cref="T:ceTe.DynamicPDF.PageList"/></returns>
        </member>
        <member name="P:ceTe.DynamicPDF.PageList.Item(System.Int32)">
            <summary>
            Gets the page at the given index.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.PageList.Count">
            <summary>
            Gets the number of pages in the collection.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.PdfVersion">
            <summary>
            Specifies a version of PDF.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_3">
            <summary>
            PDF version 1.3.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_4">
            <summary>
            PDF version 1.4.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_5">
            <summary>
            PDF version 1.5.
            </summary>
        </member>
        <member name="F:ceTe.DynamicPDF.PdfVersion.v1_6">
            <summary>
            PDF version 1.6.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.RgbColor">
            <summary>
            Represents an RGB color.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.RgbColor"/> class.
            </summary>
            <param name="red">The red intensity.</param>
            <param name="green">The green intensity.</param>
            <param name="blue">The blue intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.RgbColor"/> class.
            </summary>
            <param name="red">The red intensity.</param>
            <param name="green">The green intensity.</param>
            <param name="blue">The blue intensity.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.Equals(System.Object)">
            <summary>
            Overridden. Tests equality of colors.
            </summary>
            <param name="obj"><b>Object</b> to compare to the current <b>Color</b>.</param>
            <returns><b>true</b> if the two colors are equal</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.GetHashCode">
            <summary>
            Overridden. Serves as a hash function for a particular type, suitable for use in
            hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <b>Color</b>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.Draw(ceTe.DynamicPDF.IO.PageWriter,ceTe.DynamicPDF.Apply)">
            <summary>
            Overridden. Draws the color data to the given <b>PageWriter</b> object.
            </summary>
            <param name="writer"><b>PageWriter</b> object to receive the color data.</param>
            <param name="apply">Defines how the color is applied.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.SetColor(System.Single,System.Single,System.Single)">
            <summary>
            Sets the color.
            </summary>
            <param name="red">Red value to set.</param>
            <param name="green">Green value to set.</param>
            <param name="blue">Blue value to set.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.RgbColor.SetColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color.
            </summary>
            <param name="red">Red value to set.</param>
            <param name="green">Green value to set.</param>
            <param name="blue">Blue value to set.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.R">
            <summary>
            Gets or sets the red value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.G">
            <summary>
            Gets or sets the green value.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.RgbColor.B">
            <summary>
            Gets or sets the blue value.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.Section">
            <summary>
            Represents a section associated with a document.
            </summary>
            <remarks>For more details on sections take a look at the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETDocumentSectioning.htm">Document Sectioning</a> topic.</remarks>
            <example>This example shows how to break the document into different sections.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		'Create a template object and add a page numbering label
            		Dim MyTemplate As Template = New Template
            		MyTemplate.Elements.Add(New PageNumberingLabel("%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center))
            		
            		'Add the template to the document
            		MyDocument.Template = MyTemplate
            		
            		'Begin the first section
            		MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase)
            		'Add two pages
            		MyDocument.Pages.Add(New Page)     'Page 1
            		MyDocument.Pages.Add(New Page)     'Page 2
            		
            		'Begin the second section
            		MyDocument.Sections.Begin(NumberingStyle.Numeric, MyTemplate)
            		'Add three pages
            		MyDocument.Pages.Add(New Page)     'Page 3
            		MyDocument.Pages.Add(New Page)     'page 4
            		MyDocument.Pages.Add(New Page)     'page 5
            		
            		'Begin the third section specifying a section prefix
            		MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase, "Appendix A - ")
            		'Add two pages
            		MyDocument.Pages.Add(New Page)     'page 6
            		MyDocument.Pages.Add(New Page)     'page 7
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		//Create a template object and add a page numbering label
            		Template template = new Template();
            		template.Elements.Add( new PageNumberingLabel( "%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center ) );
            		
            		document.Template = template;
            		
            		//Begin the first section
            		document.Sections.Begin( NumberingStyle.RomanLowerCase );
            		//Add two pages
            		document.Pages.Add( new Page() ); //Page 1
            		document.Pages.Add( new Page() ); //Page 2
            		
            		//Begin the second section
            		document.Sections.Begin( NumberingStyle.Numeric, template );
            		//Add three pages
            		document.Pages.Add( new Page() ); //Page 3
            		document.Pages.Add( new Page() ); //page 4
            		document.Pages.Add( new Page() ); //page 5
            		
            		//Begin the third section specifying a section prefix
            		document.Sections.Begin( NumberingStyle.RomanLowerCase, "Appendix A - " );
            		//Add two pages
            		document.Pages.Add( new Page() ); //page 6
            		document.Pages.Add( new Page() ); //page 7
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.NumberingStyle">
            <summary>
            Gets or sets the numbering style for the section.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.Prefix">
            <summary>
            Gets or sets the prefix string for the section.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.StartingPageNumber">
            <summary>
            Gets or sets the starting page number for the section.
            </summary>
            <remarks>This must be a value greater than or equal to 1.</remarks>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.PageIndex">
            <summary>
            Gets the page index for the start of the section.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.Section.Template">
            <summary>
            Gets or sets the Template for the section.
            </summary>
            <remarks>This template will be used for all pages in this section that have their
            <see cref="P:ceTe.DynamicPDF.Page.ApplySectionTemplate"/> property set to <b>true</b>(the default value).</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.SectionList">
            <summary>
            Represents a collection of sections associated with a document.
            </summary>
            <remarks>For more details on sections take a look at the <a href="DynamicPDFGeneratorNETProgrammingWithGeneratorNETDocumentSectioning.htm">Document Sectioning</a> topic.</remarks>
            <example>This example shows how to break the document into different sections.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            		
            		'Create a template object and add a page numbering label
            		Dim MyTemplate As Template = New Template
            		MyTemplate.Elements.Add(New PageNumberingLabel("%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center))
            		
            		'Add the template to the document
            		MyDocument.Template = MyTemplate
            		
            		'Begin the first section
            		MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase)
            		'Add two pages
            		MyDocument.Pages.Add(New Page)     'Page 1
            		MyDocument.Pages.Add(New Page)     'Page 2
            		
            		'Begin the second section
            		MyDocument.Sections.Begin(NumberingStyle.Numeric, MyTemplate)
            		'Add three pages
            		MyDocument.Pages.Add(New Page)     'Page 3
            		MyDocument.Pages.Add(New Page)     'page 4
            		MyDocument.Pages.Add(New Page)     'page 5
            		
            		'Begin the third section specifying a section prefix
            		MyDocument.Sections.Begin(NumberingStyle.RomanLowerCase, "Appendix A - ")
            		'Add two pages
            		MyDocument.Pages.Add(New Page)     'page 6
            		MyDocument.Pages.Add(New Page)     'page 7
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		//Create a template object and add a page numbering label
            		Template template = new Template();
            		template.Elements.Add( new PageNumberingLabel( "%%SP%% of %%ST%%", 0, 680, 512, 12, Font.Helvetica, 12, TextAlign.Center ) );
            		
            		document.Template = template;
            		
            		//Begin the first section
            		document.Sections.Begin( NumberingStyle.RomanLowerCase );
            		//Add two pages
            		document.Pages.Add( new Page() ); //Page 1
            		document.Pages.Add( new Page() ); //Page 2
            		
            		//Begin the second section
            		document.Sections.Begin( NumberingStyle.Numeric, template );
            		//Add three pages
            		document.Pages.Add( new Page() ); //Page 3
            		document.Pages.Add( new Page() ); //page 4
            		document.Pages.Add( new Page() ); //page 5
            		
            		//Begin the third section specifying a section prefix
            		document.Sections.Begin( NumberingStyle.RomanLowerCase, "Appendix A - " );
            		//Add two pages
            		document.Pages.Add( new Page() ); //page 6
            		document.Pages.Add( new Page() ); //page 7
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            	</code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin">
            <summary>
            Begins a section in the document.
            </summary>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.NumberingStyle)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="numberingStyle">The <see cref="T:ceTe.DynamicPDF.NumberingStyle"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(System.String)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="prefix">The prefix to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.Template)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="template">The <see cref="T:ceTe.DynamicPDF.Template"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.NumberingStyle,System.String)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="numberingStyle">The <see cref="T:ceTe.DynamicPDF.NumberingStyle"/> to use for the section.</param>
            <param name="prefix">The prefix to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.NumberingStyle,ceTe.DynamicPDF.Template)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="numberingStyle">The <see cref="T:ceTe.DynamicPDF.NumberingStyle"/> to use for the section.</param>
            <param name="template">The <see cref="T:ceTe.DynamicPDF.Template"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(System.String,ceTe.DynamicPDF.Template)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="prefix">The prefix to use for the section.</param>
            <param name="template">The <see cref="T:ceTe.DynamicPDF.Template"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.SectionList.Begin(ceTe.DynamicPDF.NumberingStyle,System.String,ceTe.DynamicPDF.Template)">
            <summary>
            Begins a section in the document.
            </summary>
            <param name="numberingStyle">The <see cref="T:ceTe.DynamicPDF.NumberingStyle"/> to use for the section.</param>
            <param name="prefix">The prefix to use for the section.</param>
            <param name="template">The <see cref="T:ceTe.DynamicPDF.Template"/> to use for the section.</param>
            <returns>The <see cref="T:ceTe.DynamicPDF.Section"/> object that was begun.</returns>
        </member>
        <member name="T:ceTe.DynamicPDF.StandardSecurity">
            <summary>
            Represents standard 40 bit PDF document security.
            </summary>
            <remarks>
            40 bit PDF security is compatible with PDF version 1.1 and higher and can be read
            with Adobe Acrobat version 3 and higher. Refer to the <see cref="T:ceTe.DynamicPDF.Security"/> section for more details on this class.
            </remarks>
            <example>The following example will set the standard security of the document so that the anyone who logs in 
            with the user password will not be able to print, edit or copy the document or its contents.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            Imports ceTe.DynamicPDF.PageElements
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document 
            		
            		' Create a Page and add it to the document
            		Dim MyPage As Page = New Page
            		MyDocument.Pages.Add(MyPage)
            
            		' Create a standard security object
            		Dim security As StandardSecurity = New StandardSecurity("owner", "user")
            
            		' Set the permissions on that security object
            		security.AllowPrint = False
            		security.AllowCopy = False
            		security.AllowEdit = False
            
            		' Add the security object to the document
            		MyDocument.Security = security
            
            		' Create and display a label as a reference
            		Dim text As String = "This document has been encrypted with 40 bit encryption."
            		MyPage.Elements.Add(New Label(text, 50, 50, 400, 100, Font.Helvetica, 18))
            
            		' Save the PDF
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            using ceTe.DynamicPDF.PageElements;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            
            		// Create a Page and add it to the document
            		Page page = new Page();
            		document.Pages.Add( page );
            
            		// Create a standard security object
            		StandardSecurity security = new StandardSecurity( "owner", "user" );
            
            		// Set the permissions on that security object
            		security.AllowPrint = false;
            		security.AllowCopy = false;
            		security.AllowEdit = false;
            
            		// Add the security object to the document
            		document.Security = security;
            
            		// Create and display a label as a reference
            		string text = "This document has been encrypted with 40 bit encryption.";
            		page.Elements.Add( new Label( text, 50, 50, 400, 100, Font.Helvetica, 18 ) );
            
            		// Save the PDF
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.StandardSecurity"/> class.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.StandardSecurity"/> class.
            </summary>
            <param name="ownerPassword">The owner password.</param>
            <param name="userPassword">The user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.StandardSecurity"/> class.
            </summary>
            <param name="password">The owner and user password.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.GetEncrypter(System.Byte[])">
            <summary>
            Overridden. Gets a 40 bit <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object to be used for encrypting the document.
            </summary>
            <param name="id">ID of the current PDF document.</param>
            <returns>An <see cref="T:ceTe.DynamicPDF.IO.Encrypter"/>.</returns>
        </member>
        <member name="M:ceTe.DynamicPDF.StandardSecurity.Draw(ceTe.DynamicPDF.IO.DocumentWriter,ceTe.DynamicPDF.IO.Encrypter)">
            <summary>
            Overridden. Draws the encrypter dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
            <param name="encrypter"><see cref="T:ceTe.DynamicPDF.IO.Encrypter"/> object used to encrypt the document.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.UrlAction">
            <summary>
            Represents an action linking to an external URL.
            </summary>
            <remarks>This class can be used to specify a URL when defining a <see cref="T:ceTe.DynamicPDF.PageElements.Link"/> or a <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/>.</remarks>
            <example>This example shows how to create an outline for a PDF document using UrlAction.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Add three blank pages
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            
            		' Add a top level outline and set properties
            		Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
            		MyOutline1.Style = TextStyle.Bold
            		MyOutline1.Color = New RgbColor(255, 0, 0)
            
            		' Add child outlines
            		Dim MyOutline1A As Outline = MyOutline1.Outlines.Add("Outline1A", New UrlAction("http://www.dynamicpdf.com"))
            		MyOutline1A.IsExpanded = False
            		Dim MyOutline1A1 As Outline = MyOutline1A.Outlines.Add("Outline1A1", New XYDestination(2, 0, 0))
            		Dim MyOutline1A2 As Outline = MyOutline1A.Outlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
            		Dim MyOutline1B As Outline = MyOutline1.Outlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
            		' Add a second top level outline
            		Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
            		' Add a child outline
            		Dim MyOutline2A As Outline = MyOutline2.Outlines.Add("Outline2A")
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add three blank pages
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Add a top level outline and set properties
            		Outline outline1 = document.Outlines.Add( "Outline1" );
            		outline1.Style = TextStyle.Bold;
            		outline1.Color = new RgbColor( 255, 0, 0 );
            		
            		// Add child outlines
            		Outline outline1A = outline1.Outlines.Add( "Outline1A", new UrlAction( "http://www.dynamicpdf.com" ) );
            		outline1A.IsExpanded = false;
            		Outline outline1A1 = outline1A.Outlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
            		Outline outline1A2 = outline1A.Outlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
            		Outline outline1B = outline1.Outlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
            		// Add a second top level outline
            		Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
            		// Add a child outline
            		Outline outline2A = outline2.Outlines.Add( "Outline2A" );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.UrlAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.UrlAction"/> class.
            </summary>
            <param name="url">URL the action launches.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.UrlAction.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the action to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the actions output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.UrlAction.URL">
            <summary>
            Gets or sets the URL launched by the action.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ViewerPreferences">
            <summary>
            Represents the viewer preferences for a document.
            </summary>
            /// <example>This example shows how to change the viewer preferences associated with a document.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Create a Page and add it to the document
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		
            		' Set the viewer preferences
            		MyDocument.ViewerPreferences.CenterWindow = True
            		MyDocument.ViewerPreferences.DisplayDocTitle = False
            		MyDocument.ViewerPreferences.HideMenubar = True
            		MyDocument.ViewerPreferences.HideToolbar = True
            		MyDocument.ViewerPreferences.HideWindowUI = True
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Create a page and add it to the document
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Set the viewer preferences
            		document.ViewerPreferences.CenterWindow = true;
            		document.ViewerPreferences.DisplayDocTitle = false;
            		document.ViewerPreferences.HideMenubar = true;
            		document.ViewerPreferences.HideToolbar = true;
            		document.ViewerPreferences.HideWindowUI = true;
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.ViewerPreferences.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Draws the encrypter viewer preferences dictionary to the given <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.HideToolbar">
            <summary>
            A flag specifying whether to hide the viewer application’s tool bars when the document is active.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.HideMenubar">
            <summary>
            A flag specifying whether to hide the viewer application’s menu bar when the document is active.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.HideWindowUI">
            <summary>
            A flag specifying whether to hide user interface elements in the document’s window (such as scroll
            bars and navigation controls), leaving only the document’s contents displayed.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.FitWindow">
            <summary>
            A flag specifying whether to resize the document’s window to fit the size of the first displayed page.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.CenterWindow">
            <summary>
            A flag specifying whether to position the document’s window in the center of the screen.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.ViewerPreferences.DisplayDocTitle">
            <summary>
            A flag specifying whether the window’s title bar should display the document title taken 
            from the Title entry of the document of the PDF file containing the document.
            </summary>
            <remarks>This does not affect the title bar of most web browsers. The title bar in most web browsers
            will display the file's URL and ignore this setting.</remarks>
        </member>
        <member name="T:ceTe.DynamicPDF.WebColor">
            <summary>
            Represents an RGB color created using the web hexadecimal convention.
            </summary>
        </member>
        <member name="M:ceTe.DynamicPDF.WebColor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.WebColor"/> class.
            </summary>
            <param name="webColor">The hexadecimal string representing the color.</param>
        </member>
        <member name="T:ceTe.DynamicPDF.XYDestination">
            <summary>
            Represents a destination to a coordinate on a page.
            </summary>
            <remarks>This class can be used to specify a certain page and X Y location for defining a <see cref="T:ceTe.DynamicPDF.PageElements.Link"/> or a <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/>.</remarks>
            <example>This example shows how to create an outline for a PDF document using XYDestination.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Add three blank pages
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            
            		' Add a top level outline and set properties
            		Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
            		MyOutline1.Style = TextStyle.Bold
            		MyOutline1.Color = New RgbColor(255, 0, 0)
            
            		' Add child outlines
            		Dim MyOutline1A As Outline = MyOutline1.Outlines.Add("Outline1A", New UrlAction("http://www.dynamicpdf.com"))
            		MyOutline1A.IsExpanded = False
            		Dim MyOutline1A1 As Outline = MyOutline1A.Outlines.Add("Outline1A1", New XYDestination(2, 0, 0))
            		Dim MyOutline1A2 As Outline = MyOutline1A.Outlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
            		Dim MyOutline1B As Outline = MyOutline1.Outlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
            		' Add a second top level outline
            		Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
            		' Add a child outline
            		Dim MyOutline2A As Outline = MyOutline2.Outlines.Add("Outline2A")
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add three blank pages
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Add a top level outline and set properties
            		Outline outline1 = document.Outlines.Add( "Outline1" );
            		outline1.Style = TextStyle.Bold;
            		outline1.Color = new RgbColor( 255, 0, 0 );
            		
            		// Add child outlines
            		Outline outline1A = outline1.Outlines.Add( "Outline1A", new UrlAction( "http://www.dynamicpdf.com" ) );
            		outline1A.IsExpanded = false;
            		Outline outline1A1 = outline1A.Outlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
            		Outline outline1A2 = outline1A.Outlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
            		Outline outline1B = outline1.Outlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
            		// Add a second top level outline
            		Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
            		// Add a child outline
            		Outline outline2A = outline2.Outlines.Add( "Outline2A" );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.XYDestination.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.XYDestination"/> class.
            </summary>
            <param name="pageNumber">Page number targeted by the destination.</param>
            <param name="x">X coordinate targeted by the destination.</param>
            <param name="y">Y coordinate targeted by the destination.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.XYDestination.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the destination to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the destinations output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.XYDestination.X">
            <summary>
            Gets or sets the X coordinate targeted by the destination.
            </summary>
        </member>
        <member name="P:ceTe.DynamicPDF.XYDestination.Y">
            <summary>
            Gets or sets the Y coordinate targeted by the destination.
            </summary>
        </member>
        <member name="T:ceTe.DynamicPDF.ZoomDestination">
            <summary>
            Represents a destination to a page at a given zoom.
            </summary>
            <remarks>This class can be used to specify a certain page at a certain zoom when defining a <see cref="T:ceTe.DynamicPDF.PageElements.Link"/> or a <see cref="T:ceTe.DynamicPDF.PageElements.Bookmark"/>.</remarks>
            <example>This example shows how to create an outline for a PDF document using ZoomDestination.<p/>
            <code>
            <SPAN class="lang">[Visual&amp;nbsp;Basic]</SPAN>
            Imports System
            Imports ceTe.DynamicPDF
            
            Module MyModule
            		
            	Sub Main()
            		
            		' Create a PDF Document
            		Dim MyDocument As Document = New Document
            
            		' Add three blank pages
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            		MyDocument.Pages.Add(New Page(PageSize.Letter))
            
            		' Add a top level outline and set properties
            		Dim MyOutline1 As Outline = MyDocument.Outlines.Add("Outline1")
            		MyOutline1.Style = TextStyle.Bold
            		MyOutline1.Color = New RgbColor(255, 0, 0)
            
            		' Add child outlines
            		Dim MyOutline1A As Outline = MyOutline1.Outlines.Add("Outline1A", New UrlAction("http://www.dynamicpdf.com"))
            		MyOutline1A.IsExpanded = False
            		Dim MyOutline1A1 As Outline = MyOutline1A.Outlines.Add("Outline1A1", New XYDestination(2, 0, 0))
            		Dim MyOutline1A2 As Outline = MyOutline1A.Outlines.Add("Outline1A2", New ZoomDestination(2, PageZoom.FitHeight))
            		Dim MyOutline1B As Outline = MyOutline1.Outlines.Add("Outline1B", New ZoomDestination(2, PageZoom.FitWidth))
            		
            		' Add a second top level outline
            		Dim MyOutline2 As Outline = MyDocument.Outlines.Add("Outline2", New XYDestination(3, 0, 300))
            		
            		' Add a child outline
            		Dim MyOutline2A As Outline = MyOutline2.Outlines.Add("Outline2A")
            		
            		' Save the PDF document
            		MyDocument.Draw("C:\MyDocument.pdf")
            		
            	End Sub
            End Module
            <SPAN class="lang">[C#]</SPAN>
            using System;
            using ceTe.DynamicPDF;
            
            class MyClass
            {
            	static void Main()
            	{
            		// Create a PDF Document
            		Document document = new Document();
            		
            		// Add three blank pages
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		document.Pages.Add( new Page( PageSize.Letter ) );
            		
            		// Add a top level outline and set properties
            		Outline outline1 = document.Outlines.Add( "Outline1" );
            		outline1.Style = TextStyle.Bold;
            		outline1.Color = new RgbColor( 255, 0, 0 );
            		
            		// Add child outlines
            		Outline outline1A = outline1.Outlines.Add( "Outline1A", new UrlAction( "http://www.dynamicpdf.com" ) );
            		outline1A.IsExpanded = false;
            		Outline outline1A1 = outline1A.Outlines.Add( "Outline1A1", new XYDestination( 2, 0, 0 ) );
            		Outline outline1A2 = outline1A.Outlines.Add( "Outline1A2", new ZoomDestination( 2, PageZoom.FitHeight ) );
            		Outline outline1B = outline1.Outlines.Add( "Outline1B", new ZoomDestination( 2, PageZoom.FitWidth ) );
            		
            		// Add a second top level outline
            		Outline outline2 = document.Outlines.Add( "Outline2", new XYDestination( 3, 0, 300 ) );
            		
            		// Add a child outline
            		Outline outline2A = outline2.Outlines.Add( "Outline2A" );
            		
            		// Save the PDF document
            		document.Draw( @"C:\MyDocument.pdf" );
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ceTe.DynamicPDF.ZoomDestination.#ctor(System.Int32,ceTe.DynamicPDF.PageZoom)">
            <summary>
            Initializes a new instance of the <see cref="T:ceTe.DynamicPDF.ZoomDestination"/> class.
            </summary>
            <param name="pageNumber">Page number targeted by the destination.</param>
            <param name="zoom">Zoom used to display the destination.</param>
        </member>
        <member name="M:ceTe.DynamicPDF.ZoomDestination.Draw(ceTe.DynamicPDF.IO.DocumentWriter)">
            <summary>
            Overridden. Draws the destination to the specified <see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object.
            </summary>
            <param name="writer"><see cref="T:ceTe.DynamicPDF.IO.DocumentWriter"/> object to receive the destinations output.</param>
        </member>
        <member name="P:ceTe.DynamicPDF.ZoomDestination.Zoom">
            <summary>
            Gets or sets the zoom used to display the destination.
            </summary>
        </member>
    </members>
</doc>
